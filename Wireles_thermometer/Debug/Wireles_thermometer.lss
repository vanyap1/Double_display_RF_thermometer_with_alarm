
Wireles_thermometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00800100  000023ea  0000247e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000581  00800178  00800178  000024f6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000024f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00002ba8  00000000  00000000  00002594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0005914a  00000000  00000000  0000513c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c40  00000000  00000000  0005e286  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000fe7e  00000000  00000000  00060ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00010b68  00000000  00000000  00070d44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001502d  00000000  00000000  000818ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00067ee5  00000000  00000000  000968d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002aa0  00000000  00000000  000fe7be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__ctors_end>
       4:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
       8:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
       c:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      10:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      14:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      18:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      1c:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      20:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      24:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      28:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      2c:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      30:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      34:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      38:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      3c:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      40:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      44:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      48:	0c 94 85 0d 	jmp	0x1b0a	; 0x1b0a <__vector_18>
      4c:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      50:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__vector_20>
      54:	0c 94 9b 0c 	jmp	0x1936	; 0x1936 <__vector_21>
      58:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      5c:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      60:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      64:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      68:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      6c:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      70:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      74:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      78:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      7c:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      80:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      84:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      88:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      8c:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      90:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      94:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      98:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      9c:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      a0:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <__vector_40>
      a4:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      a8:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      ac:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>
      b0:	0c 94 2c 02 	jmp	0x458	; 0x458 <__bad_interrupt>

000000b4 <__trampolines_end>:
      b4:	40 02       	muls	r20, r16
      b6:	03 02       	muls	r16, r19
      b8:	04 04       	cpc	r0, r4
      ba:	01 02       	muls	r16, r17
      bc:	05 08       	sbc	r0, r5
      be:	0b 00       	.word	0x000b	; ????
      c0:	01 0c       	add	r0, r1
      c2:	00 0c       	add	r0, r0
      c4:	02 01       	movw	r0, r4
      c6:	4e 00       	.word	0x004e	; ????
      c8:	00 03       	mulsu	r16, r16
      ca:	4d 20       	and	r4, r13
      cc:	07 b8       	out	0x07, r0	; 7
      ce:	c7 e7       	ldi	r28, 0x77	; 119
      d0:	ff 08       	sbc	r15, r15
      d2:	21 07       	cpc	r18, r17
      d4:	b8 c7       	rjmp	.+3952   	; 0x1046 <u8g2_ll_hvline_vertical_top_lsb+0x72>
      d6:	e7 ff       	sbrs	r30, 7
      d8:	08 22       	and	r0, r24
      da:	07 b8       	out	0x07, r0	; 7
      dc:	c7 e7       	ldi	r28, 0x77	; 119
      de:	ff 08       	sbc	r15, r15
      e0:	23 07       	cpc	r18, r19
      e2:	b8 c7       	rjmp	.+3952   	; 0x1054 <u8g2_ll_hvline_vertical_top_lsb+0x80>
      e4:	e7 ff       	sbrs	r30, 7
      e6:	08 24       	eor	r0, r8
      e8:	07 b8       	out	0x07, r0	; 7
      ea:	c7 e7       	ldi	r28, 0x77	; 119
      ec:	ff 08       	sbc	r15, r15
      ee:	25 07       	cpc	r18, r21
      f0:	b8 c7       	rjmp	.+3952   	; 0x1062 <u8g2_ll_hvline_vertical_top_lsb+0x8e>
      f2:	e7 ff       	sbrs	r30, 7
      f4:	08 26       	eor	r0, r24
      f6:	07 b8       	out	0x07, r0	; 7
      f8:	c7 e7       	ldi	r28, 0x77	; 119
      fa:	ff 08       	sbc	r15, r15
      fc:	27 07       	cpc	r18, r23
      fe:	b8 c7       	rjmp	.+3952   	; 0x1070 <u8g2_ll_hvline_vertical_top_lsb+0x9c>
     100:	e7 ff       	sbrs	r30, 7
     102:	08 28       	or	r0, r8
     104:	0a b8       	out	0x0a, r0	; 10
     106:	c7 51       	subi	r28, 0x17	; 23
     108:	f3 7e       	andi	r31, 0xE3	; 227
     10a:	47 74       	andi	r20, 0x47	; 71
     10c:	18 29       	or	r17, r8
     10e:	0a b8       	out	0x0a, r0	; 10
     110:	c7 d3       	rcall	.+1934   	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     112:	91 bc       	out	0x21, r9	; 33
     114:	5f 75       	andi	r21, 0x5F	; 95
     116:	10 2a       	or	r1, r16
     118:	0c b8       	out	0x0c, r0	; 12
     11a:	c7 69       	ori	r28, 0x97	; 151
     11c:	9c e3       	ldi	r25, 0x3C	; 60
     11e:	31 a9       	ldd	r19, Z+49	; 0x31
     120:	f3 0b       	sbc	r31, r19
     122:	00 2b       	or	r16, r16
     124:	0c b8       	out	0x0c, r0	; 12
     126:	c7 07       	cpc	r28, r23
     128:	f3 e2       	ldi	r31, 0x23	; 35
     12a:	30 84       	ldd	r3, Z+8	; 0x08
     12c:	79 9d       	mul	r23, r9
     12e:	03 2c       	mov	r0, r3
     130:	08 b8       	out	0x08, r0	; 8
     132:	c7 8b       	std	Z+23, r28	; 0x17
     134:	73 fe       	sbrs	r7, 3
     136:	07 2d       	mov	r16, r7
     138:	09 b8       	out	0x09, r0	; 9
     13a:	c7 e7       	ldi	r28, 0x77	; 119
     13c:	38 0c       	add	r3, r8
     13e:	39 3f       	cpi	r19, 0xF9	; 249
     140:	2e 09       	sbc	r18, r14
     142:	b8 c7       	rjmp	.+3952   	; 0x10b4 <u8g2_update_dimension_common+0x20>
     144:	e7 df       	rcall	.-50     	; 0x114 <__trampolines_end+0x60>
     146:	64 1d       	adc	r22, r4
     148:	05 2f       	mov	r16, r21
     14a:	0c b8       	out	0x0c, r0	; 12
     14c:	c7 ae       	std	Z+63, r12	; 0x3f
     14e:	c7 f5       	brid	.+112    	; 0x1c0 <__trampolines_end+0x10c>
     150:	b8 1e       	adc	r11, r24
     152:	e7 14       	cp	r14, r7
     154:	00 30       	cpi	r16, 0x00	; 0
     156:	14 b8       	out	0x04, r1	; 4
     158:	c7 38       	cpi	r28, 0x87	; 135
     15a:	85 51       	subi	r24, 0x15	; 21
     15c:	18 85       	ldd	r17, Y+8	; 0x08
     15e:	51 18       	sub	r5, r1
     160:	85 51       	subi	r24, 0x15	; 21
     162:	18 85       	ldd	r17, Y+8	; 0x08
     164:	51 18       	sub	r5, r1
     166:	0d 3b       	cpi	r16, 0xBD	; 189
     168:	06 31       	cpi	r16, 0x16	; 22
     16a:	08 b8       	out	0x08, r0	; 8
     16c:	c7 d4       	rcall	.+2446   	; 0xafc <u8g2_font_get_glyph_data+0x96>
     16e:	fb 77       	andi	r31, 0x7B	; 123
     170:	0c 32       	cpi	r16, 0x2C	; 44
     172:	0d b8       	out	0x0d, r0	; 13
     174:	c7 b8       	out	0x07, r12	; 7
     176:	77 1a       	sub	r7, r23
     178:	a6 bc       	out	0x26, r10	; 38
     17a:	3e ec       	ldi	r19, 0xCE	; 206
     17c:	18 00       	.word	0x0018	; ????
     17e:	33 0c       	add	r3, r3
     180:	b8 c7       	rjmp	.+3952   	; 0x10f2 <u8g2_update_dimension_common+0x5e>
     182:	b8 37       	cpi	r27, 0x78	; 120
     184:	0e 79       	andi	r16, 0x9E	; 158
     186:	a7 61       	ori	r26, 0x17	; 23
     188:	c7 00       	.word	0x00c7	; ????
     18a:	34 10       	cpse	r3, r4
     18c:	b8 c7       	rjmp	.+3952   	; 0x10fe <u8g2_update_dimension_common+0x6a>
     18e:	08 a3       	std	Y+32, r16	; 0x20
     190:	30 0a       	sbc	r3, r16
     192:	a3 30       	cpi	r26, 0x03	; 3
     194:	0a a3       	std	Y+34, r16	; 0x22
     196:	61 ef       	ldi	r22, 0xF1	; 241
     198:	8e 01       	movw	r16, r28
     19a:	35 0d       	add	r19, r5
     19c:	b8 c7       	rjmp	.+3952   	; 0x110e <u8g2_update_dimension_common+0x7a>
     19e:	38 e5       	ldi	r19, 0x58	; 88
     1a0:	f5 61       	ori	r31, 0x15	; 21
     1a2:	ef 34       	cpi	r30, 0x4F	; 79
     1a4:	ec 18       	sub	r14, r12
     1a6:	00 36       	cpi	r16, 0x60	; 96
     1a8:	11 b8       	out	0x01, r1	; 1
     1aa:	c7 38       	cpi	r28, 0x87	; 135
     1ac:	e5 f5       	brhc	.+120    	; 0x226 <__trampolines_end+0x172>
     1ae:	61 0a       	sbc	r6, r17
     1b0:	a3 30       	cpi	r26, 0x03	; 3
     1b2:	0a a3       	std	Y+34, r16	; 0x22
     1b4:	30 1a       	sub	r3, r16
     1b6:	76 0c       	add	r7, r6
     1b8:	37 09       	sbc	r19, r7
     1ba:	b8 c7       	rjmp	.+3952   	; 0x112c <u8g2_update_dimension_common+0x98>
     1bc:	b8 f7       	brcc	.-18     	; 0x1ac <__trampolines_end+0xf8>
     1be:	ef 18       	sub	r14, r15
     1c0:	00 38       	cpi	r16, 0x80	; 128
     1c2:	14 b8       	out	0x04, r1	; 4
     1c4:	c7 38       	cpi	r28, 0x87	; 135
     1c6:	85 51       	subi	r24, 0x15	; 21
     1c8:	18 85       	ldd	r17, Y+8	; 0x08
     1ca:	d1 30       	cpi	r29, 0x01	; 1
     1cc:	85 51       	subi	r24, 0x15	; 21
     1ce:	18 85       	ldd	r17, Y+8	; 0x08
     1d0:	51 18       	sub	r5, r1
     1d2:	0d 3b       	cpi	r16, 0xBD	; 189
     1d4:	06 39       	cpi	r16, 0x96	; 150
     1d6:	0f b8       	out	0x0f, r0	; 15
     1d8:	c7 38       	cpi	r28, 0x87	; 135
     1da:	85 51       	subi	r24, 0x15	; 21
     1dc:	18 85       	ldd	r17, Y+8	; 0x08
     1de:	d1 b0       	in	r13, 0x01	; 1
     1e0:	77 1a       	sub	r7, r23
     1e2:	76 0c       	add	r7, r6
     1e4:	3a 0b       	sbc	r19, r26
     1e6:	b8 c7       	rjmp	.+3952   	; 0x1158 <u8g2_apply_clip_window+0x1e>
     1e8:	67 95       	ror	r22
     1ea:	75 4e       	sbci	r23, 0xE5	; 229
     1ec:	b2 8e       	std	Z+26, r11	; 0x1a
     1ee:	02 3b       	cpi	r16, 0xB2	; 178
     1f0:	07 b8       	out	0x07, r0	; 7
     1f2:	c7 e7       	ldi	r28, 0x77	; 119
     1f4:	ff 08       	sbc	r15, r15
     1f6:	3c 07       	cpc	r19, r28
     1f8:	b8 c7       	rjmp	.+3952   	; 0x116a <u8g2_apply_clip_window+0x30>
     1fa:	e7 ff       	sbrs	r30, 7
     1fc:	08 3d       	cpi	r16, 0xD8	; 216
     1fe:	07 b8       	out	0x07, r0	; 7
     200:	c7 e7       	ldi	r28, 0x77	; 119
     202:	ff 08       	sbc	r15, r15
     204:	3e 07       	cpc	r19, r30
     206:	b8 c7       	rjmp	.+3952   	; 0x1178 <u8g2_apply_clip_window+0x3e>
     208:	e7 ff       	sbrs	r30, 7
     20a:	08 3f       	cpi	r16, 0xF8	; 248
     20c:	07 b8       	out	0x07, r0	; 7
     20e:	c7 e7       	ldi	r28, 0x77	; 119
     210:	ff 08       	sbc	r15, r15
     212:	40 07       	cpc	r20, r16
     214:	b8 c7       	rjmp	.+3952   	; 0x1186 <u8g2_apply_clip_window+0x4c>
     216:	e7 ff       	sbrs	r30, 7
     218:	08 41       	sbci	r16, 0x18	; 24
     21a:	16 b8       	out	0x06, r1	; 6
     21c:	c7 38       	cpi	r28, 0x87	; 135
     21e:	24 69       	ori	r18, 0x94	; 148
     220:	92 26       	eor	r9, r18
     222:	69 92       	st	Y+, r6
     224:	26 c3       	rjmp	.+1612   	; 0x872 <__DATA_REGION_LENGTH__+0x72>
     226:	90 a4       	ldd	r9, Z+40	; 0x28
     228:	49 9a       	sbi	0x09, 1	; 9
     22a:	a4 49       	sbci	r26, 0x94	; 148
     22c:	9a 43       	sbci	r25, 0x3A	; 58
     22e:	00 42       	sbci	r16, 0x20	; 32
     230:	16 b8       	out	0x06, r1	; 6
     232:	c7 38       	cpi	r28, 0x87	; 135
     234:	24 69       	ori	r18, 0x94	; 148
     236:	92 26       	eor	r9, r18
     238:	69 32       	cpi	r22, 0x29	; 41
     23a:	4c 69       	ori	r20, 0x9C	; 156
     23c:	92 26       	eor	r9, r18
     23e:	69 92       	st	Y+, r6
     240:	26 c3       	rjmp	.+1612   	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     242:	90 43       	sbci	r25, 0x30	; 48
     244:	00 43       	sbci	r16, 0x30	; 48
     246:	0c b8       	out	0x0c, r0	; 12
     248:	c7 38       	cpi	r28, 0x87	; 135
     24a:	24 79       	andi	r18, 0x94	; 148
     24c:	bf 0f       	add	r27, r31
     24e:	43 0e       	add	r4, r19
     250:	01 44       	sbci	r16, 0x41	; 65
     252:	14 b8       	out	0x04, r1	; 4
     254:	c7 38       	cpi	r28, 0x87	; 135
     256:	a5 49       	sbci	r26, 0x95	; 149
     258:	9a a4       	ldd	r9, Y+42	; 0x2a
     25a:	49 9a       	sbi	0x09, 1	; 9
     25c:	a4 49       	sbci	r26, 0x94	; 148
     25e:	9a a4       	ldd	r9, Y+42	; 0x2a
     260:	49 9a       	sbi	0x09, 1	; 9
     262:	0c 3b       	cpi	r16, 0xBC	; 188
     264:	06 45       	sbci	r16, 0x56	; 86
     266:	0f b8       	out	0x0f, r0	; 15
     268:	c7 38       	cpi	r28, 0x87	; 135
     26a:	24 79       	andi	r18, 0x94	; 148
     26c:	7d d0       	rcall	.+250    	; 0x368 <__trampolines_end+0x2b4>
     26e:	f2 f6       	brpl	.-68     	; 0x22c <__trampolines_end+0x178>
     270:	61 c8       	rjmp	.-3902   	; 0xfffff334 <__eeprom_end+0xff7ef334>
     272:	21 00       	.word	0x0021	; ????
     274:	46 0d       	add	r20, r6
     276:	b8 c7       	rjmp	.+3952   	; 0x11e8 <u8g2_update_page_win_r0+0x14>
     278:	38 24       	eor	r3, r8
     27a:	79 7d       	andi	r23, 0xD9	; 217
     27c:	d0 f2       	brcs	.-76     	; 0x232 <__trampolines_end+0x17e>
     27e:	ee 14       	cp	r14, r14
     280:	00 47       	sbci	r16, 0x70	; 112
     282:	13 b8       	out	0x03, r1	; 3
     284:	c7 38       	cpi	r28, 0x87	; 135
     286:	24 79       	andi	r18, 0x94	; 148
     288:	d3 90       	.word	0x90d3	; ????
     28a:	a4 49       	sbci	r26, 0x94	; 148
     28c:	9a a4       	ldd	r9, Y+42	; 0x2a
     28e:	49 9a       	sbi	0x09, 1	; 9
     290:	0c 43       	sbci	r16, 0x3C	; 60
     292:	0e 01       	movw	r0, r28
     294:	48 16       	cp	r4, r24
     296:	b8 c7       	rjmp	.+3952   	; 0x1208 <u8g2_draw_mirror_vertical_r0+0xe>
     298:	48 93       	.word	0x9348	; ????
     29a:	34 49       	sbci	r19, 0x94	; 148
     29c:	93 34       	cpi	r25, 0x43	; 67
     29e:	19 86       	std	Y+9, r1	; 0x09
     2a0:	24 4d       	sbci	r18, 0xD4	; 212
     2a2:	d2 24       	eor	r13, r2
     2a4:	4d d2       	rcall	.+1178   	; 0x740 <u8g2_font_decode_get_signed_bits+0x2>
     2a6:	24 cd       	rjmp	.-1464   	; 0xfffffcf0 <__eeprom_end+0xff7efcf0>
     2a8:	21 00       	.word	0x0021	; ????
     2aa:	49 08       	sbc	r4, r9
     2ac:	b8 c7       	rjmp	.+3952   	; 0x121e <u8g2_draw_mirror_vertical_r0+0x24>
     2ae:	cb fb       	.word	0xfbcb	; ????
     2b0:	77 14       	cp	r7, r7
     2b2:	4a 0f       	add	r20, r26
     2b4:	b8 c7       	rjmp	.+3952   	; 0x1226 <u8g2_SetMaxClipWindow+0x4>
     2b6:	1b f2       	brvs	.-122    	; 0x23e <__trampolines_end+0x18a>
     2b8:	5e d2       	rcall	.+1212   	; 0x776 <u8g2_add_vector_y+0x1a>
     2ba:	24 4d       	sbci	r18, 0xD4	; 212
     2bc:	d2 68       	ori	r29, 0x82	; 130
     2be:	d0 31       	cpi	r29, 0x10	; 16
     2c0:	00 4b       	sbci	r16, 0xB0	; 176
     2c2:	13 b8       	out	0x03, r1	; 3
     2c4:	c7 48       	sbci	r28, 0x87	; 135
     2c6:	93 30       	cpi	r25, 0x03	; 3
     2c8:	ca 4a       	sbci	r28, 0xAA	; 170
     2ca:	e1 9a       	sbi	0x1c, 1	; 28
     2cc:	a4 51       	subi	r26, 0x14	; 20
     2ce:	98 15       	cp	r25, r8
     2d0:	a3 34       	cpi	r26, 0x43	; 67
     2d2:	87 00       	.word	0x0087	; ????
     2d4:	4c 0b       	sbc	r20, r28
     2d6:	b8 c7       	rjmp	.+3952   	; 0x1248 <u8g2_SetMaxClipWindow+0x26>
     2d8:	c8 fb       	.word	0xfbc8	; ????
     2da:	fb 30       	cpi	r31, 0x0B	; 11
     2dc:	e4 10       	cpse	r14, r4
     2de:	00 4d       	sbci	r16, 0xD0	; 208
     2e0:	14 b8       	out	0x04, r1	; 4
     2e2:	c7 48       	sbci	r28, 0x87	; 135
     2e4:	13 4d       	sbci	r17, 0xD3	; 211
     2e6:	e9 a9       	ldd	r30, Y+49	; 0x31
     2e8:	92 26       	eor	r9, r18
     2ea:	69 92       	st	Y+, r6
     2ec:	26 69       	ori	r18, 0x96	; 150
     2ee:	92 26       	eor	r9, r18
     2f0:	69 0e       	add	r6, r25
     2f2:	01 4e       	sbci	r16, 0xE1	; 225
     2f4:	16 b8       	out	0x06, r1	; 6
     2f6:	c7 10       	cpse	r12, r7
     2f8:	13 31       	cpi	r17, 0x13	; 19
     2fa:	a9 25       	eor	r26, r9
     2fc:	b5 24       	eor	r11, r5
     2fe:	aa 44       	sbci	r26, 0x4A	; 74
     300:	95 2c       	mov	r9, r5
     302:	a9 25       	eor	r26, r9
     304:	45 25       	eor	r20, r5
     306:	d4 21       	and	r29, r4
     308:	00 4f       	sbci	r16, 0xF0	; 240
     30a:	15 b8       	out	0x05, r1	; 5
     30c:	c7 19       	sub	r28, r7
     30e:	a4 34       	cpi	r26, 0x44	; 68
     310:	49 93       	st	Y+, r20
     312:	34 49       	sbci	r19, 0x94	; 148
     314:	93 34       	cpi	r25, 0x43	; 67
     316:	49 93       	st	Y+, r20
     318:	34 49       	sbci	r19, 0x94	; 148
     31a:	a3 41       	sbci	r26, 0x13	; 19
     31c:	c7 00       	.word	0x00c7	; ????
     31e:	50 10       	cpse	r5, r0
     320:	b8 c7       	rjmp	.+3952   	; 0x1292 <u8g2_SetupBuffer+0x38>
     322:	38 24       	eor	r3, r8
     324:	69 92       	st	Y+, r6
     326:	26 69       	ori	r18, 0x96	; 150
     328:	32 0c       	add	r3, r2
     32a:	49 de       	rcall	.-878    	; 0xffffffbe <__eeprom_end+0xff7effbe>
     32c:	9d 02       	muls	r25, r29
     32e:	51 15       	cp	r21, r1
     330:	b8 c7       	rjmp	.+3952   	; 0x12a2 <u8g2_SetupBuffer+0x48>
     332:	19 b2       	in	r1, 0x19	; 25
     334:	30 0a       	sbc	r3, r16
     336:	a3 30       	cpi	r26, 0x03	; 3
     338:	0a a3       	std	Y+34, r16	; 0x22
     33a:	30 0a       	sbc	r3, r16
     33c:	a3 30       	cpi	r26, 0x03	; 3
     33e:	0a b3       	in	r16, 0x1a	; 26
     340:	61 87       	std	Z+9, r22	; 0x09
     342:	00 52       	subi	r16, 0x20	; 32
     344:	15 b8       	out	0x05, r1	; 5
     346:	c7 38       	cpi	r28, 0x87	; 135
     348:	24 69       	ori	r18, 0x94	; 148
     34a:	92 26       	eor	r9, r18
     34c:	69 32       	cpi	r22, 0x29	; 41
     34e:	0c 49       	sbci	r16, 0x9C	; 156
     350:	35 0a       	sbc	r3, r21
     352:	b3 62       	ori	r27, 0x23	; 35
     354:	94 e6       	ldi	r25, 0x64	; 100
     356:	10 00       	.word	0x0010	; ????
     358:	53 0f       	add	r21, r19
     35a:	b8 c7       	rjmp	.+3952   	; 0x12cc <u8x8_ascii_next+0x12>
     35c:	38 24       	eor	r3, r8
     35e:	79 fb       	.word	0xfb79	; ????
     360:	30 e4       	ldi	r19, 0x40	; 64
     362:	2d c3       	rjmp	.+1626   	; 0x9be <__stack+0xbf>
     364:	90 43       	sbci	r25, 0x30	; 48
     366:	00 54       	subi	r16, 0x40	; 64
     368:	0a b8       	out	0x0a, r0	; 10
     36a:	c7 38       	cpi	r28, 0x87	; 135
     36c:	84 79       	andi	r24, 0x94	; 148
     36e:	bf 93       	push	r27
     370:	01 55       	subi	r16, 0x51	; 81
     372:	16 b8       	out	0x06, r1	; 6
     374:	c7 48       	sbci	r28, 0x87	; 135
     376:	93 34       	cpi	r25, 0x43	; 67
     378:	49 93       	st	Y+, r20
     37a:	34 49       	sbci	r19, 0x94	; 148
     37c:	93 34       	cpi	r25, 0x43	; 67
     37e:	49 93       	st	Y+, r20
     380:	34 49       	sbci	r19, 0x94	; 148
     382:	93 61       	ori	r25, 0x13	; 19
     384:	c8 21       	and	r28, r8
     386:	00 56       	subi	r16, 0x60	; 96
     388:	12 b8       	out	0x02, r1	; 2
     38a:	c7 48       	sbci	r28, 0x87	; 135
     38c:	93 34       	cpi	r25, 0x43	; 67
     38e:	49 a3       	std	Y+33, r20	; 0x21
     390:	ac 4d       	sbci	r26, 0xDC	; 220
     392:	11 93       	st	Z+, r17
     394:	34 89       	ldd	r19, Z+20	; 0x14
     396:	f3 1c       	adc	r15, r3
     398:	05 57       	subi	r16, 0x75	; 117
     39a:	14 b8       	out	0x04, r1	; 4
     39c:	c7 48       	sbci	r28, 0x87	; 135
     39e:	93 34       	cpi	r25, 0x43	; 67
     3a0:	49 93       	st	Y+, r20
     3a2:	34 49       	sbci	r19, 0x94	; 148
     3a4:	93 a8       	ldd	r9, Z+51	; 0x33
     3a6:	12 55       	subi	r17, 0x52	; 82
     3a8:	fa 8b       	std	Y+18, r31	; 0x12
     3aa:	a6 43       	sbci	r26, 0x36	; 54
     3ac:	00 58       	subi	r16, 0x80	; 128
     3ae:	11 b8       	out	0x01, r1	; 1
     3b0:	c7 48       	sbci	r28, 0x87	; 135
     3b2:	a3 ac       	ldd	r10, Z+59	; 0x3b
     3b4:	31 89       	ldd	r19, Z+17	; 0x11
     3b6:	f3 38       	cpi	r31, 0x83	; 131
     3b8:	09 b3       	in	r16, 0x19	; 25
     3ba:	a6 34       	cpi	r26, 0x46	; 70
     3bc:	87 00       	.word	0x0087	; ????
     3be:	59 10       	cpse	r5, r9
     3c0:	b8 c7       	rjmp	.+3952   	; 0x1332 <u8x8_byte_4wire_sw_spi+0xe>
     3c2:	48 93       	.word	0x9348	; ????
     3c4:	34 49       	sbci	r19, 0x94	; 148
     3c6:	93 34       	cpi	r25, 0x43	; 67
     3c8:	19 86       	std	Y+9, r1	; 0x09
     3ca:	30 ef       	ldi	r19, 0xF0	; 240
     3cc:	8e 02       	muls	r24, r30
     3ce:	5a 0d       	add	r21, r10
     3d0:	b8 c7       	rjmp	.+3952   	; 0x1342 <u8x8_byte_4wire_sw_spi+0x1e>
     3d2:	38 e4       	ldi	r19, 0x48	; 72
     3d4:	b1 ea       	ldi	r27, 0xA1	; 161
     3d6:	73 3e       	cpi	r23, 0xE3	; 227
     3d8:	0c 39       	cpi	r16, 0x9C	; 156
     3da:	04 5b       	subi	r16, 0xB4	; 180
     3dc:	0b b8       	out	0x0b, r0	; 11
     3de:	c7 18       	sub	r12, r7
     3e0:	c2 bc       	out	0x22, r12	; 34
     3e2:	df 87       	std	Y+15, r29	; 0x0f
     3e4:	1c 05       	cpc	r17, r12
     3e6:	5c 11       	cpse	r21, r12
     3e8:	b8 c7       	rjmp	.+3952   	; 0x135a <u8x8_byte_4wire_sw_spi+0x36>
     3ea:	c8 91       	.word	0x91c8	; ????
     3ec:	3c 47       	sbci	r19, 0x7C	; 124
     3ee:	f2 1c       	adc	r15, r2
     3f0:	c9 73       	andi	r28, 0x39	; 57
     3f2:	24 cf       	rjmp	.-440    	; 0x23c <__trampolines_end+0x188>
     3f4:	91 1c       	adc	r9, r1
     3f6:	03 5d       	subi	r16, 0xD3	; 211
     3f8:	0b b8       	out	0x0b, r0	; 11
     3fa:	c7 1a       	sub	r12, r23
     3fc:	f2 fe       	sbrs	r15, 2
     3fe:	38 e4       	ldi	r19, 0x48	; 72
     400:	18 00       	.word	0x0018	; ????
     402:	5e 0b       	sbc	r21, r30
     404:	b8 c7       	rjmp	.+3952   	; 0x1376 <u8x8_byte_4wire_sw_spi+0x52>
     406:	8b 93       	.word	0x938b	; ????
     408:	30 cb       	rjmp	.-2464   	; 0xfffffa6a <__eeprom_end+0xff7efa6a>
     40a:	f9 37       	cpi	r31, 0x79	; 121
     40c:	00 5f       	subi	r16, 0xF0	; 240
     40e:	09 b8       	out	0x09, r0	; 9
     410:	c7 e7       	ldi	r28, 0x77	; 119
     412:	3f 0d       	add	r19, r15
     414:	3b 06       	cpc	r3, r27
     416:	00 00       	nop
     418:	00 04       	cpc	r0, r0
     41a:	ff ff       	.word	0xffff	; ????
	...

0000041e <__ctors_end>:
     41e:	11 24       	eor	r1, r1
     420:	1f be       	out	0x3f, r1	; 63
     422:	cf ef       	ldi	r28, 0xFF	; 255
     424:	d8 e0       	ldi	r29, 0x08	; 8
     426:	de bf       	out	0x3e, r29	; 62
     428:	cd bf       	out	0x3d, r28	; 61

0000042a <__do_copy_data>:
     42a:	11 e0       	ldi	r17, 0x01	; 1
     42c:	a0 e0       	ldi	r26, 0x00	; 0
     42e:	b1 e0       	ldi	r27, 0x01	; 1
     430:	ea ee       	ldi	r30, 0xEA	; 234
     432:	f3 e2       	ldi	r31, 0x23	; 35
     434:	02 c0       	rjmp	.+4      	; 0x43a <__do_copy_data+0x10>
     436:	05 90       	lpm	r0, Z+
     438:	0d 92       	st	X+, r0
     43a:	a8 37       	cpi	r26, 0x78	; 120
     43c:	b1 07       	cpc	r27, r17
     43e:	d9 f7       	brne	.-10     	; 0x436 <__do_copy_data+0xc>

00000440 <__do_clear_bss>:
     440:	26 e0       	ldi	r18, 0x06	; 6
     442:	a8 e7       	ldi	r26, 0x78	; 120
     444:	b1 e0       	ldi	r27, 0x01	; 1
     446:	01 c0       	rjmp	.+2      	; 0x44a <.do_clear_bss_start>

00000448 <.do_clear_bss_loop>:
     448:	1d 92       	st	X+, r1

0000044a <.do_clear_bss_start>:
     44a:	a9 3f       	cpi	r26, 0xF9	; 249
     44c:	b2 07       	cpc	r27, r18
     44e:	e1 f7       	brne	.-8      	; 0x448 <.do_clear_bss_loop>
     450:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <main>
     454:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <_exit>

00000458 <__bad_interrupt>:
     458:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000045c <u8g2_send_tile_row>:
}

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     460:	dc 01       	movw	r26, r24
     462:	ed 91       	ld	r30, X+
     464:	fc 91       	ld	r31, X
     466:	11 97       	sbiw	r26, 0x01	; 1
     468:	20 89       	ldd	r18, Z+16	; 0x10
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
     46a:	92 96       	adiw	r26, 0x22	; 34
     46c:	0d 91       	ld	r16, X+
     46e:	1c 91       	ld	r17, X
     470:	93 97       	sbiw	r26, 0x23	; 35
  offset *= w;
     472:	62 9f       	mul	r22, r18
     474:	b0 01       	movw	r22, r0
     476:	11 24       	eor	r1, r1
  offset *= 8;
     478:	66 0f       	add	r22, r22
     47a:	77 1f       	adc	r23, r23
     47c:	66 0f       	add	r22, r22
     47e:	77 1f       	adc	r23, r23
     480:	66 0f       	add	r22, r22
     482:	77 1f       	adc	r23, r23
  ptr += offset;
     484:	06 0f       	add	r16, r22
     486:	17 1f       	adc	r17, r23
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
     488:	60 e0       	ldi	r22, 0x00	; 0
     48a:	0e 94 35 0b 	call	0x166a	; 0x166a <u8x8_DrawTile>
}
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	08 95       	ret

00000494 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
     494:	ef 92       	push	r14
     496:	ff 92       	push	r15
     498:	0f 93       	push	r16
     49a:	1f 93       	push	r17
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	8c 01       	movw	r16, r24
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
     4a2:	dc 01       	movw	r26, r24
     4a4:	94 96       	adiw	r26, 0x24	; 36
     4a6:	fc 90       	ld	r15, X
     4a8:	94 97       	sbiw	r26, 0x24	; 36
  dest_row = u8g2->tile_curr_row;
     4aa:	95 96       	adiw	r26, 0x25	; 37
     4ac:	dc 91       	ld	r29, X
     4ae:	95 97       	sbiw	r26, 0x25	; 37
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
     4b0:	ed 91       	ld	r30, X+
     4b2:	fc 91       	ld	r31, X
     4b4:	e1 88       	ldd	r14, Z+17	; 0x11
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
     4b6:	c0 e0       	ldi	r28, 0x00	; 0
  dest_row = u8g2->tile_curr_row;
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
     4b8:	4d 2f       	mov	r20, r29
     4ba:	6c 2f       	mov	r22, r28
     4bc:	c8 01       	movw	r24, r16
     4be:	0e 94 2e 02 	call	0x45c	; 0x45c <u8g2_send_tile_row>
    src_row++;
     4c2:	cf 5f       	subi	r28, 0xFF	; 255
    dest_row++;
     4c4:	df 5f       	subi	r29, 0xFF	; 255
  } while( src_row < src_max && dest_row < dest_max );
     4c6:	cf 15       	cp	r28, r15
     4c8:	10 f4       	brcc	.+4      	; 0x4ce <u8g2_send_buffer+0x3a>
     4ca:	de 15       	cp	r29, r14
     4cc:	a8 f3       	brcs	.-22     	; 0x4b8 <u8g2_send_buffer+0x24>
}
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	1f 91       	pop	r17
     4d4:	0f 91       	pop	r16
     4d6:	ff 90       	pop	r15
     4d8:	ef 90       	pop	r14
     4da:	08 95       	ret

000004dc <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
     4dc:	fc 01       	movw	r30, r24
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     4de:	a0 81       	ld	r26, Z
     4e0:	b1 81       	ldd	r27, Z+1	; 0x01
     4e2:	50 96       	adiw	r26, 0x10	; 16
     4e4:	9c 91       	ld	r25, X
  cnt *= u8g2->tile_buf_height;
     4e6:	44 a1       	ldd	r20, Z+36	; 0x24
     4e8:	94 9f       	mul	r25, r20
     4ea:	a0 01       	movw	r20, r0
     4ec:	11 24       	eor	r1, r1
  cnt *= 8;
     4ee:	44 0f       	add	r20, r20
     4f0:	55 1f       	adc	r21, r21
     4f2:	44 0f       	add	r20, r20
     4f4:	55 1f       	adc	r21, r21
     4f6:	44 0f       	add	r20, r20
     4f8:	55 1f       	adc	r21, r21
  memset(u8g2->tile_buf_ptr, 0, cnt);
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	82 a1       	ldd	r24, Z+34	; 0x22
     500:	93 a1       	ldd	r25, Z+35	; 0x23
     502:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <memset>
     506:	08 95       	ret

00000508 <u8g2_SendBuffer>:
  } while( src_row < src_max && dest_row < dest_max );
}

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	ec 01       	movw	r28, r24
  u8g2_send_buffer(u8g2);
     50e:	0e 94 4a 02 	call	0x494	; 0x494 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
     512:	ce 01       	movw	r24, r28
     514:	0e 94 8f 0b 	call	0x171e	; 0x171e <u8x8_RefreshDisplay>
}
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	08 95       	ret

0000051e <u8g2_m_16_8_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
     51e:	28 e0       	ldi	r18, 0x08	; 8
     520:	fc 01       	movw	r30, r24
     522:	20 83       	st	Z, r18
  return buf;
  #endif
}
     524:	8a e7       	ldi	r24, 0x7A	; 122
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	08 95       	ret

0000052a <u8g2_Setup_st7565_zolen_128x64_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_64128n, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_st7565_zolen_128x64_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
     52a:	cf 92       	push	r12
     52c:	df 92       	push	r13
     52e:	ef 92       	push	r14
     530:	ff 92       	push	r15
     532:	0f 93       	push	r16
     534:	1f 93       	push	r17
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	1f 92       	push	r1
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
     540:	7c 01       	movw	r14, r24
     542:	6b 01       	movw	r12, r22
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7565_zolen_128x64, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
     544:	89 01       	movw	r16, r18
     546:	9a 01       	movw	r18, r20
     548:	45 eb       	ldi	r20, 0xB5	; 181
     54a:	5a e0       	ldi	r21, 0x0A	; 10
     54c:	6d e0       	ldi	r22, 0x0D	; 13
     54e:	7c e0       	ldi	r23, 0x0C	; 12
     550:	0e 94 75 0c 	call	0x18ea	; 0x18ea <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	0e 94 8f 02 	call	0x51e	; 0x51e <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
     55c:	86 01       	movw	r16, r12
     55e:	2a ee       	ldi	r18, 0xEA	; 234
     560:	37 e0       	ldi	r19, 0x07	; 7
     562:	49 81       	ldd	r20, Y+1	; 0x01
     564:	bc 01       	movw	r22, r24
     566:	c7 01       	movw	r24, r14
     568:	0e 94 2d 09 	call	0x125a	; 0x125a <u8g2_SetupBuffer>
}
     56c:	0f 90       	pop	r0
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	1f 91       	pop	r17
     574:	0f 91       	pop	r16
     576:	ff 90       	pop	r15
     578:	ef 90       	pop	r14
     57a:	df 90       	pop	r13
     57c:	cf 90       	pop	r12
     57e:	08 95       	ret

00000580 <u8g2_font_get_byte>:
  return tmp;
}

void u8g2_SetFontPosCenter(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_center;
     580:	86 0f       	add	r24, r22
     582:	91 1d       	adc	r25, r1
     584:	fc 01       	movw	r30, r24
     586:	84 91       	lpm	r24, Z
     588:	08 95       	ret

0000058a <u8g2_font_get_word>:
     58a:	fc 01       	movw	r30, r24
     58c:	e6 0f       	add	r30, r22
     58e:	f1 1d       	adc	r31, r1
     590:	84 91       	lpm	r24, Z
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	31 96       	adiw	r30, 0x01	; 1
     596:	98 2f       	mov	r25, r24
     598:	88 27       	eor	r24, r24
     59a:	e4 91       	lpm	r30, Z
     59c:	8e 0f       	add	r24, r30
     59e:	91 1d       	adc	r25, r1
     5a0:	08 95       	ret

000005a2 <u8g2_font_calc_vref_font>:
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	08 95       	ret

000005a8 <u8g2_read_font_info>:
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	ec 01       	movw	r28, r24
     5b2:	8b 01       	movw	r16, r22
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	c8 01       	movw	r24, r16
     5b8:	0e 94 c0 02 	call	0x580	; 0x580 <u8g2_font_get_byte>
     5bc:	88 83       	st	Y, r24
     5be:	61 e0       	ldi	r22, 0x01	; 1
     5c0:	c8 01       	movw	r24, r16
     5c2:	0e 94 c0 02 	call	0x580	; 0x580 <u8g2_font_get_byte>
     5c6:	89 83       	std	Y+1, r24	; 0x01
     5c8:	62 e0       	ldi	r22, 0x02	; 2
     5ca:	c8 01       	movw	r24, r16
     5cc:	0e 94 c0 02 	call	0x580	; 0x580 <u8g2_font_get_byte>
     5d0:	8a 83       	std	Y+2, r24	; 0x02
     5d2:	63 e0       	ldi	r22, 0x03	; 3
     5d4:	c8 01       	movw	r24, r16
     5d6:	0e 94 c0 02 	call	0x580	; 0x580 <u8g2_font_get_byte>
     5da:	8b 83       	std	Y+3, r24	; 0x03
     5dc:	64 e0       	ldi	r22, 0x04	; 4
     5de:	c8 01       	movw	r24, r16
     5e0:	0e 94 c0 02 	call	0x580	; 0x580 <u8g2_font_get_byte>
     5e4:	8c 83       	std	Y+4, r24	; 0x04
     5e6:	65 e0       	ldi	r22, 0x05	; 5
     5e8:	c8 01       	movw	r24, r16
     5ea:	0e 94 c0 02 	call	0x580	; 0x580 <u8g2_font_get_byte>
     5ee:	8d 83       	std	Y+5, r24	; 0x05
     5f0:	66 e0       	ldi	r22, 0x06	; 6
     5f2:	c8 01       	movw	r24, r16
     5f4:	0e 94 c0 02 	call	0x580	; 0x580 <u8g2_font_get_byte>
     5f8:	8e 83       	std	Y+6, r24	; 0x06
     5fa:	67 e0       	ldi	r22, 0x07	; 7
     5fc:	c8 01       	movw	r24, r16
     5fe:	0e 94 c0 02 	call	0x580	; 0x580 <u8g2_font_get_byte>
     602:	8f 83       	std	Y+7, r24	; 0x07
     604:	68 e0       	ldi	r22, 0x08	; 8
     606:	c8 01       	movw	r24, r16
     608:	0e 94 c0 02 	call	0x580	; 0x580 <u8g2_font_get_byte>
     60c:	88 87       	std	Y+8, r24	; 0x08
     60e:	69 e0       	ldi	r22, 0x09	; 9
     610:	c8 01       	movw	r24, r16
     612:	0e 94 c0 02 	call	0x580	; 0x580 <u8g2_font_get_byte>
     616:	89 87       	std	Y+9, r24	; 0x09
     618:	6a e0       	ldi	r22, 0x0A	; 10
     61a:	c8 01       	movw	r24, r16
     61c:	0e 94 c0 02 	call	0x580	; 0x580 <u8g2_font_get_byte>
     620:	8a 87       	std	Y+10, r24	; 0x0a
     622:	6b e0       	ldi	r22, 0x0B	; 11
     624:	c8 01       	movw	r24, r16
     626:	0e 94 c0 02 	call	0x580	; 0x580 <u8g2_font_get_byte>
     62a:	8b 87       	std	Y+11, r24	; 0x0b
     62c:	6c e0       	ldi	r22, 0x0C	; 12
     62e:	c8 01       	movw	r24, r16
     630:	0e 94 c0 02 	call	0x580	; 0x580 <u8g2_font_get_byte>
     634:	8c 87       	std	Y+12, r24	; 0x0c
     636:	6d e0       	ldi	r22, 0x0D	; 13
     638:	c8 01       	movw	r24, r16
     63a:	0e 94 c0 02 	call	0x580	; 0x580 <u8g2_font_get_byte>
     63e:	8d 87       	std	Y+13, r24	; 0x0d
     640:	6e e0       	ldi	r22, 0x0E	; 14
     642:	c8 01       	movw	r24, r16
     644:	0e 94 c0 02 	call	0x580	; 0x580 <u8g2_font_get_byte>
     648:	8e 87       	std	Y+14, r24	; 0x0e
     64a:	6f e0       	ldi	r22, 0x0F	; 15
     64c:	c8 01       	movw	r24, r16
     64e:	0e 94 c0 02 	call	0x580	; 0x580 <u8g2_font_get_byte>
     652:	8f 87       	std	Y+15, r24	; 0x0f
     654:	60 e1       	ldi	r22, 0x10	; 16
     656:	c8 01       	movw	r24, r16
     658:	0e 94 c0 02 	call	0x580	; 0x580 <u8g2_font_get_byte>
     65c:	88 8b       	std	Y+16, r24	; 0x10
     65e:	61 e1       	ldi	r22, 0x11	; 17
     660:	c8 01       	movw	r24, r16
     662:	0e 94 c5 02 	call	0x58a	; 0x58a <u8g2_font_get_word>
     666:	9a 8b       	std	Y+18, r25	; 0x12
     668:	89 8b       	std	Y+17, r24	; 0x11
     66a:	63 e1       	ldi	r22, 0x13	; 19
     66c:	c8 01       	movw	r24, r16
     66e:	0e 94 c5 02 	call	0x58a	; 0x58a <u8g2_font_get_word>
     672:	9c 8b       	std	Y+20, r25	; 0x14
     674:	8b 8b       	std	Y+19, r24	; 0x13
     676:	65 e1       	ldi	r22, 0x15	; 21
     678:	c8 01       	movw	r24, r16
     67a:	0e 94 c5 02 	call	0x58a	; 0x58a <u8g2_font_get_word>
     67e:	9e 8b       	std	Y+22, r25	; 0x16
     680:	8d 8b       	std	Y+21, r24	; 0x15
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	08 95       	ret

0000068c <u8g2_font_decode_get_unsigned_bits>:
     68c:	dc 01       	movw	r26, r24
     68e:	1a 96       	adiw	r26, 0x0a	; 10
     690:	4c 91       	ld	r20, X
     692:	1a 97       	sbiw	r26, 0x0a	; 10
     694:	ed 91       	ld	r30, X+
     696:	fc 91       	ld	r31, X
     698:	11 97       	sbiw	r26, 0x01	; 1
     69a:	24 91       	lpm	r18, Z
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	04 2e       	mov	r0, r20
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <u8g2_font_decode_get_unsigned_bits+0x1a>
     6a2:	35 95       	asr	r19
     6a4:	27 95       	ror	r18
     6a6:	0a 94       	dec	r0
     6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <u8g2_font_decode_get_unsigned_bits+0x16>
     6aa:	82 2f       	mov	r24, r18
     6ac:	94 2f       	mov	r25, r20
     6ae:	96 0f       	add	r25, r22
     6b0:	98 30       	cpi	r25, 0x08	; 8
     6b2:	80 f0       	brcs	.+32     	; 0x6d4 <u8g2_font_decode_get_unsigned_bits+0x48>
     6b4:	88 e0       	ldi	r24, 0x08	; 8
     6b6:	84 1b       	sub	r24, r20
     6b8:	31 96       	adiw	r30, 0x01	; 1
     6ba:	11 96       	adiw	r26, 0x01	; 1
     6bc:	fc 93       	st	X, r31
     6be:	ee 93       	st	-X, r30
     6c0:	e4 91       	lpm	r30, Z
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <u8g2_font_decode_get_unsigned_bits+0x3e>
     6c6:	ee 0f       	add	r30, r30
     6c8:	ff 1f       	adc	r31, r31
     6ca:	8a 95       	dec	r24
     6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <u8g2_font_decode_get_unsigned_bits+0x3a>
     6ce:	8e 2f       	mov	r24, r30
     6d0:	82 2b       	or	r24, r18
     6d2:	98 50       	subi	r25, 0x08	; 8
     6d4:	21 e0       	ldi	r18, 0x01	; 1
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	02 c0       	rjmp	.+4      	; 0x6de <u8g2_font_decode_get_unsigned_bits+0x52>
     6da:	22 0f       	add	r18, r18
     6dc:	33 1f       	adc	r19, r19
     6de:	6a 95       	dec	r22
     6e0:	e2 f7       	brpl	.-8      	; 0x6da <u8g2_font_decode_get_unsigned_bits+0x4e>
     6e2:	21 50       	subi	r18, 0x01	; 1
     6e4:	1a 96       	adiw	r26, 0x0a	; 10
     6e6:	9c 93       	st	X, r25
     6e8:	82 23       	and	r24, r18
     6ea:	08 95       	ret

000006ec <u8g2_font_setup_decode>:
     6ec:	0f 93       	push	r16
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	ec 01       	movw	r28, r24
     6f6:	8c 01       	movw	r16, r24
     6f8:	08 5b       	subi	r16, 0xB8	; 184
     6fa:	1f 4f       	sbci	r17, 0xFF	; 255
     6fc:	f8 01       	movw	r30, r16
     6fe:	71 83       	std	Z+1, r23	; 0x01
     700:	60 83       	st	Z, r22
     702:	12 86       	std	Z+10, r1	; 0x0a
     704:	73 96       	adiw	r30, 0x13	; 19
     706:	60 81       	ld	r22, Z
     708:	c8 01       	movw	r24, r16
     70a:	0e 94 46 03 	call	0x68c	; 0x68c <u8g2_font_decode_get_unsigned_bits>
     70e:	f8 01       	movw	r30, r16
     710:	80 87       	std	Z+8, r24	; 0x08
     712:	74 96       	adiw	r30, 0x14	; 20
     714:	60 81       	ld	r22, Z
     716:	c8 01       	movw	r24, r16
     718:	0e 94 46 03 	call	0x68c	; 0x68c <u8g2_font_decode_get_unsigned_bits>
     71c:	f8 01       	movw	r30, r16
     71e:	81 87       	std	Z+9, r24	; 0x09
     720:	bc 96       	adiw	r30, 0x2c	; 44
     722:	80 81       	ld	r24, Z
     724:	f8 01       	movw	r30, r16
     726:	84 87       	std	Z+12, r24	; 0x0c
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	81 11       	cpse	r24, r1
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	c8 5b       	subi	r28, 0xB8	; 184
     730:	df 4f       	sbci	r29, 0xFF	; 255
     732:	9d 87       	std	Y+13, r25	; 0x0d
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	1f 91       	pop	r17
     73a:	0f 91       	pop	r16
     73c:	08 95       	ret

0000073e <u8g2_font_decode_get_signed_bits>:
     73e:	cf 93       	push	r28
     740:	c6 2f       	mov	r28, r22
     742:	0e 94 46 03 	call	0x68c	; 0x68c <u8g2_font_decode_get_unsigned_bits>
     746:	c1 50       	subi	r28, 0x01	; 1
     748:	21 e0       	ldi	r18, 0x01	; 1
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	02 c0       	rjmp	.+4      	; 0x752 <u8g2_font_decode_get_signed_bits+0x14>
     74e:	22 0f       	add	r18, r18
     750:	33 1f       	adc	r19, r19
     752:	ca 95       	dec	r28
     754:	e2 f7       	brpl	.-8      	; 0x74e <u8g2_font_decode_get_signed_bits+0x10>
     756:	82 1b       	sub	r24, r18
     758:	cf 91       	pop	r28
     75a:	08 95       	ret

0000075c <u8g2_add_vector_y>:
     75c:	21 30       	cpi	r18, 0x01	; 1
     75e:	49 f0       	breq	.+18     	; 0x772 <u8g2_add_vector_y+0x16>
     760:	18 f0       	brcs	.+6      	; 0x768 <u8g2_add_vector_y+0xc>
     762:	22 30       	cpi	r18, 0x02	; 2
     764:	59 f0       	breq	.+22     	; 0x77c <u8g2_add_vector_y+0x20>
     766:	0f c0       	rjmp	.+30     	; 0x786 <u8g2_add_vector_y+0x2a>
     768:	84 0f       	add	r24, r20
     76a:	91 1d       	adc	r25, r1
     76c:	47 fd       	sbrc	r20, 7
     76e:	9a 95       	dec	r25
     770:	08 95       	ret
     772:	86 0f       	add	r24, r22
     774:	91 1d       	adc	r25, r1
     776:	67 fd       	sbrc	r22, 7
     778:	9a 95       	dec	r25
     77a:	08 95       	ret
     77c:	84 1b       	sub	r24, r20
     77e:	91 09       	sbc	r25, r1
     780:	47 fd       	sbrc	r20, 7
     782:	93 95       	inc	r25
     784:	08 95       	ret
     786:	86 1b       	sub	r24, r22
     788:	91 09       	sbc	r25, r1
     78a:	67 fd       	sbrc	r22, 7
     78c:	93 95       	inc	r25
     78e:	08 95       	ret

00000790 <u8g2_add_vector_x>:
     790:	21 30       	cpi	r18, 0x01	; 1
     792:	49 f0       	breq	.+18     	; 0x7a6 <u8g2_add_vector_x+0x16>
     794:	18 f0       	brcs	.+6      	; 0x79c <u8g2_add_vector_x+0xc>
     796:	22 30       	cpi	r18, 0x02	; 2
     798:	59 f0       	breq	.+22     	; 0x7b0 <u8g2_add_vector_x+0x20>
     79a:	0f c0       	rjmp	.+30     	; 0x7ba <u8g2_add_vector_x+0x2a>
     79c:	86 0f       	add	r24, r22
     79e:	91 1d       	adc	r25, r1
     7a0:	67 fd       	sbrc	r22, 7
     7a2:	9a 95       	dec	r25
     7a4:	08 95       	ret
     7a6:	84 1b       	sub	r24, r20
     7a8:	91 09       	sbc	r25, r1
     7aa:	47 fd       	sbrc	r20, 7
     7ac:	93 95       	inc	r25
     7ae:	08 95       	ret
     7b0:	86 1b       	sub	r24, r22
     7b2:	91 09       	sbc	r25, r1
     7b4:	67 fd       	sbrc	r22, 7
     7b6:	93 95       	inc	r25
     7b8:	08 95       	ret
     7ba:	84 0f       	add	r24, r20
     7bc:	91 1d       	adc	r25, r1
     7be:	47 fd       	sbrc	r20, 7
     7c0:	9a 95       	dec	r25
     7c2:	08 95       	ret

000007c4 <u8g2_font_decode_len>:
     7c4:	6f 92       	push	r6
     7c6:	7f 92       	push	r7
     7c8:	8f 92       	push	r8
     7ca:	9f 92       	push	r9
     7cc:	af 92       	push	r10
     7ce:	bf 92       	push	r11
     7d0:	cf 92       	push	r12
     7d2:	df 92       	push	r13
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	7c 01       	movw	r14, r24
     7e2:	16 2f       	mov	r17, r22
     7e4:	74 2e       	mov	r7, r20
     7e6:	fc 01       	movw	r30, r24
     7e8:	e8 5b       	subi	r30, 0xB8	; 184
     7ea:	ff 4f       	sbci	r31, 0xFF	; 255
     7ec:	96 80       	ldd	r9, Z+6	; 0x06
     7ee:	d7 81       	ldd	r29, Z+7	; 0x07
     7f0:	f7 01       	movw	r30, r14
     7f2:	e8 5b       	subi	r30, 0xB8	; 184
     7f4:	ff 4f       	sbci	r31, 0xFF	; 255
     7f6:	c0 85       	ldd	r28, Z+8	; 0x08
     7f8:	c9 19       	sub	r28, r9
     7fa:	1c 17       	cp	r17, r28
     7fc:	10 f0       	brcs	.+4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7fe:	6c 2e       	mov	r6, r28
     800:	01 c0       	rjmp	.+2      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     802:	61 2e       	mov	r6, r17
     804:	f7 01       	movw	r30, r14
     806:	e8 5b       	subi	r30, 0xB8	; 184
     808:	ff 4f       	sbci	r31, 0xFF	; 255
     80a:	c4 80       	ldd	r12, Z+4	; 0x04
     80c:	d5 80       	ldd	r13, Z+5	; 0x05
     80e:	06 85       	ldd	r16, Z+14	; 0x0e
     810:	8d 2e       	mov	r8, r29
     812:	20 2f       	mov	r18, r16
     814:	4d 2f       	mov	r20, r29
     816:	69 2d       	mov	r22, r9
     818:	82 81       	ldd	r24, Z+2	; 0x02
     81a:	93 81       	ldd	r25, Z+3	; 0x03
     81c:	0e 94 c8 03 	call	0x790	; 0x790 <u8g2_add_vector_x>
     820:	5c 01       	movw	r10, r24
     822:	20 2f       	mov	r18, r16
     824:	4d 2f       	mov	r20, r29
     826:	69 2d       	mov	r22, r9
     828:	c6 01       	movw	r24, r12
     82a:	0e 94 ae 03 	call	0x75c	; 0x75c <u8g2_add_vector_y>
     82e:	77 20       	and	r7, r7
     830:	71 f0       	breq	.+28     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     832:	f7 01       	movw	r30, r14
     834:	e8 5b       	subi	r30, 0xB8	; 184
     836:	ff 4f       	sbci	r31, 0xFF	; 255
     838:	24 85       	ldd	r18, Z+12	; 0x0c
     83a:	bc 96       	adiw	r30, 0x2c	; 44
     83c:	20 83       	st	Z, r18
     83e:	26 2d       	mov	r18, r6
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	ac 01       	movw	r20, r24
     844:	b5 01       	movw	r22, r10
     846:	c7 01       	movw	r24, r14
     848:	0e 94 11 07 	call	0xe22	; 0xe22 <u8g2_DrawHVLine>
     84c:	10 c0       	rjmp	.+32     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
     84e:	f7 01       	movw	r30, r14
     850:	e8 5b       	subi	r30, 0xB8	; 184
     852:	ff 4f       	sbci	r31, 0xFF	; 255
     854:	23 85       	ldd	r18, Z+11	; 0x0b
     856:	21 11       	cpse	r18, r1
     858:	0a c0       	rjmp	.+20     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
     85a:	25 85       	ldd	r18, Z+13	; 0x0d
     85c:	bc 96       	adiw	r30, 0x2c	; 44
     85e:	20 83       	st	Z, r18
     860:	26 2d       	mov	r18, r6
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	ac 01       	movw	r20, r24
     866:	b5 01       	movw	r22, r10
     868:	c7 01       	movw	r24, r14
     86a:	0e 94 11 07 	call	0xe22	; 0xe22 <u8g2_DrawHVLine>
     86e:	1c 17       	cp	r17, r28
     870:	20 f0       	brcs	.+8      	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
     872:	1c 1b       	sub	r17, r28
     874:	df 5f       	subi	r29, 0xFF	; 255
     876:	91 2c       	mov	r9, r1
     878:	bb cf       	rjmp	.-138    	; 0x7f0 <u8g2_font_decode_len+0x2c>
     87a:	61 2f       	mov	r22, r17
     87c:	69 0d       	add	r22, r9
     87e:	f7 01       	movw	r30, r14
     880:	e8 5b       	subi	r30, 0xB8	; 184
     882:	ff 4f       	sbci	r31, 0xFF	; 255
     884:	66 83       	std	Z+6, r22	; 0x06
     886:	87 82       	std	Z+7, r8	; 0x07
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	1f 91       	pop	r17
     88e:	0f 91       	pop	r16
     890:	ff 90       	pop	r15
     892:	ef 90       	pop	r14
     894:	df 90       	pop	r13
     896:	cf 90       	pop	r12
     898:	bf 90       	pop	r11
     89a:	af 90       	pop	r10
     89c:	9f 90       	pop	r9
     89e:	8f 90       	pop	r8
     8a0:	7f 90       	pop	r7
     8a2:	6f 90       	pop	r6
     8a4:	08 95       	ret

000008a6 <u8g2_font_decode_glyph>:
     8a6:	6f 92       	push	r6
     8a8:	7f 92       	push	r7
     8aa:	8f 92       	push	r8
     8ac:	9f 92       	push	r9
     8ae:	af 92       	push	r10
     8b0:	bf 92       	push	r11
     8b2:	cf 92       	push	r12
     8b4:	df 92       	push	r13
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	ec 01       	movw	r28, r24
     8c4:	7c 01       	movw	r14, r24
     8c6:	88 e4       	ldi	r24, 0x48	; 72
     8c8:	e8 0e       	add	r14, r24
     8ca:	f1 1c       	adc	r15, r1
     8cc:	ce 01       	movw	r24, r28
     8ce:	0e 94 76 03 	call	0x6ec	; 0x6ec <u8g2_font_setup_decode>
     8d2:	fe 01       	movw	r30, r28
     8d4:	ef 5a       	subi	r30, 0xAF	; 175
     8d6:	ff 4f       	sbci	r31, 0xFF	; 255
     8d8:	c0 80       	ld	r12, Z
     8da:	3c 96       	adiw	r30, 0x0c	; 12
     8dc:	60 81       	ld	r22, Z
     8de:	c7 01       	movw	r24, r14
     8e0:	0e 94 9f 03 	call	0x73e	; 0x73e <u8g2_font_decode_get_signed_bits>
     8e4:	78 2e       	mov	r7, r24
     8e6:	fe 01       	movw	r30, r28
     8e8:	e2 5a       	subi	r30, 0xA2	; 162
     8ea:	ff 4f       	sbci	r31, 0xFF	; 255
     8ec:	60 81       	ld	r22, Z
     8ee:	c7 01       	movw	r24, r14
     8f0:	0e 94 9f 03 	call	0x73e	; 0x73e <u8g2_font_decode_get_signed_bits>
     8f4:	18 2f       	mov	r17, r24
     8f6:	fe 01       	movw	r30, r28
     8f8:	e1 5a       	subi	r30, 0xA1	; 161
     8fa:	ff 4f       	sbci	r31, 0xFF	; 255
     8fc:	60 81       	ld	r22, Z
     8fe:	c7 01       	movw	r24, r14
     900:	0e 94 9f 03 	call	0x73e	; 0x73e <u8g2_font_decode_get_signed_bits>
     904:	d8 2e       	mov	r13, r24
     906:	f7 01       	movw	r30, r14
     908:	60 84       	ldd	r6, Z+8	; 0x08
     90a:	16 14       	cp	r1, r6
     90c:	0c f0       	brlt	.+2      	; 0x910 <__stack+0x11>
     90e:	9b c0       	rjmp	.+310    	; 0xa46 <__stack+0x147>
     910:	06 85       	ldd	r16, Z+14	; 0x0e
     912:	1c 0d       	add	r17, r12
     914:	11 95       	neg	r17
     916:	20 2f       	mov	r18, r16
     918:	41 2f       	mov	r20, r17
     91a:	67 2d       	mov	r22, r7
     91c:	82 81       	ldd	r24, Z+2	; 0x02
     91e:	93 81       	ldd	r25, Z+3	; 0x03
     920:	0e 94 c8 03 	call	0x790	; 0x790 <u8g2_add_vector_x>
     924:	5c 01       	movw	r10, r24
     926:	f7 01       	movw	r30, r14
     928:	93 83       	std	Z+3, r25	; 0x03
     92a:	82 83       	std	Z+2, r24	; 0x02
     92c:	20 2f       	mov	r18, r16
     92e:	41 2f       	mov	r20, r17
     930:	67 2d       	mov	r22, r7
     932:	84 81       	ldd	r24, Z+4	; 0x04
     934:	95 81       	ldd	r25, Z+5	; 0x05
     936:	0e 94 ae 03 	call	0x75c	; 0x75c <u8g2_add_vector_y>
     93a:	f7 01       	movw	r30, r14
     93c:	95 83       	std	Z+5, r25	; 0x05
     93e:	84 83       	std	Z+4, r24	; 0x04
     940:	01 30       	cpi	r16, 0x01	; 1
     942:	89 f0       	breq	.+34     	; 0x966 <__stack+0x67>
     944:	28 f0       	brcs	.+10     	; 0x950 <__stack+0x51>
     946:	02 30       	cpi	r16, 0x02	; 2
     948:	01 f1       	breq	.+64     	; 0x98a <__stack+0x8b>
     94a:	03 30       	cpi	r16, 0x03	; 3
     94c:	a1 f1       	breq	.+104    	; 0x9b6 <__stack+0xb7>
     94e:	43 c0       	rjmp	.+134    	; 0x9d6 <__stack+0xd7>
     950:	95 01       	movw	r18, r10
     952:	26 0d       	add	r18, r6
     954:	31 1d       	adc	r19, r1
     956:	67 fc       	sbrc	r6, 7
     958:	3a 95       	dec	r19
     95a:	8c 01       	movw	r16, r24
     95c:	0c 0d       	add	r16, r12
     95e:	11 1d       	adc	r17, r1
     960:	c7 fc       	sbrc	r12, 7
     962:	1a 95       	dec	r17
     964:	3a c0       	rjmp	.+116    	; 0x9da <__stack+0xdb>
     966:	a5 01       	movw	r20, r10
     968:	4c 19       	sub	r20, r12
     96a:	51 09       	sbc	r21, r1
     96c:	c7 fc       	sbrc	r12, 7
     96e:	53 95       	inc	r21
     970:	95 01       	movw	r18, r10
     972:	2f 5f       	subi	r18, 0xFF	; 255
     974:	3f 4f       	sbci	r19, 0xFF	; 255
     976:	8c 01       	movw	r16, r24
     978:	06 0d       	add	r16, r6
     97a:	11 1d       	adc	r17, r1
     97c:	67 fc       	sbrc	r6, 7
     97e:	1a 95       	dec	r17
     980:	ba 01       	movw	r22, r20
     982:	6f 5f       	subi	r22, 0xFF	; 255
     984:	7f 4f       	sbci	r23, 0xFF	; 255
     986:	5b 01       	movw	r10, r22
     988:	28 c0       	rjmp	.+80     	; 0x9da <__stack+0xdb>
     98a:	a5 01       	movw	r20, r10
     98c:	46 19       	sub	r20, r6
     98e:	51 09       	sbc	r21, r1
     990:	67 fc       	sbrc	r6, 7
     992:	53 95       	inc	r21
     994:	95 01       	movw	r18, r10
     996:	2f 5f       	subi	r18, 0xFF	; 255
     998:	3f 4f       	sbci	r19, 0xFF	; 255
     99a:	bc 01       	movw	r22, r24
     99c:	6c 19       	sub	r22, r12
     99e:	71 09       	sbc	r23, r1
     9a0:	c7 fc       	sbrc	r12, 7
     9a2:	73 95       	inc	r23
     9a4:	8c 01       	movw	r16, r24
     9a6:	0f 5f       	subi	r16, 0xFF	; 255
     9a8:	1f 4f       	sbci	r17, 0xFF	; 255
     9aa:	cb 01       	movw	r24, r22
     9ac:	01 96       	adiw	r24, 0x01	; 1
     9ae:	fa 01       	movw	r30, r20
     9b0:	31 96       	adiw	r30, 0x01	; 1
     9b2:	5f 01       	movw	r10, r30
     9b4:	12 c0       	rjmp	.+36     	; 0x9da <__stack+0xdb>
     9b6:	95 01       	movw	r18, r10
     9b8:	2c 0d       	add	r18, r12
     9ba:	31 1d       	adc	r19, r1
     9bc:	c7 fc       	sbrc	r12, 7
     9be:	3a 95       	dec	r19
     9c0:	ac 01       	movw	r20, r24
     9c2:	46 19       	sub	r20, r6
     9c4:	51 09       	sbc	r21, r1
     9c6:	67 fc       	sbrc	r6, 7
     9c8:	53 95       	inc	r21
     9ca:	8c 01       	movw	r16, r24
     9cc:	0f 5f       	subi	r16, 0xFF	; 255
     9ce:	1f 4f       	sbci	r17, 0xFF	; 255
     9d0:	ca 01       	movw	r24, r20
     9d2:	01 96       	adiw	r24, 0x01	; 1
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <__stack+0xdb>
     9d6:	8c 01       	movw	r16, r24
     9d8:	95 01       	movw	r18, r10
     9da:	ac 01       	movw	r20, r24
     9dc:	b5 01       	movw	r22, r10
     9de:	ce 01       	movw	r24, r28
     9e0:	0e 94 c5 07 	call	0xf8a	; 0xf8a <u8g2_IsIntersection>
     9e4:	88 23       	and	r24, r24
     9e6:	79 f1       	breq	.+94     	; 0xa46 <__stack+0x147>
     9e8:	fe 01       	movw	r30, r28
     9ea:	e8 5b       	subi	r30, 0xB8	; 184
     9ec:	ff 4f       	sbci	r31, 0xFF	; 255
     9ee:	16 82       	std	Z+6, r1	; 0x06
     9f0:	17 82       	std	Z+7, r1	; 0x07
     9f2:	fe 01       	movw	r30, r28
     9f4:	e7 5a       	subi	r30, 0xA7	; 167
     9f6:	ff 4f       	sbci	r31, 0xFF	; 255
     9f8:	60 81       	ld	r22, Z
     9fa:	c7 01       	movw	r24, r14
     9fc:	0e 94 46 03 	call	0x68c	; 0x68c <u8g2_font_decode_get_unsigned_bits>
     a00:	08 2f       	mov	r16, r24
     a02:	fe 01       	movw	r30, r28
     a04:	e6 5a       	subi	r30, 0xA6	; 166
     a06:	ff 4f       	sbci	r31, 0xFF	; 255
     a08:	60 81       	ld	r22, Z
     a0a:	c7 01       	movw	r24, r14
     a0c:	0e 94 46 03 	call	0x68c	; 0x68c <u8g2_font_decode_get_unsigned_bits>
     a10:	18 2f       	mov	r17, r24
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	60 2f       	mov	r22, r16
     a16:	ce 01       	movw	r24, r28
     a18:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <u8g2_font_decode_len>
     a1c:	41 e0       	ldi	r20, 0x01	; 1
     a1e:	61 2f       	mov	r22, r17
     a20:	ce 01       	movw	r24, r28
     a22:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <u8g2_font_decode_len>
     a26:	61 e0       	ldi	r22, 0x01	; 1
     a28:	c7 01       	movw	r24, r14
     a2a:	0e 94 46 03 	call	0x68c	; 0x68c <u8g2_font_decode_get_unsigned_bits>
     a2e:	81 11       	cpse	r24, r1
     a30:	f0 cf       	rjmp	.-32     	; 0xa12 <__stack+0x113>
     a32:	fe 01       	movw	r30, r28
     a34:	e8 5b       	subi	r30, 0xB8	; 184
     a36:	ff 4f       	sbci	r31, 0xFF	; 255
     a38:	87 81       	ldd	r24, Z+7	; 0x07
     a3a:	8c 15       	cp	r24, r12
     a3c:	d4 f2       	brlt	.-76     	; 0x9f2 <__stack+0xf3>
     a3e:	84 85       	ldd	r24, Z+12	; 0x0c
     a40:	cc 58       	subi	r28, 0x8C	; 140
     a42:	df 4f       	sbci	r29, 0xFF	; 255
     a44:	88 83       	st	Y, r24
     a46:	8d 2d       	mov	r24, r13
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	ff 90       	pop	r15
     a52:	ef 90       	pop	r14
     a54:	df 90       	pop	r13
     a56:	cf 90       	pop	r12
     a58:	bf 90       	pop	r11
     a5a:	af 90       	pop	r10
     a5c:	9f 90       	pop	r9
     a5e:	8f 90       	pop	r8
     a60:	7f 90       	pop	r7
     a62:	6f 90       	pop	r6
     a64:	08 95       	ret

00000a66 <u8g2_font_get_glyph_data>:
     a66:	ef 92       	push	r14
     a68:	ff 92       	push	r15
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	fc 01       	movw	r30, r24
     a74:	ec 5b       	subi	r30, 0xBC	; 188
     a76:	ff 4f       	sbci	r31, 0xFF	; 255
     a78:	c0 81       	ld	r28, Z
     a7a:	d1 81       	ldd	r29, Z+1	; 0x01
     a7c:	67 96       	adiw	r28, 0x17	; 23
     a7e:	6f 3f       	cpi	r22, 0xFF	; 255
     a80:	71 05       	cpc	r23, r1
     a82:	09 f0       	breq	.+2      	; 0xa86 <u8g2_font_get_glyph_data+0x20>
     a84:	38 f5       	brcc	.+78     	; 0xad4 <u8g2_font_get_glyph_data+0x6e>
     a86:	61 36       	cpi	r22, 0x61	; 97
     a88:	71 05       	cpc	r23, r1
     a8a:	30 f0       	brcs	.+12     	; 0xa98 <u8g2_font_get_glyph_data+0x32>
     a8c:	b6 96       	adiw	r30, 0x26	; 38
     a8e:	80 81       	ld	r24, Z
     a90:	91 81       	ldd	r25, Z+1	; 0x01
     a92:	c8 0f       	add	r28, r24
     a94:	d9 1f       	adc	r29, r25
     a96:	0a c0       	rjmp	.+20     	; 0xaac <u8g2_font_get_glyph_data+0x46>
     a98:	61 34       	cpi	r22, 0x41	; 65
     a9a:	71 05       	cpc	r23, r1
     a9c:	38 f0       	brcs	.+14     	; 0xaac <u8g2_font_get_glyph_data+0x46>
     a9e:	fc 01       	movw	r30, r24
     aa0:	e8 59       	subi	r30, 0x98	; 152
     aa2:	ff 4f       	sbci	r31, 0xFF	; 255
     aa4:	80 81       	ld	r24, Z
     aa6:	91 81       	ldd	r25, Z+1	; 0x01
     aa8:	c8 0f       	add	r28, r24
     aaa:	d9 1f       	adc	r29, r25
     aac:	ce 01       	movw	r24, r28
     aae:	01 96       	adiw	r24, 0x01	; 1
     ab0:	fc 01       	movw	r30, r24
     ab2:	24 91       	lpm	r18, Z
     ab4:	22 23       	and	r18, r18
     ab6:	09 f4       	brne	.+2      	; 0xaba <u8g2_font_get_glyph_data+0x54>
     ab8:	3c c0       	rjmp	.+120    	; 0xb32 <u8g2_font_get_glyph_data+0xcc>
     aba:	fe 01       	movw	r30, r28
     abc:	24 91       	lpm	r18, Z
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	62 17       	cp	r22, r18
     ac2:	73 07       	cpc	r23, r19
     ac4:	11 f4       	brne	.+4      	; 0xaca <u8g2_font_get_glyph_data+0x64>
     ac6:	01 96       	adiw	r24, 0x01	; 1
     ac8:	39 c0       	rjmp	.+114    	; 0xb3c <u8g2_font_get_glyph_data+0xd6>
     aca:	fc 01       	movw	r30, r24
     acc:	84 91       	lpm	r24, Z
     ace:	c8 0f       	add	r28, r24
     ad0:	d1 1d       	adc	r29, r1
     ad2:	ec cf       	rjmp	.-40     	; 0xaac <u8g2_font_get_glyph_data+0x46>
     ad4:	8b 01       	movw	r16, r22
     ad6:	fc 01       	movw	r30, r24
     ad8:	e4 59       	subi	r30, 0x94	; 148
     ada:	ff 4f       	sbci	r31, 0xFF	; 255
     adc:	80 81       	ld	r24, Z
     ade:	91 81       	ldd	r25, Z+1	; 0x01
     ae0:	c8 0f       	add	r28, r24
     ae2:	d9 1f       	adc	r29, r25
     ae4:	7e 01       	movw	r14, r28
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	c7 01       	movw	r24, r14
     aea:	0e 94 c5 02 	call	0x58a	; 0x58a <u8g2_font_get_word>
     aee:	c8 0f       	add	r28, r24
     af0:	d9 1f       	adc	r29, r25
     af2:	62 e0       	ldi	r22, 0x02	; 2
     af4:	c7 01       	movw	r24, r14
     af6:	0e 94 c5 02 	call	0x58a	; 0x58a <u8g2_font_get_word>
     afa:	f4 e0       	ldi	r31, 0x04	; 4
     afc:	ef 0e       	add	r14, r31
     afe:	f1 1c       	adc	r15, r1
     b00:	80 17       	cp	r24, r16
     b02:	91 07       	cpc	r25, r17
     b04:	80 f3       	brcs	.-32     	; 0xae6 <u8g2_font_get_glyph_data+0x80>
     b06:	fe 01       	movw	r30, r28
     b08:	84 91       	lpm	r24, Z
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	98 2f       	mov	r25, r24
     b0e:	88 27       	eor	r24, r24
     b10:	31 96       	adiw	r30, 0x01	; 1
     b12:	e4 91       	lpm	r30, Z
     b14:	8e 2b       	or	r24, r30
     b16:	00 97       	sbiw	r24, 0x00	; 0
     b18:	79 f0       	breq	.+30     	; 0xb38 <u8g2_font_get_glyph_data+0xd2>
     b1a:	08 17       	cp	r16, r24
     b1c:	19 07       	cpc	r17, r25
     b1e:	19 f4       	brne	.+6      	; 0xb26 <u8g2_font_get_glyph_data+0xc0>
     b20:	ce 01       	movw	r24, r28
     b22:	03 96       	adiw	r24, 0x03	; 3
     b24:	0b c0       	rjmp	.+22     	; 0xb3c <u8g2_font_get_glyph_data+0xd6>
     b26:	fe 01       	movw	r30, r28
     b28:	32 96       	adiw	r30, 0x02	; 2
     b2a:	e4 91       	lpm	r30, Z
     b2c:	ce 0f       	add	r28, r30
     b2e:	d1 1d       	adc	r29, r1
     b30:	ea cf       	rjmp	.-44     	; 0xb06 <u8g2_font_get_glyph_data+0xa0>
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	02 c0       	rjmp	.+4      	; 0xb3c <u8g2_font_get_glyph_data+0xd6>
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	ff 90       	pop	r15
     b46:	ef 90       	pop	r14
     b48:	08 95       	ret

00000b4a <u8g2_font_draw_glyph>:
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	ec 01       	movw	r28, r24
     b50:	fc 01       	movw	r30, r24
     b52:	e6 5b       	subi	r30, 0xB6	; 182
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	71 83       	std	Z+1, r23	; 0x01
     b58:	60 83       	st	Z, r22
     b5a:	32 96       	adiw	r30, 0x02	; 2
     b5c:	51 83       	std	Z+1, r21	; 0x01
     b5e:	40 83       	st	Z, r20
     b60:	b9 01       	movw	r22, r18
     b62:	0e 94 33 05 	call	0xa66	; 0xa66 <u8g2_font_get_glyph_data>
     b66:	00 97       	sbiw	r24, 0x00	; 0
     b68:	41 f0       	breq	.+16     	; 0xb7a <u8g2_font_draw_glyph+0x30>
     b6a:	bc 01       	movw	r22, r24
     b6c:	ce 01       	movw	r24, r28
     b6e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <u8g2_font_decode_glyph>
     b72:	08 2e       	mov	r0, r24
     b74:	00 0c       	add	r0, r0
     b76:	99 0b       	sbc	r25, r25
     b78:	02 c0       	rjmp	.+4      	; 0xb7e <u8g2_font_draw_glyph+0x34>
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	08 95       	ret

00000b84 <u8g2_DrawGlyph>:
     b84:	cf 92       	push	r12
     b86:	df 92       	push	r13
     b88:	ef 92       	push	r14
     b8a:	ff 92       	push	r15
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	ec 01       	movw	r28, r24
     b96:	8b 01       	movw	r16, r22
     b98:	7a 01       	movw	r14, r20
     b9a:	69 01       	movw	r12, r18
     b9c:	fc 01       	movw	r30, r24
     b9e:	ea 5a       	subi	r30, 0xAA	; 170
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	80 81       	ld	r24, Z
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	89 f0       	breq	.+34     	; 0xbca <u8g2_DrawGlyph+0x46>
     ba8:	28 f0       	brcs	.+10     	; 0xbb4 <u8g2_DrawGlyph+0x30>
     baa:	82 30       	cpi	r24, 0x02	; 2
     bac:	c9 f0       	breq	.+50     	; 0xbe0 <u8g2_DrawGlyph+0x5c>
     bae:	83 30       	cpi	r24, 0x03	; 3
     bb0:	11 f1       	breq	.+68     	; 0xbf6 <u8g2_DrawGlyph+0x72>
     bb2:	2b c0       	rjmp	.+86     	; 0xc0a <u8g2_DrawGlyph+0x86>
     bb4:	fe 01       	movw	r30, r28
     bb6:	ea 5b       	subi	r30, 0xBA	; 186
     bb8:	ff 4f       	sbci	r31, 0xFF	; 255
     bba:	01 90       	ld	r0, Z+
     bbc:	f0 81       	ld	r31, Z
     bbe:	e0 2d       	mov	r30, r0
     bc0:	ce 01       	movw	r24, r28
     bc2:	09 95       	icall
     bc4:	e8 0e       	add	r14, r24
     bc6:	f9 1e       	adc	r15, r25
     bc8:	20 c0       	rjmp	.+64     	; 0xc0a <u8g2_DrawGlyph+0x86>
     bca:	fe 01       	movw	r30, r28
     bcc:	ea 5b       	subi	r30, 0xBA	; 186
     bce:	ff 4f       	sbci	r31, 0xFF	; 255
     bd0:	01 90       	ld	r0, Z+
     bd2:	f0 81       	ld	r31, Z
     bd4:	e0 2d       	mov	r30, r0
     bd6:	ce 01       	movw	r24, r28
     bd8:	09 95       	icall
     bda:	08 1b       	sub	r16, r24
     bdc:	19 0b       	sbc	r17, r25
     bde:	15 c0       	rjmp	.+42     	; 0xc0a <u8g2_DrawGlyph+0x86>
     be0:	fe 01       	movw	r30, r28
     be2:	ea 5b       	subi	r30, 0xBA	; 186
     be4:	ff 4f       	sbci	r31, 0xFF	; 255
     be6:	01 90       	ld	r0, Z+
     be8:	f0 81       	ld	r31, Z
     bea:	e0 2d       	mov	r30, r0
     bec:	ce 01       	movw	r24, r28
     bee:	09 95       	icall
     bf0:	e8 1a       	sub	r14, r24
     bf2:	f9 0a       	sbc	r15, r25
     bf4:	0a c0       	rjmp	.+20     	; 0xc0a <u8g2_DrawGlyph+0x86>
     bf6:	fe 01       	movw	r30, r28
     bf8:	ea 5b       	subi	r30, 0xBA	; 186
     bfa:	ff 4f       	sbci	r31, 0xFF	; 255
     bfc:	01 90       	ld	r0, Z+
     bfe:	f0 81       	ld	r31, Z
     c00:	e0 2d       	mov	r30, r0
     c02:	ce 01       	movw	r24, r28
     c04:	09 95       	icall
     c06:	08 0f       	add	r16, r24
     c08:	19 1f       	adc	r17, r25
     c0a:	96 01       	movw	r18, r12
     c0c:	a7 01       	movw	r20, r14
     c0e:	b8 01       	movw	r22, r16
     c10:	ce 01       	movw	r24, r28
     c12:	0e 94 a5 05 	call	0xb4a	; 0xb4a <u8g2_font_draw_glyph>
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	ff 90       	pop	r15
     c20:	ef 90       	pop	r14
     c22:	df 90       	pop	r13
     c24:	cf 90       	pop	r12
     c26:	08 95       	ret

00000c28 <u8g2_draw_string>:
     c28:	af 92       	push	r10
     c2a:	bf 92       	push	r11
     c2c:	cf 92       	push	r12
     c2e:	df 92       	push	r13
     c30:	ef 92       	push	r14
     c32:	ff 92       	push	r15
     c34:	0f 93       	push	r16
     c36:	1f 93       	push	r17
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	ec 01       	movw	r28, r24
     c3e:	5b 01       	movw	r10, r22
     c40:	6a 01       	movw	r12, r20
     c42:	89 01       	movw	r16, r18
     c44:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <u8x8_utf8_init>
     c48:	e1 2c       	mov	r14, r1
     c4a:	f1 2c       	mov	r15, r1
     c4c:	ea 81       	ldd	r30, Y+2	; 0x02
     c4e:	fb 81       	ldd	r31, Y+3	; 0x03
     c50:	d8 01       	movw	r26, r16
     c52:	6c 91       	ld	r22, X
     c54:	ce 01       	movw	r24, r28
     c56:	09 95       	icall
     c58:	8f 3f       	cpi	r24, 0xFF	; 255
     c5a:	bf ef       	ldi	r27, 0xFF	; 255
     c5c:	9b 07       	cpc	r25, r27
     c5e:	39 f1       	breq	.+78     	; 0xcae <u8g2_draw_string+0x86>
     c60:	0f 5f       	subi	r16, 0xFF	; 255
     c62:	1f 4f       	sbci	r17, 0xFF	; 255
     c64:	8e 3f       	cpi	r24, 0xFE	; 254
     c66:	2f ef       	ldi	r18, 0xFF	; 255
     c68:	92 07       	cpc	r25, r18
     c6a:	81 f3       	breq	.-32     	; 0xc4c <u8g2_draw_string+0x24>
     c6c:	9c 01       	movw	r18, r24
     c6e:	a6 01       	movw	r20, r12
     c70:	b5 01       	movw	r22, r10
     c72:	ce 01       	movw	r24, r28
     c74:	0e 94 c2 05 	call	0xb84	; 0xb84 <u8g2_DrawGlyph>
     c78:	9c 01       	movw	r18, r24
     c7a:	fe 01       	movw	r30, r28
     c7c:	ea 5a       	subi	r30, 0xAA	; 170
     c7e:	ff 4f       	sbci	r31, 0xFF	; 255
     c80:	90 81       	ld	r25, Z
     c82:	91 30       	cpi	r25, 0x01	; 1
     c84:	49 f0       	breq	.+18     	; 0xc98 <u8g2_draw_string+0x70>
     c86:	28 f0       	brcs	.+10     	; 0xc92 <u8g2_draw_string+0x6a>
     c88:	92 30       	cpi	r25, 0x02	; 2
     c8a:	49 f0       	breq	.+18     	; 0xc9e <u8g2_draw_string+0x76>
     c8c:	93 30       	cpi	r25, 0x03	; 3
     c8e:	51 f0       	breq	.+20     	; 0xca4 <u8g2_draw_string+0x7c>
     c90:	0b c0       	rjmp	.+22     	; 0xca8 <u8g2_draw_string+0x80>
     c92:	a2 0e       	add	r10, r18
     c94:	b3 1e       	adc	r11, r19
     c96:	08 c0       	rjmp	.+16     	; 0xca8 <u8g2_draw_string+0x80>
     c98:	c2 0e       	add	r12, r18
     c9a:	d3 1e       	adc	r13, r19
     c9c:	05 c0       	rjmp	.+10     	; 0xca8 <u8g2_draw_string+0x80>
     c9e:	a2 1a       	sub	r10, r18
     ca0:	b3 0a       	sbc	r11, r19
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <u8g2_draw_string+0x80>
     ca4:	c2 1a       	sub	r12, r18
     ca6:	d3 0a       	sbc	r13, r19
     ca8:	e2 0e       	add	r14, r18
     caa:	f3 1e       	adc	r15, r19
     cac:	cf cf       	rjmp	.-98     	; 0xc4c <u8g2_draw_string+0x24>
     cae:	c7 01       	movw	r24, r14
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	ff 90       	pop	r15
     cba:	ef 90       	pop	r14
     cbc:	df 90       	pop	r13
     cbe:	cf 90       	pop	r12
     cc0:	bf 90       	pop	r11
     cc2:	af 90       	pop	r10
     cc4:	08 95       	ret

00000cc6 <u8g2_DrawStr>:
     cc6:	ed e5       	ldi	r30, 0x5D	; 93
     cc8:	f9 e0       	ldi	r31, 0x09	; 9
     cca:	dc 01       	movw	r26, r24
     ccc:	13 96       	adiw	r26, 0x03	; 3
     cce:	fc 93       	st	X, r31
     cd0:	ee 93       	st	-X, r30
     cd2:	12 97       	sbiw	r26, 0x02	; 2
     cd4:	0e 94 14 06 	call	0xc28	; 0xc28 <u8g2_draw_string>
     cd8:	08 95       	ret

00000cda <u8g2_UpdateRefHeight>:
     cda:	fc 01       	movw	r30, r24
     cdc:	ec 5b       	subi	r30, 0xBC	; 188
     cde:	ff 4f       	sbci	r31, 0xFF	; 255
     ce0:	20 81       	ld	r18, Z
     ce2:	31 81       	ldd	r19, Z+1	; 0x01
     ce4:	23 2b       	or	r18, r19
     ce6:	e1 f1       	breq	.+120    	; 0xd60 <u8g2_UpdateRefHeight+0x86>
     ce8:	b0 96       	adiw	r30, 0x20	; 32
     cea:	20 81       	ld	r18, Z
     cec:	3c 96       	adiw	r30, 0x0c	; 12
     cee:	20 83       	st	Z, r18
     cf0:	3b 97       	sbiw	r30, 0x0b	; 11
     cf2:	40 81       	ld	r20, Z
     cf4:	3c 96       	adiw	r30, 0x0c	; 12
     cf6:	40 83       	st	Z, r20
     cf8:	32 97       	sbiw	r30, 0x02	; 2
     cfa:	30 81       	ld	r19, Z
     cfc:	33 23       	and	r19, r19
     cfe:	81 f1       	breq	.+96     	; 0xd60 <u8g2_UpdateRefHeight+0x86>
     d00:	31 30       	cpi	r19, 0x01	; 1
     d02:	79 f4       	brne	.+30     	; 0xd22 <u8g2_UpdateRefHeight+0x48>
     d04:	39 97       	sbiw	r30, 0x09	; 9
     d06:	30 81       	ld	r19, Z
     d08:	23 17       	cp	r18, r19
     d0a:	14 f4       	brge	.+4      	; 0xd10 <u8g2_UpdateRefHeight+0x36>
     d0c:	3a 96       	adiw	r30, 0x0a	; 10
     d0e:	30 83       	st	Z, r19
     d10:	fc 01       	movw	r30, r24
     d12:	e9 59       	subi	r30, 0x99	; 153
     d14:	ff 4f       	sbci	r31, 0xFF	; 255
     d16:	20 81       	ld	r18, Z
     d18:	24 17       	cp	r18, r20
     d1a:	14 f5       	brge	.+68     	; 0xd60 <u8g2_UpdateRefHeight+0x86>
     d1c:	3a 96       	adiw	r30, 0x0a	; 10
     d1e:	20 83       	st	Z, r18
     d20:	08 95       	ret
     d22:	02 2e       	mov	r0, r18
     d24:	00 0c       	add	r0, r0
     d26:	33 0b       	sbc	r19, r19
     d28:	fc 01       	movw	r30, r24
     d2a:	ef 59       	subi	r30, 0x9F	; 159
     d2c:	ff 4f       	sbci	r31, 0xFF	; 255
     d2e:	e0 81       	ld	r30, Z
     d30:	dc 01       	movw	r26, r24
     d32:	ad 59       	subi	r26, 0x9D	; 157
     d34:	bf 4f       	sbci	r27, 0xFF	; 255
     d36:	5c 91       	ld	r21, X
     d38:	65 2f       	mov	r22, r21
     d3a:	05 2e       	mov	r0, r21
     d3c:	00 0c       	add	r0, r0
     d3e:	77 0b       	sbc	r23, r23
     d40:	6e 0f       	add	r22, r30
     d42:	71 1d       	adc	r23, r1
     d44:	e7 fd       	sbrc	r30, 7
     d46:	7a 95       	dec	r23
     d48:	26 17       	cp	r18, r22
     d4a:	37 07       	cpc	r19, r23
     d4c:	1c f4       	brge	.+6      	; 0xd54 <u8g2_UpdateRefHeight+0x7a>
     d4e:	1d 96       	adiw	r26, 0x0d	; 13
     d50:	e5 0f       	add	r30, r21
     d52:	ec 93       	st	X, r30
     d54:	54 17       	cp	r21, r20
     d56:	24 f4       	brge	.+8      	; 0xd60 <u8g2_UpdateRefHeight+0x86>
     d58:	fc 01       	movw	r30, r24
     d5a:	ef 58       	subi	r30, 0x8F	; 143
     d5c:	ff 4f       	sbci	r31, 0xFF	; 255
     d5e:	50 83       	st	Z, r21
     d60:	08 95       	ret

00000d62 <u8g2_SetFontPosBaseline>:
     d62:	8a 5b       	subi	r24, 0xBA	; 186
     d64:	9f 4f       	sbci	r25, 0xFF	; 255
     d66:	21 ed       	ldi	r18, 0xD1	; 209
     d68:	32 e0       	ldi	r19, 0x02	; 2
     d6a:	fc 01       	movw	r30, r24
     d6c:	31 83       	std	Z+1, r19	; 0x01
     d6e:	20 83       	st	Z, r18
     d70:	08 95       	ret

00000d72 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
  if ( u8g2->font != font )
     d76:	fc 01       	movw	r30, r24
     d78:	ec 5b       	subi	r30, 0xBC	; 188
     d7a:	ff 4f       	sbci	r31, 0xFF	; 255
     d7c:	20 81       	ld	r18, Z
     d7e:	31 81       	ldd	r19, Z+1	; 0x01
     d80:	26 17       	cp	r18, r22
     d82:	37 07       	cpc	r19, r23
     d84:	51 f0       	breq	.+20     	; 0xd9a <u8g2_SetFont+0x28>
     d86:	ec 01       	movw	r28, r24
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
     d88:	71 83       	std	Z+1, r23	; 0x01
     d8a:	60 83       	st	Z, r22
    u8g2_read_font_info(&(u8g2->font_info), font);
     d8c:	89 5a       	subi	r24, 0xA9	; 169
     d8e:	9f 4f       	sbci	r25, 0xFF	; 255
     d90:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
     d94:	ce 01       	movw	r24, r28
     d96:	0e 94 6d 06 	call	0xcda	; 0xcda <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	08 95       	ret

00000da0 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
  u8g2_uint_t a = *ap;
     da4:	ec 01       	movw	r28, r24
     da6:	a8 81       	ld	r26, Y
     da8:	b9 81       	ldd	r27, Y+1	; 0x01
  u8g2_uint_t b;
  b  = a;
  b += *len;
     daa:	eb 01       	movw	r28, r22
     dac:	e8 81       	ld	r30, Y
     dae:	f9 81       	ldd	r31, Y+1	; 0x01
     db0:	ea 0f       	add	r30, r26
     db2:	fb 1f       	adc	r31, r27
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
     db4:	ea 17       	cp	r30, r26
     db6:	fb 07       	cpc	r31, r27
     db8:	38 f4       	brcc	.+14     	; 0xdc8 <u8g2_clip_intersection2+0x28>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
     dba:	a2 17       	cp	r26, r18
     dbc:	b3 07       	cpc	r27, r19
     dbe:	18 f4       	brcc	.+6      	; 0xdc6 <u8g2_clip_intersection2+0x26>
    {
      b = d;
      b--;
     dc0:	f9 01       	movw	r30, r18
     dc2:	31 97       	sbiw	r30, 0x01	; 1
     dc4:	01 c0       	rjmp	.+2      	; 0xdc8 <u8g2_clip_intersection2+0x28>
    }
    else
    {
      a = c;
     dc6:	da 01       	movw	r26, r20
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
     dc8:	a2 17       	cp	r26, r18
     dca:	b3 07       	cpc	r27, r19
     dcc:	a8 f4       	brcc	.+42     	; 0xdf8 <u8g2_clip_intersection2+0x58>
    return 0;
  if ( b <= c )
     dce:	4e 17       	cp	r20, r30
     dd0:	5f 07       	cpc	r21, r31
     dd2:	a0 f4       	brcc	.+40     	; 0xdfc <u8g2_clip_intersection2+0x5c>
    return 0;
  if ( a < c )		
     dd4:	a4 17       	cp	r26, r20
     dd6:	b5 07       	cpc	r27, r21
     dd8:	08 f0       	brcs	.+2      	; 0xddc <u8g2_clip_intersection2+0x3c>
     dda:	ad 01       	movw	r20, r26
    a = c;
  if ( b > d )
     ddc:	2e 17       	cp	r18, r30
     dde:	3f 07       	cpc	r19, r31
     de0:	08 f0       	brcs	.+2      	; 0xde4 <u8g2_clip_intersection2+0x44>
     de2:	9f 01       	movw	r18, r30
    b = d;
  
  *ap = a;
     de4:	fc 01       	movw	r30, r24
     de6:	51 83       	std	Z+1, r21	; 0x01
     de8:	40 83       	st	Z, r20
  b -= a;
     dea:	24 1b       	sub	r18, r20
     dec:	35 0b       	sbc	r19, r21
  *len = b;
     dee:	eb 01       	movw	r28, r22
     df0:	39 83       	std	Y+1, r19	; 0x01
     df2:	28 83       	st	Y, r18
  return 1;
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	03 c0       	rjmp	.+6      	; 0xdfe <u8g2_clip_intersection2+0x5e>
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    return 0;
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	01 c0       	rjmp	.+2      	; 0xdfe <u8g2_clip_intersection2+0x5e>
  if ( b <= c )
    return 0;
     dfc:	80 e0       	ldi	r24, 0x00	; 0
  
  *ap = a;
  b -= a;
  *len = b;
  return 1;
}
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	08 95       	ret

00000e04 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
     e04:	0f 93       	push	r16

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
     e06:	dc 01       	movw	r26, r24
     e08:	9a 96       	adiw	r26, 0x2a	; 42
     e0a:	ed 91       	ld	r30, X+
     e0c:	fc 91       	ld	r31, X
     e0e:	9b 97       	sbiw	r26, 0x2b	; 43
     e10:	4e 1b       	sub	r20, r30
     e12:	5f 0b       	sbc	r21, r31
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
     e14:	5e 96       	adiw	r26, 0x1e	; 30
     e16:	ed 91       	ld	r30, X+
     e18:	fc 91       	ld	r31, X
     e1a:	5f 97       	sbiw	r26, 0x1f	; 31
     e1c:	09 95       	icall
}
     e1e:	0f 91       	pop	r16
     e20:	08 95       	ret

00000e22 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
     e22:	ef 92       	push	r14
     e24:	ff 92       	push	r15
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <u8g2_DrawHVLine+0xe>
     e30:	00 d0       	rcall	.+0      	; 0xe32 <u8g2_DrawHVLine+0x10>
     e32:	00 d0       	rcall	.+0      	; 0xe34 <u8g2_DrawHVLine+0x12>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	7a 83       	std	Y+2, r23	; 0x02
     e3a:	69 83       	std	Y+1, r22	; 0x01
     e3c:	5c 83       	std	Y+4, r21	; 0x04
     e3e:	4b 83       	std	Y+3, r20	; 0x03
     e40:	3e 83       	std	Y+6, r19	; 0x06
     e42:	2d 83       	std	Y+5, r18	; 0x05
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
     e44:	fc 01       	movw	r30, r24
     e46:	e2 59       	subi	r30, 0x92	; 146
     e48:	ff 4f       	sbci	r31, 0xFF	; 255
     e4a:	20 81       	ld	r18, Z
     e4c:	22 23       	and	r18, r18
     e4e:	09 f4       	brne	.+2      	; 0xe52 <u8g2_DrawHVLine+0x30>
     e50:	74 c0       	rjmp	.+232    	; 0xf3a <u8g2_DrawHVLine+0x118>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
     e52:	2d 81       	ldd	r18, Y+5	; 0x05
     e54:	3e 81       	ldd	r19, Y+6	; 0x06
     e56:	21 15       	cp	r18, r1
     e58:	31 05       	cpc	r19, r1
     e5a:	09 f4       	brne	.+2      	; 0xe5e <u8g2_DrawHVLine+0x3c>
     e5c:	6e c0       	rjmp	.+220    	; 0xf3a <u8g2_DrawHVLine+0x118>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
     e5e:	22 30       	cpi	r18, 0x02	; 2
     e60:	31 05       	cpc	r19, r1
     e62:	b0 f0       	brcs	.+44     	; 0xe90 <u8g2_DrawHVLine+0x6e>
      {
	if ( dir == 2 )
     e64:	02 30       	cpi	r16, 0x02	; 2
     e66:	41 f4       	brne	.+16     	; 0xe78 <u8g2_DrawHVLine+0x56>
	{
	  x -= len;
     e68:	62 1b       	sub	r22, r18
     e6a:	73 0b       	sbc	r23, r19
     e6c:	9b 01       	movw	r18, r22
	  x++;
     e6e:	2f 5f       	subi	r18, 0xFF	; 255
     e70:	3f 4f       	sbci	r19, 0xFF	; 255
     e72:	3a 83       	std	Y+2, r19	; 0x02
     e74:	29 83       	std	Y+1, r18	; 0x01
     e76:	0c c0       	rjmp	.+24     	; 0xe90 <u8g2_DrawHVLine+0x6e>
	}
	else if ( dir == 3 )
     e78:	03 30       	cpi	r16, 0x03	; 3
     e7a:	51 f4       	brne	.+20     	; 0xe90 <u8g2_DrawHVLine+0x6e>
	{
	  y -= len;
     e7c:	4b 81       	ldd	r20, Y+3	; 0x03
     e7e:	5c 81       	ldd	r21, Y+4	; 0x04
     e80:	da 01       	movw	r26, r20
     e82:	a2 1b       	sub	r26, r18
     e84:	b3 0b       	sbc	r27, r19
     e86:	9d 01       	movw	r18, r26
	  y++;
     e88:	2f 5f       	subi	r18, 0xFF	; 255
     e8a:	3f 4f       	sbci	r19, 0xFF	; 255
     e8c:	3c 83       	std	Y+4, r19	; 0x04
     e8e:	2b 83       	std	Y+3, r18	; 0x03
     e90:	7c 01       	movw	r14, r24
	}
      }
      dir &= 1;  
      
      /* clip against the user window */
      if ( dir == 0 )
     e92:	10 2f       	mov	r17, r16
     e94:	11 70       	andi	r17, 0x01	; 1
     e96:	00 fd       	sbrc	r16, 0
     e98:	1d c0       	rjmp	.+58     	; 0xed4 <u8g2_DrawHVLine+0xb2>
      {
	if ( y < u8g2->user_y0 )
     e9a:	fc 01       	movw	r30, r24
     e9c:	20 ad       	ldd	r18, Z+56	; 0x38
     e9e:	31 ad       	ldd	r19, Z+57	; 0x39
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	9c 81       	ldd	r25, Y+4	; 0x04
     ea4:	82 17       	cp	r24, r18
     ea6:	93 07       	cpc	r25, r19
     ea8:	08 f4       	brcc	.+2      	; 0xeac <u8g2_DrawHVLine+0x8a>
     eaa:	47 c0       	rjmp	.+142    	; 0xf3a <u8g2_DrawHVLine+0x118>
	  return;
	if ( y >= u8g2->user_y1 )
     eac:	22 ad       	ldd	r18, Z+58	; 0x3a
     eae:	33 ad       	ldd	r19, Z+59	; 0x3b
     eb0:	82 17       	cp	r24, r18
     eb2:	93 07       	cpc	r25, r19
     eb4:	08 f0       	brcs	.+2      	; 0xeb8 <u8g2_DrawHVLine+0x96>
     eb6:	41 c0       	rjmp	.+130    	; 0xf3a <u8g2_DrawHVLine+0x118>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
     eb8:	26 a9       	ldd	r18, Z+54	; 0x36
     eba:	37 a9       	ldd	r19, Z+55	; 0x37
     ebc:	44 a9       	ldd	r20, Z+52	; 0x34
     ebe:	55 a9       	ldd	r21, Z+53	; 0x35
     ec0:	be 01       	movw	r22, r28
     ec2:	6b 5f       	subi	r22, 0xFB	; 251
     ec4:	7f 4f       	sbci	r23, 0xFF	; 255
     ec6:	ce 01       	movw	r24, r28
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	0e 94 d0 06 	call	0xda0	; 0xda0 <u8g2_clip_intersection2>
     ece:	81 11       	cpse	r24, r1
     ed0:	23 c0       	rjmp	.+70     	; 0xf18 <u8g2_DrawHVLine+0xf6>
     ed2:	33 c0       	rjmp	.+102    	; 0xf3a <u8g2_DrawHVLine+0x118>
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
     ed4:	dc 01       	movw	r26, r24
     ed6:	d4 96       	adiw	r26, 0x34	; 52
     ed8:	2d 91       	ld	r18, X+
     eda:	3c 91       	ld	r19, X
     edc:	d5 97       	sbiw	r26, 0x35	; 53
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	9a 81       	ldd	r25, Y+2	; 0x02
     ee2:	82 17       	cp	r24, r18
     ee4:	93 07       	cpc	r25, r19
     ee6:	48 f1       	brcs	.+82     	; 0xf3a <u8g2_DrawHVLine+0x118>
	  return;
	if ( x >= u8g2->user_x1 )
     ee8:	d6 96       	adiw	r26, 0x36	; 54
     eea:	2d 91       	ld	r18, X+
     eec:	3c 91       	ld	r19, X
     eee:	d7 97       	sbiw	r26, 0x37	; 55
     ef0:	82 17       	cp	r24, r18
     ef2:	93 07       	cpc	r25, r19
     ef4:	10 f5       	brcc	.+68     	; 0xf3a <u8g2_DrawHVLine+0x118>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
     ef6:	da 96       	adiw	r26, 0x3a	; 58
     ef8:	2d 91       	ld	r18, X+
     efa:	3c 91       	ld	r19, X
     efc:	db 97       	sbiw	r26, 0x3b	; 59
     efe:	d8 96       	adiw	r26, 0x38	; 56
     f00:	4d 91       	ld	r20, X+
     f02:	5c 91       	ld	r21, X
     f04:	d9 97       	sbiw	r26, 0x39	; 57
     f06:	be 01       	movw	r22, r28
     f08:	6b 5f       	subi	r22, 0xFB	; 251
     f0a:	7f 4f       	sbci	r23, 0xFF	; 255
     f0c:	ce 01       	movw	r24, r28
     f0e:	03 96       	adiw	r24, 0x03	; 3
     f10:	0e 94 d0 06 	call	0xda0	; 0xda0 <u8g2_clip_intersection2>
     f14:	88 23       	and	r24, r24
     f16:	89 f0       	breq	.+34     	; 0xf3a <u8g2_DrawHVLine+0x118>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
     f18:	d7 01       	movw	r26, r14
     f1a:	90 96       	adiw	r26, 0x20	; 32
     f1c:	ed 91       	ld	r30, X+
     f1e:	fc 91       	ld	r31, X
     f20:	91 97       	sbiw	r26, 0x21	; 33
     f22:	04 80       	ldd	r0, Z+4	; 0x04
     f24:	f5 81       	ldd	r31, Z+5	; 0x05
     f26:	e0 2d       	mov	r30, r0
     f28:	2d 81       	ldd	r18, Y+5	; 0x05
     f2a:	3e 81       	ldd	r19, Y+6	; 0x06
     f2c:	4b 81       	ldd	r20, Y+3	; 0x03
     f2e:	5c 81       	ldd	r21, Y+4	; 0x04
     f30:	69 81       	ldd	r22, Y+1	; 0x01
     f32:	7a 81       	ldd	r23, Y+2	; 0x02
     f34:	01 2f       	mov	r16, r17
     f36:	c7 01       	movw	r24, r14
     f38:	09 95       	icall
    }
}
     f3a:	26 96       	adiw	r28, 0x06	; 6
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	1f 91       	pop	r17
     f4c:	0f 91       	pop	r16
     f4e:	ff 90       	pop	r15
     f50:	ef 90       	pop	r14
     f52:	08 95       	ret

00000f54 <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
     f54:	46 17       	cp	r20, r22
     f56:	57 07       	cpc	r21, r23
     f58:	40 f4       	brcc	.+16     	; 0xf6a <u8g2_is_intersection_decision_tree+0x16>
  {
    if ( v1 > a0 )	// v1 >= a0
     f5a:	82 17       	cp	r24, r18
     f5c:	93 07       	cpc	r25, r19
     f5e:	68 f0       	brcs	.+26     	; 0xf7a <u8g2_is_intersection_decision_tree+0x26>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
     f60:	24 17       	cp	r18, r20
     f62:	35 07       	cpc	r19, r21
     f64:	60 f4       	brcc	.+24     	; 0xf7e <u8g2_is_intersection_decision_tree+0x2a>
      {
	return 1;
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	08 95       	ret
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
     f6a:	82 17       	cp	r24, r18
     f6c:	93 07       	cpc	r25, r19
     f6e:	48 f4       	brcc	.+18     	; 0xf82 <u8g2_is_intersection_decision_tree+0x2e>
    {
      if ( v0 > v1 )	// v0 > v1
     f70:	24 17       	cp	r18, r20
     f72:	35 07       	cpc	r19, r21
     f74:	40 f4       	brcc	.+16     	; 0xf86 <u8g2_is_intersection_decision_tree+0x32>
      {
	return 1;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	08 95       	ret
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	08 95       	ret
      {
	return 1;
      }
      else
      {
	return 0;
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	08 95       	ret
	return 0;
      }
    }
    else
    {
      return 0;
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	08 95       	ret
      {
	return 1;
      }
      else
      {
	return 0;
     f86:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
      return 0;
    }
  }
}
     f88:	08 95       	ret

00000f8a <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
     f8a:	cf 92       	push	r12
     f8c:	df 92       	push	r13
     f8e:	ef 92       	push	r14
     f90:	ff 92       	push	r15
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	ec 01       	movw	r28, r24
     f9c:	7b 01       	movw	r14, r22
     f9e:	69 01       	movw	r12, r18
     fa0:	98 01       	movw	r18, r16
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
     fa2:	6a ad       	ldd	r22, Y+58	; 0x3a
     fa4:	7b ad       	ldd	r23, Y+59	; 0x3b
     fa6:	88 ad       	ldd	r24, Y+56	; 0x38
     fa8:	99 ad       	ldd	r25, Y+57	; 0x39
     faa:	0e 94 aa 07 	call	0xf54	; 0xf54 <u8g2_is_intersection_decision_tree>
     fae:	88 23       	and	r24, r24
     fb0:	41 f0       	breq	.+16     	; 0xfc2 <u8g2_IsIntersection+0x38>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
     fb2:	6e a9       	ldd	r22, Y+54	; 0x36
     fb4:	7f a9       	ldd	r23, Y+55	; 0x37
     fb6:	96 01       	movw	r18, r12
     fb8:	a7 01       	movw	r20, r14
     fba:	8c a9       	ldd	r24, Y+52	; 0x34
     fbc:	9d a9       	ldd	r25, Y+53	; 0x35
     fbe:	0e 94 aa 07 	call	0xf54	; 0xf54 <u8g2_is_intersection_decision_tree>
}
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	df 90       	pop	r13
     fd0:	cf 90       	pop	r12
     fd2:	08 95       	ret

00000fd4 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
     fd4:	0f 93       	push	r16
     fd6:	1f 93       	push	r17
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	dc 01       	movw	r26, r24
     fde:	ca 01       	movw	r24, r20
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
     fe0:	54 2f       	mov	r21, r20
     fe2:	57 70       	andi	r21, 0x07	; 7
  mask = 1;
  mask <<= bit_pos;
     fe4:	c1 e0       	ldi	r28, 0x01	; 1
     fe6:	d0 e0       	ldi	r29, 0x00	; 0
     fe8:	05 2e       	mov	r0, r21
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <u8g2_ll_hvline_vertical_top_lsb+0x1c>
     fec:	cc 0f       	add	r28, r28
     fee:	dd 1f       	adc	r29, r29
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <u8g2_ll_hvline_vertical_top_lsb+0x18>
     ff4:	1c 2f       	mov	r17, r28

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
     ff6:	fd 01       	movw	r30, r26
     ff8:	ec 58       	subi	r30, 0x8C	; 140
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	e0 81       	ld	r30, Z
     ffe:	e2 30       	cpi	r30, 0x02	; 2
    1000:	10 f0       	brcs	.+4      	; 0x1006 <u8g2_ll_hvline_vertical_top_lsb+0x32>
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    1002:	40 e0       	ldi	r20, 0x00	; 0
    1004:	01 c0       	rjmp	.+2      	; 0x1008 <u8g2_ll_hvline_vertical_top_lsb+0x34>
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    1006:	4c 2f       	mov	r20, r28
  if ( u8g2->draw_color != 1 )
    1008:	e1 30       	cpi	r30, 0x01	; 1
    100a:	09 f4       	brne	.+2      	; 0x100e <u8g2_ll_hvline_vertical_top_lsb+0x3a>
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    100c:	10 e0       	ldi	r17, 0x00	; 0
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
    100e:	88 7f       	andi	r24, 0xF8	; 248
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    1010:	ed 91       	ld	r30, X+
    1012:	fc 91       	ld	r31, X
    1014:	11 97       	sbiw	r26, 0x01	; 1
    1016:	c0 89       	ldd	r28, Z+16	; 0x10
    1018:	c8 9f       	mul	r28, r24
    101a:	f0 01       	movw	r30, r0
    101c:	c9 9f       	mul	r28, r25
    101e:	f0 0d       	add	r31, r0
    1020:	11 24       	eor	r1, r1
  ptr = u8g2->tile_buf_ptr;
    1022:	92 96       	adiw	r26, 0x22	; 34
    1024:	8d 91       	ld	r24, X+
    1026:	9c 91       	ld	r25, X
    1028:	93 97       	sbiw	r26, 0x23	; 35
  ptr += offset;
  ptr += x;
    102a:	6e 0f       	add	r22, r30
    102c:	7f 1f       	adc	r23, r31
    102e:	fc 01       	movw	r30, r24
    1030:	e6 0f       	add	r30, r22
    1032:	f7 1f       	adc	r31, r23
  
  if ( dir == 0 )
    1034:	01 11       	cpse	r16, r1
    1036:	08 c0       	rjmp	.+16     	; 0x1048 <u8g2_ll_hvline_vertical_top_lsb+0x74>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
    1038:	80 81       	ld	r24, Z
    103a:	84 2b       	or	r24, r20
	*ptr ^= xor_mask;
    103c:	81 27       	eor	r24, r17
    103e:	81 93       	st	Z+, r24
	ptr++;
	len--;
    1040:	21 50       	subi	r18, 0x01	; 1
    1042:	31 09       	sbc	r19, r1
      } while( len != 0 );
    1044:	c9 f7       	brne	.-14     	; 0x1038 <u8g2_ll_hvline_vertical_top_lsb+0x64>
    1046:	21 c0       	rjmp	.+66     	; 0x108a <u8g2_ll_hvline_vertical_top_lsb+0xb6>
    do
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
    1048:	90 81       	ld	r25, Z
    104a:	94 2b       	or	r25, r20
      *ptr ^= xor_mask;
    104c:	91 27       	eor	r25, r17
    104e:	90 83       	st	Z, r25
      
      bit_pos++;
    1050:	5f 5f       	subi	r21, 0xFF	; 255
      bit_pos &= 7;
    1052:	57 70       	andi	r21, 0x07	; 7

      len--;
    1054:	21 50       	subi	r18, 0x01	; 1
    1056:	31 09       	sbc	r19, r1

      if ( bit_pos == 0 )
    1058:	51 11       	cpse	r21, r1
    105a:	10 c0       	rjmp	.+32     	; 0x107c <u8g2_ll_hvline_vertical_top_lsb+0xa8>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    105c:	96 96       	adiw	r26, 0x26	; 38
    105e:	8d 91       	ld	r24, X+
    1060:	9c 91       	ld	r25, X
    1062:	97 97       	sbiw	r26, 0x27	; 39
    1064:	e8 0f       	add	r30, r24
    1066:	f9 1f       	adc	r31, r25
		
	if ( u8g2->draw_color <= 1 )
    1068:	ed 01       	movw	r28, r26
    106a:	cc 58       	subi	r28, 0x8C	; 140
    106c:	df 4f       	sbci	r29, 0xFF	; 255
    106e:	88 81       	ld	r24, Y
    1070:	82 30       	cpi	r24, 0x02	; 2
    1072:	08 f4       	brcc	.+2      	; 0x1076 <u8g2_ll_hvline_vertical_top_lsb+0xa2>
	  or_mask  = 1;
    1074:	41 e0       	ldi	r20, 0x01	; 1
	if ( u8g2->draw_color != 1 )
    1076:	81 30       	cpi	r24, 0x01	; 1
    1078:	21 f4       	brne	.+8      	; 0x1082 <u8g2_ll_hvline_vertical_top_lsb+0xae>
    107a:	04 c0       	rjmp	.+8      	; 0x1084 <u8g2_ll_hvline_vertical_top_lsb+0xb0>
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    107c:	44 0f       	add	r20, r20
	xor_mask <<= 1;
    107e:	11 0f       	add	r17, r17
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <u8g2_ll_hvline_vertical_top_lsb+0xb0>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    1082:	11 e0       	ldi	r17, 0x01	; 1
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
    1084:	21 15       	cp	r18, r1
    1086:	31 05       	cpc	r19, r1
    1088:	f9 f6       	brne	.-66     	; 0x1048 <u8g2_ll_hvline_vertical_top_lsb+0x74>
  }
}
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	08 95       	ret

00001094 <u8g2_update_dimension_common>:
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
}
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	fc 01       	movw	r30, r24
    109a:	a0 81       	ld	r26, Z
    109c:	b1 81       	ldd	r27, Z+1	; 0x01
    109e:	84 a1       	ldd	r24, Z+36	; 0x24
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	9c 01       	movw	r18, r24
    10a4:	22 0f       	add	r18, r18
    10a6:	33 1f       	adc	r19, r19
    10a8:	22 0f       	add	r18, r18
    10aa:	33 1f       	adc	r19, r19
    10ac:	22 0f       	add	r18, r18
    10ae:	33 1f       	adc	r19, r19
    10b0:	31 a7       	std	Z+41, r19	; 0x29
    10b2:	20 a7       	std	Z+40, r18	; 0x28
    10b4:	50 96       	adiw	r26, 0x10	; 16
    10b6:	2c 91       	ld	r18, X
    10b8:	50 97       	sbiw	r26, 0x10	; 16
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	22 0f       	add	r18, r18
    10be:	33 1f       	adc	r19, r19
    10c0:	22 0f       	add	r18, r18
    10c2:	33 1f       	adc	r19, r19
    10c4:	22 0f       	add	r18, r18
    10c6:	33 1f       	adc	r19, r19
    10c8:	37 a3       	std	Z+39, r19	; 0x27
    10ca:	26 a3       	std	Z+38, r18	; 0x26
    10cc:	75 a1       	ldd	r23, Z+37	; 0x25
    10ce:	27 2f       	mov	r18, r23
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	a9 01       	movw	r20, r18
    10d4:	44 0f       	add	r20, r20
    10d6:	55 1f       	adc	r21, r21
    10d8:	44 0f       	add	r20, r20
    10da:	55 1f       	adc	r21, r21
    10dc:	44 0f       	add	r20, r20
    10de:	55 1f       	adc	r21, r21
    10e0:	53 a7       	std	Z+43, r21	; 0x2b
    10e2:	42 a7       	std	Z+42, r20	; 0x2a
    10e4:	28 0f       	add	r18, r24
    10e6:	39 1f       	adc	r19, r25
    10e8:	51 96       	adiw	r26, 0x11	; 17
    10ea:	6c 91       	ld	r22, X
    10ec:	51 97       	sbiw	r26, 0x11	; 17
    10ee:	c6 2f       	mov	r28, r22
    10f0:	d0 e0       	ldi	r29, 0x00	; 0
    10f2:	c2 17       	cp	r28, r18
    10f4:	d3 07       	cpc	r29, r19
    10f6:	18 f4       	brcc	.+6      	; 0x10fe <u8g2_update_dimension_common+0x6a>
    10f8:	ce 01       	movw	r24, r28
    10fa:	87 1b       	sub	r24, r23
    10fc:	91 09       	sbc	r25, r1
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	55 a7       	std	Z+45, r21	; 0x2d
    110c:	44 a7       	std	Z+44, r20	; 0x2c
    110e:	84 0f       	add	r24, r20
    1110:	95 1f       	adc	r25, r21
    1112:	97 a7       	std	Z+47, r25	; 0x2f
    1114:	86 a7       	std	Z+46, r24	; 0x2e
    1116:	54 96       	adiw	r26, 0x14	; 20
    1118:	8d 91       	ld	r24, X+
    111a:	9c 91       	ld	r25, X
    111c:	55 97       	sbiw	r26, 0x15	; 21
    111e:	91 ab       	std	Z+49, r25	; 0x31
    1120:	80 ab       	std	Z+48, r24	; 0x30
    1122:	56 96       	adiw	r26, 0x16	; 22
    1124:	8d 91       	ld	r24, X+
    1126:	9c 91       	ld	r25, X
    1128:	57 97       	sbiw	r26, 0x17	; 23
    112a:	93 ab       	std	Z+51, r25	; 0x33
    112c:	82 ab       	std	Z+50, r24	; 0x32
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	08 95       	ret

00001134 <u8g2_update_dimension_r0>:
    1134:	0e 94 4a 08 	call	0x1094	; 0x1094 <u8g2_update_dimension_common>
    1138:	08 95       	ret

0000113a <u8g2_apply_clip_window>:
    113a:	0f 93       	push	r16
    113c:	1f 93       	push	r17
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	ec 01       	movw	r28, r24
    1144:	fc 01       	movw	r30, r24
    1146:	ee 5b       	subi	r30, 0xBE	; 190
    1148:	ff 4f       	sbci	r31, 0xFF	; 255
    114a:	00 81       	ld	r16, Z
    114c:	11 81       	ldd	r17, Z+1	; 0x01
    114e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1150:	3f ad       	ldd	r19, Y+63	; 0x3f
    1152:	32 97       	sbiw	r30, 0x02	; 2
    1154:	40 81       	ld	r20, Z
    1156:	51 81       	ldd	r21, Z+1	; 0x01
    1158:	6c ad       	ldd	r22, Y+60	; 0x3c
    115a:	7d ad       	ldd	r23, Y+61	; 0x3d
    115c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <u8g2_IsIntersection>
    1160:	81 11       	cpse	r24, r1
    1162:	04 c0       	rjmp	.+8      	; 0x116c <u8g2_apply_clip_window+0x32>
    1164:	c2 59       	subi	r28, 0x92	; 146
    1166:	df 4f       	sbci	r29, 0xFF	; 255
    1168:	18 82       	st	Y, r1
    116a:	2f c0       	rjmp	.+94     	; 0x11ca <u8g2_apply_clip_window+0x90>
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	fe 01       	movw	r30, r28
    1170:	e2 59       	subi	r30, 0x92	; 146
    1172:	ff 4f       	sbci	r31, 0xFF	; 255
    1174:	80 83       	st	Z, r24
    1176:	2c a9       	ldd	r18, Y+52	; 0x34
    1178:	3d a9       	ldd	r19, Y+53	; 0x35
    117a:	8c ad       	ldd	r24, Y+60	; 0x3c
    117c:	9d ad       	ldd	r25, Y+61	; 0x3d
    117e:	28 17       	cp	r18, r24
    1180:	39 07       	cpc	r19, r25
    1182:	10 f4       	brcc	.+4      	; 0x1188 <u8g2_apply_clip_window+0x4e>
    1184:	9d ab       	std	Y+53, r25	; 0x35
    1186:	8c ab       	std	Y+52, r24	; 0x34
    1188:	2e a9       	ldd	r18, Y+54	; 0x36
    118a:	3f a9       	ldd	r19, Y+55	; 0x37
    118c:	8e ad       	ldd	r24, Y+62	; 0x3e
    118e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1190:	82 17       	cp	r24, r18
    1192:	93 07       	cpc	r25, r19
    1194:	10 f4       	brcc	.+4      	; 0x119a <u8g2_apply_clip_window+0x60>
    1196:	9f ab       	std	Y+55, r25	; 0x37
    1198:	8e ab       	std	Y+54, r24	; 0x36
    119a:	28 ad       	ldd	r18, Y+56	; 0x38
    119c:	39 ad       	ldd	r19, Y+57	; 0x39
    119e:	fe 01       	movw	r30, r28
    11a0:	e0 5c       	subi	r30, 0xC0	; 192
    11a2:	ff 4f       	sbci	r31, 0xFF	; 255
    11a4:	80 81       	ld	r24, Z
    11a6:	91 81       	ldd	r25, Z+1	; 0x01
    11a8:	28 17       	cp	r18, r24
    11aa:	39 07       	cpc	r19, r25
    11ac:	10 f4       	brcc	.+4      	; 0x11b2 <u8g2_apply_clip_window+0x78>
    11ae:	99 af       	std	Y+57, r25	; 0x39
    11b0:	88 af       	std	Y+56, r24	; 0x38
    11b2:	2a ad       	ldd	r18, Y+58	; 0x3a
    11b4:	3b ad       	ldd	r19, Y+59	; 0x3b
    11b6:	fe 01       	movw	r30, r28
    11b8:	ee 5b       	subi	r30, 0xBE	; 190
    11ba:	ff 4f       	sbci	r31, 0xFF	; 255
    11bc:	80 81       	ld	r24, Z
    11be:	91 81       	ldd	r25, Z+1	; 0x01
    11c0:	82 17       	cp	r24, r18
    11c2:	93 07       	cpc	r25, r19
    11c4:	10 f4       	brcc	.+4      	; 0x11ca <u8g2_apply_clip_window+0x90>
    11c6:	9b af       	std	Y+59, r25	; 0x3b
    11c8:	8a af       	std	Y+58, r24	; 0x3a
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	1f 91       	pop	r17
    11d0:	0f 91       	pop	r16
    11d2:	08 95       	ret

000011d4 <u8g2_update_page_win_r0>:
    11d4:	fc 01       	movw	r30, r24
    11d6:	15 aa       	std	Z+53, r1	; 0x35
    11d8:	14 aa       	std	Z+52, r1	; 0x34
    11da:	80 a9       	ldd	r24, Z+48	; 0x30
    11dc:	91 a9       	ldd	r25, Z+49	; 0x31
    11de:	97 ab       	std	Z+55, r25	; 0x37
    11e0:	86 ab       	std	Z+54, r24	; 0x36
    11e2:	84 a5       	ldd	r24, Z+44	; 0x2c
    11e4:	95 a5       	ldd	r25, Z+45	; 0x2d
    11e6:	91 af       	std	Z+57, r25	; 0x39
    11e8:	80 af       	std	Z+56, r24	; 0x38
    11ea:	86 a5       	ldd	r24, Z+46	; 0x2e
    11ec:	97 a5       	ldd	r25, Z+47	; 0x2f
    11ee:	93 af       	std	Z+59, r25	; 0x3b
    11f0:	82 af       	std	Z+58, r24	; 0x3a
    11f2:	cf 01       	movw	r24, r30
    11f4:	0e 94 9d 08 	call	0x113a	; 0x113a <u8g2_apply_clip_window>
    11f8:	08 95       	ret

000011fa <u8g2_draw_mirror_vertical_r0>:
    11fa:	0f 93       	push	r16
    11fc:	fa 01       	movw	r30, r20
    11fe:	dc 01       	movw	r26, r24
    1200:	d2 96       	adiw	r26, 0x32	; 50
    1202:	4d 91       	ld	r20, X+
    1204:	5c 91       	ld	r21, X
    1206:	d3 97       	sbiw	r26, 0x33	; 51
    1208:	4e 1b       	sub	r20, r30
    120a:	5f 0b       	sbc	r21, r31
    120c:	00 ff       	sbrs	r16, 0
    120e:	03 c0       	rjmp	.+6      	; 0x1216 <u8g2_draw_mirror_vertical_r0+0x1c>
    1210:	42 1b       	sub	r20, r18
    1212:	53 0b       	sbc	r21, r19
    1214:	02 c0       	rjmp	.+4      	; 0x121a <u8g2_draw_mirror_vertical_r0+0x20>
    1216:	41 50       	subi	r20, 0x01	; 1
    1218:	51 09       	sbc	r21, r1
    121a:	0e 94 02 07 	call	0xe04	; 0xe04 <u8g2_draw_hv_line_2dir>
    121e:	0f 91       	pop	r16
    1220:	08 95       	ret

00001222 <u8g2_SetMaxClipWindow>:
    1222:	dc 01       	movw	r26, r24
    1224:	dd 96       	adiw	r26, 0x3d	; 61
    1226:	1c 92       	st	X, r1
    1228:	1e 92       	st	-X, r1
    122a:	dc 97       	sbiw	r26, 0x3c	; 60
    122c:	fc 01       	movw	r30, r24
    122e:	e0 5c       	subi	r30, 0xC0	; 192
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	11 82       	std	Z+1, r1	; 0x01
    1234:	10 82       	st	Z, r1
    1236:	2f ef       	ldi	r18, 0xFF	; 255
    1238:	3f ef       	ldi	r19, 0xFF	; 255
    123a:	fc 01       	movw	r30, r24
    123c:	37 af       	std	Z+63, r19	; 0x3f
    123e:	26 af       	std	Z+62, r18	; 0x3e
    1240:	ee 5b       	subi	r30, 0xBE	; 190
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	31 83       	std	Z+1, r19	; 0x01
    1246:	20 83       	st	Z, r18
    1248:	90 96       	adiw	r26, 0x20	; 32
    124a:	ed 91       	ld	r30, X+
    124c:	fc 91       	ld	r31, X
    124e:	91 97       	sbiw	r26, 0x21	; 33
    1250:	02 80       	ldd	r0, Z+2	; 0x02
    1252:	f3 81       	ldd	r31, Z+3	; 0x03
    1254:	e0 2d       	mov	r30, r0
    1256:	09 95       	icall
    1258:	08 95       	ret

0000125a <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	ec 01       	movw	r28, r24
  u8g2->font = NULL;
    1264:	fc 01       	movw	r30, r24
    1266:	ec 5b       	subi	r30, 0xBC	; 188
    1268:	ff 4f       	sbci	r31, 0xFF	; 255
    126a:	11 82       	std	Z+1, r1	; 0x01
    126c:	10 82       	st	Z, r1
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    126e:	3f 8f       	std	Y+31, r19	; 0x1f
    1270:	2e 8f       	std	Y+30, r18	; 0x1e
  
  u8g2->tile_buf_ptr = buf;
    1272:	7b a3       	std	Y+35, r23	; 0x23
    1274:	6a a3       	std	Y+34, r22	; 0x22
  u8g2->tile_buf_height = tile_buf_height;
    1276:	4c a3       	std	Y+36, r20	; 0x24
  
  u8g2->tile_curr_row = 0;
    1278:	1d a2       	std	Y+37, r1	; 0x25
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    127a:	3f 96       	adiw	r30, 0x0f	; 15
    127c:	10 82       	st	Z, r1
  u8g2->bitmap_transparency = 0;
    127e:	b0 96       	adiw	r30, 0x20	; 32
    1280:	10 82       	st	Z, r1
  
  u8g2->font_height_mode = 0; /* issue 2046 */
    1282:	34 97       	sbiw	r30, 0x04	; 4
    1284:	10 82       	st	Z, r1
  u8g2->draw_color = 1;
    1286:	35 96       	adiw	r30, 0x05	; 5
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	80 83       	st	Z, r24
  u8g2->is_auto_page_clear = 1;
    128c:	31 96       	adiw	r30, 0x01	; 1
    128e:	80 83       	st	Z, r24
  
  u8g2->cb = u8g2_cb;
    1290:	19 a3       	std	Y+33, r17	; 0x21
    1292:	08 a3       	std	Y+32, r16	; 0x20
  u8g2->cb->update_dimension(u8g2);
    1294:	d8 01       	movw	r26, r16
    1296:	ed 91       	ld	r30, X+
    1298:	fc 91       	ld	r31, X
    129a:	ce 01       	movw	r24, r28
    129c:	09 95       	icall
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
    129e:	ce 01       	movw	r24, r28
    12a0:	0e 94 11 09 	call	0x1222	; 0x1222 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    12a4:	ce 01       	movw	r24, r28
    12a6:	0e 94 b1 06 	call	0xd62	; 0xd62 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    12aa:	ca 5a       	subi	r28, 0xAA	; 170
    12ac:	df 4f       	sbci	r29, 0xFF	; 255
    12ae:	18 82       	st	Y, r1
#endif
}
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	1f 91       	pop	r17
    12b6:	0f 91       	pop	r16
    12b8:	08 95       	ret

000012ba <u8x8_ascii_next>:
      tile++;
      xx++;
    } while( xx < th );
    y+=2;
  } while( y < tv );  
}
    12ba:	66 23       	and	r22, r22
    12bc:	29 f0       	breq	.+10     	; 0x12c8 <u8x8_ascii_next+0xe>
    12be:	6a 30       	cpi	r22, 0x0A	; 10
    12c0:	31 f0       	breq	.+12     	; 0x12ce <u8x8_ascii_next+0x14>
    12c2:	86 2f       	mov	r24, r22
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	08 95       	ret
    12c8:	8f ef       	ldi	r24, 0xFF	; 255
    12ca:	9f ef       	ldi	r25, 0xFF	; 255
    12cc:	08 95       	ret
    12ce:	8f ef       	ldi	r24, 0xFF	; 255
    12d0:	9f ef       	ldi	r25, 0xFF	; 255
    12d2:	08 95       	ret

000012d4 <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    12d4:	fc 01       	movw	r30, r24
    12d6:	10 8e       	std	Z+24, r1	; 0x18
    12d8:	08 95       	ret

000012da <u8x8_byte_SetDC>:
    case U8X8_MSG_BYTE_START_TRANSFER:
    case U8X8_MSG_BYTE_END_TRANSFER:
      break;	/* do nothing */
  }
  return 1;	/* always succeed */
}
    12da:	46 2f       	mov	r20, r22
    12dc:	dc 01       	movw	r26, r24
    12de:	18 96       	adiw	r26, 0x08	; 8
    12e0:	ed 91       	ld	r30, X+
    12e2:	fc 91       	ld	r31, X
    12e4:	19 97       	sbiw	r26, 0x09	; 9
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	60 e2       	ldi	r22, 0x20	; 32
    12ec:	09 95       	icall
    12ee:	08 95       	ret

000012f0 <u8x8_byte_SendBytes>:
    12f0:	9a 01       	movw	r18, r20
    12f2:	dc 01       	movw	r26, r24
    12f4:	18 96       	adiw	r26, 0x08	; 8
    12f6:	ed 91       	ld	r30, X+
    12f8:	fc 91       	ld	r31, X
    12fa:	19 97       	sbiw	r26, 0x09	; 9
    12fc:	46 2f       	mov	r20, r22
    12fe:	67 e1       	ldi	r22, 0x17	; 23
    1300:	09 95       	icall
    1302:	08 95       	ret

00001304 <u8x8_byte_SendByte>:
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
    1308:	1f 92       	push	r1
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	69 83       	std	Y+1, r22	; 0x01
    1310:	ae 01       	movw	r20, r28
    1312:	4f 5f       	subi	r20, 0xFF	; 255
    1314:	5f 4f       	sbci	r21, 0xFF	; 255
    1316:	61 e0       	ldi	r22, 0x01	; 1
    1318:	0e 94 78 09 	call	0x12f0	; 0x12f0 <u8x8_byte_SendBytes>
    131c:	0f 90       	pop	r0
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	08 95       	ret

00001324 <u8x8_byte_4wire_sw_spi>:
    U8X8_MSG_BYTE_START_TRANSFER
    U8X8_MSG_BYTE_END_TRANSFER
*/

uint8_t u8x8_byte_4wire_sw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1324:	bf 92       	push	r11
    1326:	cf 92       	push	r12
    1328:	df 92       	push	r13
    132a:	ef 92       	push	r14
    132c:	ff 92       	push	r15
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	ec 01       	movw	r28, r24
    1338:	b4 2e       	mov	r11, r20
    133a:	79 01       	movw	r14, r18
  uint8_t i, b;
  uint8_t *data;
  uint8_t takeover_edge = u8x8_GetSPIClockPhase(u8x8);
    133c:	a8 81       	ld	r26, Y
    133e:	b9 81       	ldd	r27, Y+1	; 0x01
    1340:	1c 96       	adiw	r26, 0x0c	; 12
    1342:	8c 91       	ld	r24, X
    1344:	1c 97       	sbiw	r26, 0x0c	; 12
    1346:	81 70       	andi	r24, 0x01	; 1
    1348:	d8 2e       	mov	r13, r24
  uint8_t not_takeover_edge = 1 - takeover_edge;
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	c8 2e       	mov	r12, r24
    134e:	cd 18       	sub	r12, r13
 
  switch(msg)
    1350:	68 31       	cpi	r22, 0x18	; 24
    1352:	09 f4       	brne	.+2      	; 0x1356 <u8x8_byte_4wire_sw_spi+0x32>
    1354:	56 c0       	rjmp	.+172    	; 0x1402 <u8x8_byte_4wire_sw_spi+0xde>
    1356:	28 f4       	brcc	.+10     	; 0x1362 <u8x8_byte_4wire_sw_spi+0x3e>
    1358:	64 31       	cpi	r22, 0x14	; 20
    135a:	e9 f1       	breq	.+122    	; 0x13d6 <u8x8_byte_4wire_sw_spi+0xb2>
    135c:	67 31       	cpi	r22, 0x17	; 23
    135e:	b9 f1       	breq	.+110    	; 0x13ce <u8x8_byte_4wire_sw_spi+0xaa>
    1360:	74 c0       	rjmp	.+232    	; 0x144a <u8x8_byte_4wire_sw_spi+0x126>
    1362:	69 31       	cpi	r22, 0x19	; 25
    1364:	09 f4       	brne	.+2      	; 0x1368 <u8x8_byte_4wire_sw_spi+0x44>
    1366:	5f c0       	rjmp	.+190    	; 0x1426 <u8x8_byte_4wire_sw_spi+0x102>
    1368:	60 32       	cpi	r22, 0x20	; 32
    136a:	09 f4       	brne	.+2      	; 0x136e <u8x8_byte_4wire_sw_spi+0x4a>
    136c:	44 c0       	rjmp	.+136    	; 0x13f6 <u8x8_byte_4wire_sw_spi+0xd2>
    136e:	6d c0       	rjmp	.+218    	; 0x144a <u8x8_byte_4wire_sw_spi+0x126>
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
      {
	b = *data;
    1370:	f7 01       	movw	r30, r14
    1372:	01 91       	ld	r16, Z+
    1374:	7f 01       	movw	r14, r30
	data++;
	arg_int--;
    1376:	ba 94       	dec	r11
	for( i = 0; i < 8; i++ )
    1378:	10 e0       	ldi	r17, 0x00	; 0
    137a:	27 c0       	rjmp	.+78     	; 0x13ca <u8x8_byte_4wire_sw_spi+0xa6>
	{
	  if ( b & 128 )
    137c:	00 23       	and	r16, r16
    137e:	34 f4       	brge	.+12     	; 0x138c <u8x8_byte_4wire_sw_spi+0x68>
	    u8x8_gpio_SetSPIData(u8x8, 1);
    1380:	41 e0       	ldi	r20, 0x01	; 1
    1382:	61 e4       	ldi	r22, 0x41	; 65
    1384:	ce 01       	movw	r24, r28
    1386:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <u8x8_gpio_call>
    138a:	05 c0       	rjmp	.+10     	; 0x1396 <u8x8_byte_4wire_sw_spi+0x72>
	  else
	    u8x8_gpio_SetSPIData(u8x8, 0);
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	61 e4       	ldi	r22, 0x41	; 65
    1390:	ce 01       	movw	r24, r28
    1392:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <u8x8_gpio_call>
	  b <<= 1;
    1396:	00 0f       	add	r16, r16
	  
	  u8x8_gpio_SetSPIClock(u8x8, not_takeover_edge);
    1398:	4c 2d       	mov	r20, r12
    139a:	60 e4       	ldi	r22, 0x40	; 64
    139c:	ce 01       	movw	r24, r28
    139e:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <u8x8_gpio_call>
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sda_setup_time_ns);
    13a2:	e8 81       	ld	r30, Y
    13a4:	f9 81       	ldd	r31, Y+1	; 0x01
    13a6:	46 81       	ldd	r20, Z+6	; 0x06
    13a8:	6c e2       	ldi	r22, 0x2C	; 44
    13aa:	ce 01       	movw	r24, r28
    13ac:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <u8x8_gpio_call>
	  u8x8_gpio_SetSPIClock(u8x8, takeover_edge);
    13b0:	4d 2d       	mov	r20, r13
    13b2:	60 e4       	ldi	r22, 0x40	; 64
    13b4:	ce 01       	movw	r24, r28
    13b6:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <u8x8_gpio_call>
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sck_pulse_width_ns);
    13ba:	e8 81       	ld	r30, Y
    13bc:	f9 81       	ldd	r31, Y+1	; 0x01
    13be:	47 81       	ldd	r20, Z+7	; 0x07
    13c0:	6c e2       	ldi	r22, 0x2C	; 44
    13c2:	ce 01       	movw	r24, r28
    13c4:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <u8x8_gpio_call>
      while( arg_int > 0 )
      {
	b = *data;
	data++;
	arg_int--;
	for( i = 0; i < 8; i++ )
    13c8:	1f 5f       	subi	r17, 0xFF	; 255
    13ca:	18 30       	cpi	r17, 0x08	; 8
    13cc:	b8 f2       	brcs	.-82     	; 0x137c <u8x8_byte_4wire_sw_spi+0x58>
 
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
    13ce:	b1 10       	cpse	r11, r1
    13d0:	cf cf       	rjmp	.-98     	; 0x1370 <u8x8_byte_4wire_sw_spi+0x4c>
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	3b c0       	rjmp	.+118    	; 0x144c <u8x8_byte_4wire_sw_spi+0x128>
      }
      break;
      
    case U8X8_MSG_BYTE_INIT:
      /* disable chipselect */
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
    13d6:	11 96       	adiw	r26, 0x01	; 1
    13d8:	4c 91       	ld	r20, X
    13da:	69 e4       	ldi	r22, 0x49	; 73
    13dc:	ce 01       	movw	r24, r28
    13de:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <u8x8_gpio_call>
      /* no wait required here */
      
      /* for SPI: setup correct level of the clock signal */
      u8x8_gpio_SetSPIClock(u8x8, u8x8_GetSPIClockPhase(u8x8));
    13e2:	e8 81       	ld	r30, Y
    13e4:	f9 81       	ldd	r31, Y+1	; 0x01
    13e6:	44 85       	ldd	r20, Z+12	; 0x0c
    13e8:	41 70       	andi	r20, 0x01	; 1
    13ea:	60 e4       	ldi	r22, 0x40	; 64
    13ec:	ce 01       	movw	r24, r28
    13ee:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <u8x8_gpio_call>
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      /* no wait required here */
      
      /* for SPI: setup correct level of the clock signal */
      u8x8_gpio_SetSPIClock(u8x8, u8x8_GetSPIClockPhase(u8x8));
      break;
    13f4:	2b c0       	rjmp	.+86     	; 0x144c <u8x8_byte_4wire_sw_spi+0x128>
    case U8X8_MSG_BYTE_SET_DC:
      u8x8_gpio_SetDC(u8x8, arg_int);
    13f6:	6a e4       	ldi	r22, 0x4A	; 74
    13f8:	ce 01       	movw	r24, r28
    13fa:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <u8x8_gpio_call>
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
      /* for SPI: setup correct level of the clock signal */
      u8x8_gpio_SetSPIClock(u8x8, u8x8_GetSPIClockPhase(u8x8));
      break;
    case U8X8_MSG_BYTE_SET_DC:
      u8x8_gpio_SetDC(u8x8, arg_int);
      break;
    1400:	25 c0       	rjmp	.+74     	; 0x144c <u8x8_byte_4wire_sw_spi+0x128>
    case U8X8_MSG_BYTE_START_TRANSFER:
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
    1402:	4c 91       	ld	r20, X
    1404:	69 e4       	ldi	r22, 0x49	; 73
    1406:	ce 01       	movw	r24, r28
    1408:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <u8x8_gpio_call>
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
    140c:	ea 85       	ldd	r30, Y+10	; 0x0a
    140e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1410:	a8 81       	ld	r26, Y
    1412:	b9 81       	ldd	r27, Y+1	; 0x01
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	12 96       	adiw	r26, 0x02	; 2
    141a:	4c 91       	ld	r20, X
    141c:	6c e2       	ldi	r22, 0x2C	; 44
    141e:	ce 01       	movw	r24, r28
    1420:	09 95       	icall
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
    1422:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_gpio_SetDC(u8x8, arg_int);
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
    1424:	13 c0       	rjmp	.+38     	; 0x144c <u8x8_byte_4wire_sw_spi+0x128>
    case U8X8_MSG_BYTE_END_TRANSFER:
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
    1426:	ea 85       	ldd	r30, Y+10	; 0x0a
    1428:	fb 85       	ldd	r31, Y+11	; 0x0b
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	13 96       	adiw	r26, 0x03	; 3
    1430:	4c 91       	ld	r20, X
    1432:	6c e2       	ldi	r22, 0x2C	; 44
    1434:	ce 01       	movw	r24, r28
    1436:	09 95       	icall
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
    1438:	e8 81       	ld	r30, Y
    143a:	f9 81       	ldd	r31, Y+1	; 0x01
    143c:	41 81       	ldd	r20, Z+1	; 0x01
    143e:	69 e4       	ldi	r22, 0x49	; 73
    1440:	ce 01       	movw	r24, r28
    1442:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <u8x8_gpio_call>
      break;
    default:
      return 0;
  }
  return 1;
    1446:	81 e0       	ldi	r24, 0x01	; 1
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    1448:	01 c0       	rjmp	.+2      	; 0x144c <u8x8_byte_4wire_sw_spi+0x128>
    default:
      return 0;
    144a:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	ff 90       	pop	r15
    1456:	ef 90       	pop	r14
    1458:	df 90       	pop	r13
    145a:	cf 90       	pop	r12
    145c:	bf 90       	pop	r11
    145e:	08 95       	ret

00001460 <u8x8_cad_SendCmd>:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
}
    1460:	46 2f       	mov	r20, r22
    1462:	dc 01       	movw	r26, r24
    1464:	16 96       	adiw	r26, 0x06	; 6
    1466:	ed 91       	ld	r30, X+
    1468:	fc 91       	ld	r31, X
    146a:	17 97       	sbiw	r26, 0x07	; 7
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	65 e1       	ldi	r22, 0x15	; 21
    1472:	09 95       	icall
    1474:	08 95       	ret

00001476 <u8x8_cad_SendArg>:
    1476:	46 2f       	mov	r20, r22
    1478:	dc 01       	movw	r26, r24
    147a:	16 96       	adiw	r26, 0x06	; 6
    147c:	ed 91       	ld	r30, X+
    147e:	fc 91       	ld	r31, X
    1480:	17 97       	sbiw	r26, 0x07	; 7
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	66 e1       	ldi	r22, 0x16	; 22
    1488:	09 95       	icall
    148a:	08 95       	ret

0000148c <u8x8_cad_SendData>:
    148c:	9a 01       	movw	r18, r20
    148e:	dc 01       	movw	r26, r24
    1490:	16 96       	adiw	r26, 0x06	; 6
    1492:	ed 91       	ld	r30, X+
    1494:	fc 91       	ld	r31, X
    1496:	17 97       	sbiw	r26, 0x07	; 7
    1498:	46 2f       	mov	r20, r22
    149a:	67 e1       	ldi	r22, 0x17	; 23
    149c:	09 95       	icall
    149e:	08 95       	ret

000014a0 <u8x8_cad_StartTransfer>:
    14a0:	dc 01       	movw	r26, r24
    14a2:	16 96       	adiw	r26, 0x06	; 6
    14a4:	ed 91       	ld	r30, X+
    14a6:	fc 91       	ld	r31, X
    14a8:	17 97       	sbiw	r26, 0x07	; 7
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	40 e0       	ldi	r20, 0x00	; 0
    14b0:	68 e1       	ldi	r22, 0x18	; 24
    14b2:	09 95       	icall
    14b4:	08 95       	ret

000014b6 <u8x8_cad_EndTransfer>:
    14b6:	dc 01       	movw	r26, r24
    14b8:	16 96       	adiw	r26, 0x06	; 6
    14ba:	ed 91       	ld	r30, X+
    14bc:	fc 91       	ld	r31, X
    14be:	17 97       	sbiw	r26, 0x07	; 7
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	40 e0       	ldi	r20, 0x00	; 0
    14c6:	69 e1       	ldi	r22, 0x19	; 25
    14c8:	09 95       	icall
    14ca:	08 95       	ret

000014cc <u8x8_cad_SendSequence>:
    14cc:	ef 92       	push	r14
    14ce:	ff 92       	push	r15
    14d0:	0f 93       	push	r16
    14d2:	1f 93       	push	r17
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	1f 92       	push	r1
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	7c 01       	movw	r14, r24
    14e0:	8b 01       	movw	r16, r22
    14e2:	d8 01       	movw	r26, r16
    14e4:	6d 91       	ld	r22, X+
    14e6:	8d 01       	movw	r16, r26
    14e8:	67 31       	cpi	r22, 0x17	; 23
    14ea:	b9 f0       	breq	.+46     	; 0x151a <u8x8_cad_SendSequence+0x4e>
    14ec:	18 f4       	brcc	.+6      	; 0x14f4 <u8x8_cad_SendSequence+0x28>
    14ee:	65 31       	cpi	r22, 0x15	; 21
    14f0:	30 f4       	brcc	.+12     	; 0x14fe <u8x8_cad_SendSequence+0x32>
    14f2:	33 c0       	rjmp	.+102    	; 0x155a <u8x8_cad_SendSequence+0x8e>
    14f4:	6a 31       	cpi	r22, 0x1A	; 26
    14f6:	e8 f0       	brcs	.+58     	; 0x1532 <u8x8_cad_SendSequence+0x66>
    14f8:	6e 3f       	cpi	r22, 0xFE	; 254
    14fa:	31 f1       	breq	.+76     	; 0x1548 <u8x8_cad_SendSequence+0x7c>
    14fc:	2e c0       	rjmp	.+92     	; 0x155a <u8x8_cad_SendSequence+0x8e>
    14fe:	fd 01       	movw	r30, r26
    1500:	41 91       	ld	r20, Z+
    1502:	8f 01       	movw	r16, r30
    1504:	49 83       	std	Y+1, r20	; 0x01
    1506:	d7 01       	movw	r26, r14
    1508:	16 96       	adiw	r26, 0x06	; 6
    150a:	ed 91       	ld	r30, X+
    150c:	fc 91       	ld	r31, X
    150e:	17 97       	sbiw	r26, 0x07	; 7
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	c7 01       	movw	r24, r14
    1516:	09 95       	icall
    1518:	e4 cf       	rjmp	.-56     	; 0x14e2 <u8x8_cad_SendSequence+0x16>
    151a:	fd 01       	movw	r30, r26
    151c:	81 91       	ld	r24, Z+
    151e:	8f 01       	movw	r16, r30
    1520:	89 83       	std	Y+1, r24	; 0x01
    1522:	ae 01       	movw	r20, r28
    1524:	4f 5f       	subi	r20, 0xFF	; 255
    1526:	5f 4f       	sbci	r21, 0xFF	; 255
    1528:	61 e0       	ldi	r22, 0x01	; 1
    152a:	c7 01       	movw	r24, r14
    152c:	0e 94 46 0a 	call	0x148c	; 0x148c <u8x8_cad_SendData>
    1530:	d8 cf       	rjmp	.-80     	; 0x14e2 <u8x8_cad_SendSequence+0x16>
    1532:	d7 01       	movw	r26, r14
    1534:	16 96       	adiw	r26, 0x06	; 6
    1536:	ed 91       	ld	r30, X+
    1538:	fc 91       	ld	r31, X
    153a:	17 97       	sbiw	r26, 0x07	; 7
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e0       	ldi	r20, 0x00	; 0
    1542:	c7 01       	movw	r24, r14
    1544:	09 95       	icall
    1546:	cd cf       	rjmp	.-102    	; 0x14e2 <u8x8_cad_SendSequence+0x16>
    1548:	fd 01       	movw	r30, r26
    154a:	41 91       	ld	r20, Z+
    154c:	8f 01       	movw	r16, r30
    154e:	49 83       	std	Y+1, r20	; 0x01
    1550:	69 e2       	ldi	r22, 0x29	; 41
    1552:	c7 01       	movw	r24, r14
    1554:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <u8x8_gpio_call>
    1558:	c4 cf       	rjmp	.-120    	; 0x14e2 <u8x8_cad_SendSequence+0x16>
    155a:	0f 90       	pop	r0
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	1f 91       	pop	r17
    1562:	0f 91       	pop	r16
    1564:	ff 90       	pop	r15
    1566:	ef 90       	pop	r14
    1568:	08 95       	ret

0000156a <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    156a:	ef 92       	push	r14
    156c:	ff 92       	push	r15
    156e:	0f 93       	push	r16
    1570:	1f 93       	push	r17
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	8c 01       	movw	r16, r24
    1578:	c6 2f       	mov	r28, r22
    157a:	d4 2f       	mov	r29, r20
    157c:	79 01       	movw	r14, r18
  switch(msg)
    157e:	66 31       	cpi	r22, 0x16	; 22
    1580:	a1 f0       	breq	.+40     	; 0x15aa <u8x8_cad_001+0x40>
    1582:	28 f4       	brcc	.+10     	; 0x158e <u8x8_cad_001+0x24>
    1584:	64 31       	cpi	r22, 0x14	; 20
    1586:	e9 f0       	breq	.+58     	; 0x15c2 <u8x8_cad_001+0x58>
    1588:	65 31       	cpi	r22, 0x15	; 21
    158a:	31 f0       	breq	.+12     	; 0x1598 <u8x8_cad_001+0x2e>
    158c:	25 c0       	rjmp	.+74     	; 0x15d8 <u8x8_cad_001+0x6e>
    158e:	67 31       	cpi	r22, 0x17	; 23
    1590:	a9 f0       	breq	.+42     	; 0x15bc <u8x8_cad_001+0x52>
    1592:	6a 31       	cpi	r22, 0x1A	; 26
    1594:	08 f5       	brcc	.+66     	; 0x15d8 <u8x8_cad_001+0x6e>
    1596:	15 c0       	rjmp	.+42     	; 0x15c2 <u8x8_cad_001+0x58>
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	0e 94 6d 09 	call	0x12da	; 0x12da <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
    159e:	6d 2f       	mov	r22, r29
    15a0:	c8 01       	movw	r24, r16
    15a2:	0e 94 82 09 	call	0x1304	; 0x1304 <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
  switch(msg)
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    15a8:	18 c0       	rjmp	.+48     	; 0x15da <u8x8_cad_001+0x70>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
    15aa:	60 e0       	ldi	r22, 0x00	; 0
    15ac:	0e 94 6d 09 	call	0x12da	; 0x12da <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
    15b0:	6d 2f       	mov	r22, r29
    15b2:	c8 01       	movw	r24, r16
    15b4:	0e 94 82 09 	call	0x1304	; 0x1304 <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
    15b8:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    15ba:	0f c0       	rjmp	.+30     	; 0x15da <u8x8_cad_001+0x70>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
    15bc:	61 e0       	ldi	r22, 0x01	; 1
    15be:	0e 94 6d 09 	call	0x12da	; 0x12da <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    15c2:	d8 01       	movw	r26, r16
    15c4:	18 96       	adiw	r26, 0x08	; 8
    15c6:	ed 91       	ld	r30, X+
    15c8:	fc 91       	ld	r31, X
    15ca:	19 97       	sbiw	r26, 0x09	; 9
    15cc:	97 01       	movw	r18, r14
    15ce:	4d 2f       	mov	r20, r29
    15d0:	6c 2f       	mov	r22, r28
    15d2:	c8 01       	movw	r24, r16
    15d4:	09 95       	icall
    15d6:	01 c0       	rjmp	.+2      	; 0x15da <u8x8_cad_001+0x70>
    default:
      return 0;
    15d8:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	ff 90       	pop	r15
    15e4:	ef 90       	pop	r14
    15e6:	08 95       	ret

000015e8 <u8x8_d_helper_display_setup_memory>:
*/
void u8x8_InitInterface(u8x8_t *u8x8)
{
  u8x8_gpio_Init(u8x8);
  u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
}
    15e8:	fc 01       	movw	r30, r24
    15ea:	71 83       	std	Z+1, r23	; 0x01
    15ec:	60 83       	st	Z, r22
    15ee:	fb 01       	movw	r30, r22
    15f0:	22 89       	ldd	r18, Z+18	; 0x12
    15f2:	fc 01       	movw	r30, r24
    15f4:	24 8b       	std	Z+20, r18	; 0x14
    15f6:	08 95       	ret

000015f8 <u8x8_d_helper_display_init>:
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	ec 01       	movw	r28, r24
    15fe:	ea 85       	ldd	r30, Y+10	; 0x0a
    1600:	fb 85       	ldd	r31, Y+11	; 0x0b
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	40 e0       	ldi	r20, 0x00	; 0
    1608:	68 e2       	ldi	r22, 0x28	; 40
    160a:	09 95       	icall
    160c:	ee 81       	ldd	r30, Y+6	; 0x06
    160e:	ff 81       	ldd	r31, Y+7	; 0x07
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	40 e0       	ldi	r20, 0x00	; 0
    1616:	64 e1       	ldi	r22, 0x14	; 20
    1618:	ce 01       	movw	r24, r28
    161a:	09 95       	icall
    161c:	41 e0       	ldi	r20, 0x01	; 1
    161e:	6b e4       	ldi	r22, 0x4B	; 75
    1620:	ce 01       	movw	r24, r28
    1622:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <u8x8_gpio_call>
    1626:	e8 81       	ld	r30, Y
    1628:	f9 81       	ldd	r31, Y+1	; 0x01
    162a:	44 81       	ldd	r20, Z+4	; 0x04
    162c:	69 e2       	ldi	r22, 0x29	; 41
    162e:	ce 01       	movw	r24, r28
    1630:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <u8x8_gpio_call>
    1634:	40 e0       	ldi	r20, 0x00	; 0
    1636:	6b e4       	ldi	r22, 0x4B	; 75
    1638:	ce 01       	movw	r24, r28
    163a:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <u8x8_gpio_call>
    163e:	e8 81       	ld	r30, Y
    1640:	f9 81       	ldd	r31, Y+1	; 0x01
    1642:	44 81       	ldd	r20, Z+4	; 0x04
    1644:	69 e2       	ldi	r22, 0x29	; 41
    1646:	ce 01       	movw	r24, r28
    1648:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <u8x8_gpio_call>
    164c:	41 e0       	ldi	r20, 0x01	; 1
    164e:	6b e4       	ldi	r22, 0x4B	; 75
    1650:	ce 01       	movw	r24, r28
    1652:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <u8x8_gpio_call>
    1656:	e8 81       	ld	r30, Y
    1658:	f9 81       	ldd	r31, Y+1	; 0x01
    165a:	45 81       	ldd	r20, Z+5	; 0x05
    165c:	69 e2       	ldi	r22, 0x29	; 41
    165e:	ce 01       	movw	r24, r28
    1660:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <u8x8_gpio_call>
    1664:	df 91       	pop	r29
    1666:	cf 91       	pop	r28
    1668:	08 95       	ret

0000166a <u8x8_DrawTile>:
    166a:	0f 93       	push	r16
    166c:	1f 93       	push	r17
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29
    1672:	00 d0       	rcall	.+0      	; 0x1674 <u8x8_DrawTile+0xa>
    1674:	00 d0       	rcall	.+0      	; 0x1676 <u8x8_DrawTile+0xc>
    1676:	1f 92       	push	r1
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	6c 83       	std	Y+4, r22	; 0x04
    167e:	4d 83       	std	Y+5, r20	; 0x05
    1680:	2b 83       	std	Y+3, r18	; 0x03
    1682:	1a 83       	std	Y+2, r17	; 0x02
    1684:	09 83       	std	Y+1, r16	; 0x01
    1686:	dc 01       	movw	r26, r24
    1688:	14 96       	adiw	r26, 0x04	; 4
    168a:	ed 91       	ld	r30, X+
    168c:	fc 91       	ld	r31, X
    168e:	15 97       	sbiw	r26, 0x05	; 5
    1690:	9e 01       	movw	r18, r28
    1692:	2f 5f       	subi	r18, 0xFF	; 255
    1694:	3f 4f       	sbci	r19, 0xFF	; 255
    1696:	41 e0       	ldi	r20, 0x01	; 1
    1698:	6f e0       	ldi	r22, 0x0F	; 15
    169a:	09 95       	icall
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	08 95       	ret

000016b0 <u8x8_SetupMemory>:
    16b0:	dc 01       	movw	r26, r24
    16b2:	14 96       	adiw	r26, 0x04	; 4
    16b4:	ed 91       	ld	r30, X+
    16b6:	fc 91       	ld	r31, X
    16b8:	15 97       	sbiw	r26, 0x05	; 5
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	40 e0       	ldi	r20, 0x00	; 0
    16c0:	69 e0       	ldi	r22, 0x09	; 9
    16c2:	09 95       	icall
    16c4:	08 95       	ret

000016c6 <u8x8_InitDisplay>:
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
    16c6:	dc 01       	movw	r26, r24
    16c8:	14 96       	adiw	r26, 0x04	; 4
    16ca:	ed 91       	ld	r30, X+
    16cc:	fc 91       	ld	r31, X
    16ce:	15 97       	sbiw	r26, 0x05	; 5
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	40 e0       	ldi	r20, 0x00	; 0
    16d6:	6a e0       	ldi	r22, 0x0A	; 10
    16d8:	09 95       	icall
    16da:	08 95       	ret

000016dc <u8x8_SetPowerSave>:
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
    16dc:	46 2f       	mov	r20, r22
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
    16de:	dc 01       	movw	r26, r24
    16e0:	14 96       	adiw	r26, 0x04	; 4
    16e2:	ed 91       	ld	r30, X+
    16e4:	fc 91       	ld	r31, X
    16e6:	15 97       	sbiw	r26, 0x05	; 5
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	6b e0       	ldi	r22, 0x0B	; 11
    16ee:	09 95       	icall
    16f0:	08 95       	ret

000016f2 <u8x8_SetFlipMode>:
}

void u8x8_SetFlipMode(u8x8_t *u8x8, uint8_t mode)
{
    16f2:	46 2f       	mov	r20, r22
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
    16f4:	dc 01       	movw	r26, r24
    16f6:	14 96       	adiw	r26, 0x04	; 4
    16f8:	ed 91       	ld	r30, X+
    16fa:	fc 91       	ld	r31, X
    16fc:	15 97       	sbiw	r26, 0x05	; 5
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	6d e0       	ldi	r22, 0x0D	; 13
    1704:	09 95       	icall
    1706:	08 95       	ret

00001708 <u8x8_SetContrast>:
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
    1708:	46 2f       	mov	r20, r22
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    170a:	dc 01       	movw	r26, r24
    170c:	14 96       	adiw	r26, 0x04	; 4
    170e:	ed 91       	ld	r30, X+
    1710:	fc 91       	ld	r31, X
    1712:	15 97       	sbiw	r26, 0x05	; 5
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	6e e0       	ldi	r22, 0x0E	; 14
    171a:	09 95       	icall
    171c:	08 95       	ret

0000171e <u8x8_RefreshDisplay>:
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    171e:	dc 01       	movw	r26, r24
    1720:	14 96       	adiw	r26, 0x04	; 4
    1722:	ed 91       	ld	r30, X+
    1724:	fc 91       	ld	r31, X
    1726:	15 97       	sbiw	r26, 0x05	; 5
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e0       	ldi	r20, 0x00	; 0
    172e:	60 e1       	ldi	r22, 0x10	; 16
    1730:	09 95       	icall
    1732:	08 95       	ret

00001734 <u8x8_d_st7565_common>:
      default:
	return 0;		/* msg unknown */
    }
  }
  return 1;
}
    1734:	df 92       	push	r13
    1736:	ef 92       	push	r14
    1738:	ff 92       	push	r15
    173a:	0f 93       	push	r16
    173c:	1f 93       	push	r17
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	8c 01       	movw	r16, r24
    1744:	c4 2f       	mov	r28, r20
    1746:	79 01       	movw	r14, r18
    1748:	6e 30       	cpi	r22, 0x0E	; 14
    174a:	09 f4       	brne	.+2      	; 0x174e <u8x8_d_st7565_common+0x1a>
    174c:	4c c0       	rjmp	.+152    	; 0x17e6 <u8x8_d_st7565_common+0xb2>
    174e:	6f 30       	cpi	r22, 0x0F	; 15
    1750:	21 f0       	breq	.+8      	; 0x175a <u8x8_d_st7565_common+0x26>
    1752:	6b 30       	cpi	r22, 0x0B	; 11
    1754:	09 f0       	breq	.+2      	; 0x1758 <u8x8_d_st7565_common+0x24>
    1756:	58 c0       	rjmp	.+176    	; 0x1808 <u8x8_d_st7565_common+0xd4>
    1758:	38 c0       	rjmp	.+112    	; 0x17ca <u8x8_d_st7565_common+0x96>
    175a:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <u8x8_cad_StartTransfer>
    175e:	f7 01       	movw	r30, r14
    1760:	d3 80       	ldd	r13, Z+3	; 0x03
    1762:	dd 0c       	add	r13, r13
    1764:	dd 0c       	add	r13, r13
    1766:	dd 0c       	add	r13, r13
    1768:	f8 01       	movw	r30, r16
    176a:	84 89       	ldd	r24, Z+20	; 0x14
    176c:	d8 0e       	add	r13, r24
    176e:	6d 2d       	mov	r22, r13
    1770:	62 95       	swap	r22
    1772:	6f 70       	andi	r22, 0x0F	; 15
    1774:	60 61       	ori	r22, 0x10	; 16
    1776:	c8 01       	movw	r24, r16
    1778:	0e 94 30 0a 	call	0x1460	; 0x1460 <u8x8_cad_SendCmd>
    177c:	6d 2d       	mov	r22, r13
    177e:	6f 70       	andi	r22, 0x0F	; 15
    1780:	c8 01       	movw	r24, r16
    1782:	0e 94 30 0a 	call	0x1460	; 0x1460 <u8x8_cad_SendCmd>
    1786:	f7 01       	movw	r30, r14
    1788:	64 81       	ldd	r22, Z+4	; 0x04
    178a:	60 6b       	ori	r22, 0xB0	; 176
    178c:	c8 01       	movw	r24, r16
    178e:	0e 94 30 0a 	call	0x1460	; 0x1460 <u8x8_cad_SendCmd>
    1792:	f7 01       	movw	r30, r14
    1794:	d2 81       	ldd	r29, Z+2	; 0x02
    1796:	dd 0f       	add	r29, r29
    1798:	dd 0f       	add	r29, r29
    179a:	dd 0f       	add	r29, r29
    179c:	e0 80       	ld	r14, Z
    179e:	f1 80       	ldd	r15, Z+1	; 0x01
    17a0:	8d 2d       	mov	r24, r13
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	8d 0f       	add	r24, r29
    17a6:	91 1d       	adc	r25, r1
    17a8:	85 38       	cpi	r24, 0x85	; 133
    17aa:	91 05       	cpc	r25, r1
    17ac:	10 f0       	brcs	.+4      	; 0x17b2 <u8x8_d_st7565_common+0x7e>
    17ae:	d4 e8       	ldi	r29, 0x84	; 132
    17b0:	dd 19       	sub	r29, r13
    17b2:	a7 01       	movw	r20, r14
    17b4:	6d 2f       	mov	r22, r29
    17b6:	c8 01       	movw	r24, r16
    17b8:	0e 94 46 0a 	call	0x148c	; 0x148c <u8x8_cad_SendData>
    17bc:	c1 50       	subi	r28, 0x01	; 1
    17be:	c9 f7       	brne	.-14     	; 0x17b2 <u8x8_d_st7565_common+0x7e>
    17c0:	c8 01       	movw	r24, r16
    17c2:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <u8x8_cad_EndTransfer>
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	20 c0       	rjmp	.+64     	; 0x180a <u8x8_d_st7565_common+0xd6>
    17ca:	41 11       	cpse	r20, r1
    17cc:	06 c0       	rjmp	.+12     	; 0x17da <u8x8_d_st7565_common+0xa6>
    17ce:	69 e6       	ldi	r22, 0x69	; 105
    17d0:	71 e0       	ldi	r23, 0x01	; 1
    17d2:	0e 94 66 0a 	call	0x14cc	; 0x14cc <u8x8_cad_SendSequence>
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	18 c0       	rjmp	.+48     	; 0x180a <u8x8_d_st7565_common+0xd6>
    17da:	62 e6       	ldi	r22, 0x62	; 98
    17dc:	71 e0       	ldi	r23, 0x01	; 1
    17de:	0e 94 66 0a 	call	0x14cc	; 0x14cc <u8x8_cad_SendSequence>
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	12 c0       	rjmp	.+36     	; 0x180a <u8x8_d_st7565_common+0xd6>
    17e6:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <u8x8_cad_StartTransfer>
    17ea:	61 e8       	ldi	r22, 0x81	; 129
    17ec:	c8 01       	movw	r24, r16
    17ee:	0e 94 30 0a 	call	0x1460	; 0x1460 <u8x8_cad_SendCmd>
    17f2:	6c 2f       	mov	r22, r28
    17f4:	66 95       	lsr	r22
    17f6:	66 95       	lsr	r22
    17f8:	c8 01       	movw	r24, r16
    17fa:	0e 94 3b 0a 	call	0x1476	; 0x1476 <u8x8_cad_SendArg>
    17fe:	c8 01       	movw	r24, r16
    1800:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <u8x8_cad_EndTransfer>
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	01 c0       	rjmp	.+2      	; 0x180a <u8x8_d_st7565_common+0xd6>
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	1f 91       	pop	r17
    1810:	0f 91       	pop	r16
    1812:	ff 90       	pop	r15
    1814:	ef 90       	pop	r14
    1816:	df 90       	pop	r13
    1818:	08 95       	ret

0000181a <u8x8_d_st7565_zolen_128x64>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_st7565_zolen_128x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    181a:	0f 93       	push	r16
    181c:	1f 93       	push	r17
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	8c 01       	movw	r16, r24
    1824:	c6 2f       	mov	r28, r22
    1826:	d4 2f       	mov	r29, r20
  /* call common procedure first and handle messages there */
  if ( u8x8_d_st7565_common(u8x8, msg, arg_int, arg_ptr) == 0 )
    1828:	0e 94 9a 0b 	call	0x1734	; 0x1734 <u8x8_d_st7565_common>
    182c:	81 11       	cpse	r24, r1
    182e:	35 c0       	rjmp	.+106    	; 0x189a <u8x8_d_st7565_zolen_128x64+0x80>
  {
    /* msg not handled, then try here */
    switch(msg)
    1830:	ca 30       	cpi	r28, 0x0A	; 10
    1832:	59 f0       	breq	.+22     	; 0x184a <u8x8_d_st7565_zolen_128x64+0x30>
    1834:	cd 30       	cpi	r28, 0x0D	; 13
    1836:	99 f0       	breq	.+38     	; 0x185e <u8x8_d_st7565_zolen_128x64+0x44>
    1838:	c9 30       	cpi	r28, 0x09	; 9
    183a:	81 f5       	brne	.+96     	; 0x189c <u8x8_d_st7565_zolen_128x64+0x82>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_128x64_display_info);
    183c:	6c e3       	ldi	r22, 0x3C	; 60
    183e:	71 e0       	ldi	r23, 0x01	; 1
    1840:	c8 01       	movw	r24, r16
    1842:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <u8x8_d_helper_display_setup_memory>
	break;
      default:
	return 0;		/* msg unknown */
    }
  }
  return 1;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    /* msg not handled, then try here */
    switch(msg)
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_128x64_display_info);
	break;
    1848:	29 c0       	rjmp	.+82     	; 0x189c <u8x8_d_st7565_zolen_128x64+0x82>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
    184a:	c8 01       	movw	r24, r16
    184c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_zolen_128x64_init_seq);
    1850:	6b e1       	ldi	r22, 0x1B	; 27
    1852:	71 e0       	ldi	r23, 0x01	; 1
    1854:	c8 01       	movw	r24, r16
    1856:	0e 94 66 0a 	call	0x14cc	; 0x14cc <u8x8_cad_SendSequence>
	break;
      default:
	return 0;		/* msg unknown */
    }
  }
  return 1;
    185a:	81 e0       	ldi	r24, 0x01	; 1
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7565_128x64_display_info);
	break;
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_zolen_128x64_init_seq);
	break;
    185c:	1f c0       	rjmp	.+62     	; 0x189c <u8x8_d_st7565_zolen_128x64+0x82>
      case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
	if ( arg_int == 0 )
    185e:	d1 11       	cpse	r29, r1
    1860:	0e c0       	rjmp	.+28     	; 0x187e <u8x8_d_st7565_zolen_128x64+0x64>
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_zflip0_seq);
    1862:	6b e5       	ldi	r22, 0x5B	; 91
    1864:	71 e0       	ldi	r23, 0x01	; 1
    1866:	c8 01       	movw	r24, r16
    1868:	0e 94 66 0a 	call	0x14cc	; 0x14cc <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
    186c:	d8 01       	movw	r26, r16
    186e:	ed 91       	ld	r30, X+
    1870:	fc 91       	ld	r31, X
    1872:	11 97       	sbiw	r26, 0x01	; 1
    1874:	82 89       	ldd	r24, Z+18	; 0x12
    1876:	54 96       	adiw	r26, 0x14	; 20
    1878:	8c 93       	st	X, r24
	break;
      default:
	return 0;		/* msg unknown */
    }
  }
  return 1;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	0f c0       	rjmp	.+30     	; 0x189c <u8x8_d_st7565_zolen_128x64+0x82>
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_zflip0_seq);
	  u8x8->x_offset = u8x8->display_info->default_x_offset;
	}
	else
	{
	  u8x8_cad_SendSequence(u8x8, u8x8_d_st7565_zflip1_seq);
    187e:	64 e5       	ldi	r22, 0x54	; 84
    1880:	71 e0       	ldi	r23, 0x01	; 1
    1882:	c8 01       	movw	r24, r16
    1884:	0e 94 66 0a 	call	0x14cc	; 0x14cc <u8x8_cad_SendSequence>
	  u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    1888:	d8 01       	movw	r26, r16
    188a:	ed 91       	ld	r30, X+
    188c:	fc 91       	ld	r31, X
    188e:	11 97       	sbiw	r26, 0x01	; 1
    1890:	83 89       	ldd	r24, Z+19	; 0x13
    1892:	54 96       	adiw	r26, 0x14	; 20
    1894:	8c 93       	st	X, r24
	break;
      default:
	return 0;		/* msg unknown */
    }
  }
  return 1;
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	01 c0       	rjmp	.+2      	; 0x189c <u8x8_d_st7565_zolen_128x64+0x82>
    189a:	81 e0       	ldi	r24, 0x01	; 1
}
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	1f 91       	pop	r17
    18a2:	0f 91       	pop	r16
    18a4:	08 95       	ret

000018a6 <u8x8_gpio_call>:
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    18a6:	dc 01       	movw	r26, r24
    18a8:	1a 96       	adiw	r26, 0x0a	; 10
    18aa:	ed 91       	ld	r30, X+
    18ac:	fc 91       	ld	r31, X
    18ae:	1b 97       	sbiw	r26, 0x0b	; 11
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	09 95       	icall
    18b6:	08 95       	ret

000018b8 <u8x8_dummy_cb>:
      u8x8_d_helper_display_init(u8x8);
      break;
  }
  /* the null device callback will succeed for all messages */
  return 1;
}
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	08 95       	ret

000018bc <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    18bc:	fc 01       	movw	r30, r24
    u8x8->display_info = NULL;
    18be:	11 82       	std	Z+1, r1	; 0x01
    18c0:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
    18c2:	8c e5       	ldi	r24, 0x5C	; 92
    18c4:	9c e0       	ldi	r25, 0x0C	; 12
    18c6:	95 83       	std	Z+5, r25	; 0x05
    18c8:	84 83       	std	Z+4, r24	; 0x04
    u8x8->cad_cb = u8x8_dummy_cb;
    18ca:	97 83       	std	Z+7, r25	; 0x07
    18cc:	86 83       	std	Z+6, r24	; 0x06
    u8x8->byte_cb = u8x8_dummy_cb;
    18ce:	91 87       	std	Z+9, r25	; 0x09
    18d0:	80 87       	std	Z+8, r24	; 0x08
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    18d2:	93 87       	std	Z+11, r25	; 0x0b
    18d4:	82 87       	std	Z+10, r24	; 0x0a
    u8x8->is_font_inverse_mode = 0;
    18d6:	15 8a       	std	Z+21, r1	; 0x15
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    18d8:	10 8e       	std	Z+24, r1	; 0x18
    u8x8->bus_clock = 0;		/* issue 769 */
    18da:	14 86       	std	Z+12, r1	; 0x0c
    18dc:	15 86       	std	Z+13, r1	; 0x0d
    18de:	16 86       	std	Z+14, r1	; 0x0e
    18e0:	17 86       	std	Z+15, r1	; 0x0f
    u8x8->i2c_address = 255;
    18e2:	8f ef       	ldi	r24, 0xFF	; 255
    18e4:	86 8b       	std	Z+22, r24	; 0x16
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    18e6:	82 8f       	std	Z+26, r24	; 0x1a
    18e8:	08 95       	ret

000018ea <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    18ea:	af 92       	push	r10
    18ec:	bf 92       	push	r11
    18ee:	cf 92       	push	r12
    18f0:	df 92       	push	r13
    18f2:	ef 92       	push	r14
    18f4:	ff 92       	push	r15
    18f6:	0f 93       	push	r16
    18f8:	1f 93       	push	r17
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
    18fe:	ec 01       	movw	r28, r24
    1900:	5b 01       	movw	r10, r22
    1902:	6a 01       	movw	r12, r20
    1904:	79 01       	movw	r14, r18
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    1906:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    190a:	bd 82       	std	Y+5, r11	; 0x05
    190c:	ac 82       	std	Y+4, r10	; 0x04
  u8x8->cad_cb = cad_cb;
    190e:	df 82       	std	Y+7, r13	; 0x07
    1910:	ce 82       	std	Y+6, r12	; 0x06
  u8x8->byte_cb = byte_cb;
    1912:	f9 86       	std	Y+9, r15	; 0x09
    1914:	e8 86       	std	Y+8, r14	; 0x08
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    1916:	1b 87       	std	Y+11, r17	; 0x0b
    1918:	0a 87       	std	Y+10, r16	; 0x0a

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    191a:	ce 01       	movw	r24, r28
    191c:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <u8x8_SetupMemory>
}
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	1f 91       	pop	r17
    1926:	0f 91       	pop	r16
    1928:	ff 90       	pop	r15
    192a:	ef 90       	pop	r14
    192c:	df 90       	pop	r13
    192e:	cf 90       	pop	r12
    1930:	bf 90       	pop	r11
    1932:	af 90       	pop	r10
    1934:	08 95       	ret

00001936 <__vector_21>:
 */ 
#include "adc_hal.h"

volatile static uint8_t adc_convert_done = 1;

ISR(ADC_vect){
    1936:	1f 92       	push	r1
    1938:	0f 92       	push	r0
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	0f 92       	push	r0
    193e:	11 24       	eor	r1, r1
    1940:	8f 93       	push	r24
	adc_convert_done = 1;
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
    1948:	8f 91       	pop	r24
    194a:	0f 90       	pop	r0
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	0f 90       	pop	r0
    1950:	1f 90       	pop	r1
    1952:	18 95       	reti

00001954 <u8x8_avr_gpio_and_delay>:

uint8_t u8x8_avr_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
	// Re-use library for delays

	switch(msg)
    1954:	61 34       	cpi	r22, 0x41	; 65
    1956:	41 f1       	breq	.+80     	; 0x19a8 <u8x8_avr_gpio_and_delay+0x54>
    1958:	28 f4       	brcc	.+10     	; 0x1964 <u8x8_avr_gpio_and_delay+0x10>
    195a:	68 32       	cpi	r22, 0x28	; 40
    195c:	59 f0       	breq	.+22     	; 0x1974 <u8x8_avr_gpio_and_delay+0x20>
    195e:	60 34       	cpi	r22, 0x40	; 64
    1960:	c9 f0       	breq	.+50     	; 0x1994 <u8x8_avr_gpio_and_delay+0x40>
    1962:	49 c0       	rjmp	.+146    	; 0x19f6 <u8x8_avr_gpio_and_delay+0xa2>
    1964:	6a 34       	cpi	r22, 0x4A	; 74
    1966:	a1 f1       	breq	.+104    	; 0x19d0 <u8x8_avr_gpio_and_delay+0x7c>
    1968:	6b 34       	cpi	r22, 0x4B	; 75
    196a:	e1 f1       	breq	.+120    	; 0x19e4 <u8x8_avr_gpio_and_delay+0x90>
    196c:	69 34       	cpi	r22, 0x49	; 73
    196e:	09 f0       	breq	.+2      	; 0x1972 <u8x8_avr_gpio_and_delay+0x1e>
    1970:	42 c0       	rjmp	.+132    	; 0x19f6 <u8x8_avr_gpio_and_delay+0xa2>
    1972:	24 c0       	rjmp	.+72     	; 0x19bc <u8x8_avr_gpio_and_delay+0x68>
	{
		case U8X8_MSG_GPIO_AND_DELAY_INIT:  // called once during init phase of u8g2/u8x8
		DISPLAY_CLK_DIR |= 1<<DISPLAY_CLK_PIN;
    1974:	87 b1       	in	r24, 0x07	; 7
    1976:	84 60       	ori	r24, 0x04	; 4
    1978:	87 b9       	out	0x07, r24	; 7
		DISPLAY_DATA_DIR |= 1<<DISPLAY_DATA_PIN;
    197a:	87 b1       	in	r24, 0x07	; 7
    197c:	88 60       	ori	r24, 0x08	; 8
    197e:	87 b9       	out	0x07, r24	; 7
		DISPLAY_CS_DIR |= 1<<DISPLAY_CS_PIN;
    1980:	8d b1       	in	r24, 0x0d	; 13
    1982:	88 60       	ori	r24, 0x08	; 8
    1984:	8d b9       	out	0x0d, r24	; 13
		DISPLAY_DC_DIR |= 1<<DISPLAY_DC_PIN;
    1986:	87 b1       	in	r24, 0x07	; 7
    1988:	82 60       	ori	r24, 0x02	; 2
    198a:	87 b9       	out	0x07, r24	; 7
		DISPLAY_RESET_DIR |= 1<<DISPLAY_RESET_PIN;
    198c:	87 b1       	in	r24, 0x07	; 7
    198e:	81 60       	ori	r24, 0x01	; 1
    1990:	87 b9       	out	0x07, r24	; 7
		
		break;              // can be used to setup pins
    1992:	31 c0       	rjmp	.+98     	; 0x19f6 <u8x8_avr_gpio_and_delay+0xa2>
		case U8X8_MSG_GPIO_SPI_CLOCK:        // Clock pin: Output level in arg_int
		if(arg_int)
    1994:	44 23       	and	r20, r20
    1996:	21 f0       	breq	.+8      	; 0x19a0 <u8x8_avr_gpio_and_delay+0x4c>
		DISPLAY_CLK_PORT |= (1<<DISPLAY_CLK_PIN);
    1998:	88 b1       	in	r24, 0x08	; 8
    199a:	84 60       	ori	r24, 0x04	; 4
    199c:	88 b9       	out	0x08, r24	; 8
    199e:	2b c0       	rjmp	.+86     	; 0x19f6 <u8x8_avr_gpio_and_delay+0xa2>
		else
		DISPLAY_CLK_PORT &= ~(1<<DISPLAY_CLK_PIN);
    19a0:	88 b1       	in	r24, 0x08	; 8
    19a2:	8b 7f       	andi	r24, 0xFB	; 251
    19a4:	88 b9       	out	0x08, r24	; 8
    19a6:	27 c0       	rjmp	.+78     	; 0x19f6 <u8x8_avr_gpio_and_delay+0xa2>
		break;
		case U8X8_MSG_GPIO_SPI_DATA:        // MOSI pin: Output level in arg_int
		if(arg_int)
    19a8:	44 23       	and	r20, r20
    19aa:	21 f0       	breq	.+8      	; 0x19b4 <u8x8_avr_gpio_and_delay+0x60>
		DISPLAY_DATA_PORT |= (1<<DISPLAY_DATA_PIN);
    19ac:	88 b1       	in	r24, 0x08	; 8
    19ae:	88 60       	ori	r24, 0x08	; 8
    19b0:	88 b9       	out	0x08, r24	; 8
    19b2:	21 c0       	rjmp	.+66     	; 0x19f6 <u8x8_avr_gpio_and_delay+0xa2>
		else
		DISPLAY_DATA_PORT &= ~(1<<DISPLAY_DATA_PIN);
    19b4:	88 b1       	in	r24, 0x08	; 8
    19b6:	87 7f       	andi	r24, 0xF7	; 247
    19b8:	88 b9       	out	0x08, r24	; 8
    19ba:	1d c0       	rjmp	.+58     	; 0x19f6 <u8x8_avr_gpio_and_delay+0xa2>
		break;
		case U8X8_MSG_GPIO_CS:        // CS (chip select) pin: Output level in arg_int
		if(arg_int)
    19bc:	44 23       	and	r20, r20
    19be:	21 f0       	breq	.+8      	; 0x19c8 <u8x8_avr_gpio_and_delay+0x74>
		DISPLAY_CS_PORT |= (1<<DISPLAY_CS_PIN);
    19c0:	8e b1       	in	r24, 0x0e	; 14
    19c2:	88 60       	ori	r24, 0x08	; 8
    19c4:	8e b9       	out	0x0e, r24	; 14
    19c6:	17 c0       	rjmp	.+46     	; 0x19f6 <u8x8_avr_gpio_and_delay+0xa2>
		else
		DISPLAY_CS_PORT &= ~(1<<DISPLAY_CS_PIN);
    19c8:	8e b1       	in	r24, 0x0e	; 14
    19ca:	87 7f       	andi	r24, 0xF7	; 247
    19cc:	8e b9       	out	0x0e, r24	; 14
    19ce:	13 c0       	rjmp	.+38     	; 0x19f6 <u8x8_avr_gpio_and_delay+0xa2>
		break;
		case U8X8_MSG_GPIO_DC:        // DC (data/cmd, A0, register select) pin: Output level in arg_int
		if(arg_int)
    19d0:	44 23       	and	r20, r20
    19d2:	21 f0       	breq	.+8      	; 0x19dc <u8x8_avr_gpio_and_delay+0x88>
		DISPLAY_DC_PORT |= (1<<DISPLAY_DC_PIN);
    19d4:	88 b1       	in	r24, 0x08	; 8
    19d6:	82 60       	ori	r24, 0x02	; 2
    19d8:	88 b9       	out	0x08, r24	; 8
    19da:	0d c0       	rjmp	.+26     	; 0x19f6 <u8x8_avr_gpio_and_delay+0xa2>
		else
		DISPLAY_DC_PORT &= ~(1<<DISPLAY_DC_PIN);
    19dc:	88 b1       	in	r24, 0x08	; 8
    19de:	8d 7f       	andi	r24, 0xFD	; 253
    19e0:	88 b9       	out	0x08, r24	; 8
    19e2:	09 c0       	rjmp	.+18     	; 0x19f6 <u8x8_avr_gpio_and_delay+0xa2>
		break;
		
		case U8X8_MSG_GPIO_RESET:     // Reset pin: Output level in arg_int
		if(arg_int)
    19e4:	44 23       	and	r20, r20
    19e6:	21 f0       	breq	.+8      	; 0x19f0 <u8x8_avr_gpio_and_delay+0x9c>
		DISPLAY_RESET_PORT |= (1<<DISPLAY_RESET_PIN);
    19e8:	88 b1       	in	r24, 0x08	; 8
    19ea:	81 60       	ori	r24, 0x01	; 1
    19ec:	88 b9       	out	0x08, r24	; 8
    19ee:	03 c0       	rjmp	.+6      	; 0x19f6 <u8x8_avr_gpio_and_delay+0xa2>
		else
		DISPLAY_RESET_PORT &= ~(1<<DISPLAY_RESET_PIN);
    19f0:	88 b1       	in	r24, 0x08	; 8
    19f2:	8e 7f       	andi	r24, 0xFE	; 254
    19f4:	88 b9       	out	0x08, r24	; 8
		return 1;
		u8x8_SetGPIOResult(u8x8, 1);      // default return value
		break;
	}
	return 1;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	08 95       	ret

000019fa <set_pin_level>:
*/


void set_pin_level(gpio *GPIOx , const bool level)
{
	if (level) {
    19fa:	66 23       	and	r22, r22
    19fc:	99 f0       	breq	.+38     	; 0x1a24 <set_pin_level+0x2a>
		*GPIOx->port |= 1 << GPIOx->pin;
    19fe:	dc 01       	movw	r26, r24
    1a00:	ed 91       	ld	r30, X+
    1a02:	fc 91       	ld	r31, X
    1a04:	11 97       	sbiw	r26, 0x01	; 1
    1a06:	21 e0       	ldi	r18, 0x01	; 1
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	a9 01       	movw	r20, r18
    1a0c:	12 96       	adiw	r26, 0x02	; 2
    1a0e:	0c 90       	ld	r0, X
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <set_pin_level+0x1c>
    1a12:	44 0f       	add	r20, r20
    1a14:	55 1f       	adc	r21, r21
    1a16:	0a 94       	dec	r0
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <set_pin_level+0x18>
    1a1a:	ca 01       	movw	r24, r20
    1a1c:	90 81       	ld	r25, Z
    1a1e:	89 2b       	or	r24, r25
    1a20:	80 83       	st	Z, r24
    1a22:	08 95       	ret
		} else {
		*GPIOx->port &= ~(1 << GPIOx->pin);
    1a24:	dc 01       	movw	r26, r24
    1a26:	ed 91       	ld	r30, X+
    1a28:	fc 91       	ld	r31, X
    1a2a:	11 97       	sbiw	r26, 0x01	; 1
    1a2c:	21 e0       	ldi	r18, 0x01	; 1
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	a9 01       	movw	r20, r18
    1a32:	12 96       	adiw	r26, 0x02	; 2
    1a34:	0c 90       	ld	r0, X
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <set_pin_level+0x42>
    1a38:	44 0f       	add	r20, r20
    1a3a:	55 1f       	adc	r21, r21
    1a3c:	0a 94       	dec	r0
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <set_pin_level+0x3e>
    1a40:	ca 01       	movw	r24, r20
    1a42:	80 95       	com	r24
    1a44:	90 81       	ld	r25, Z
    1a46:	89 23       	and	r24, r25
    1a48:	80 83       	st	Z, r24
    1a4a:	08 95       	ret

00001a4c <set_pin_dir>:
	}
}

void set_pin_dir(gpio *GPIOx, const enum port_dir direction)
{
    1a4c:	fc 01       	movw	r30, r24
	uint8_t *tmp_port = GPIOx->port-1;
    1a4e:	30 81       	ld	r19, Z
    1a50:	21 81       	ldd	r18, Z+1	; 0x01
	switch (direction) {
    1a52:	61 30       	cpi	r22, 0x01	; 1
    1a54:	99 f0       	breq	.+38     	; 0x1a7c <set_pin_dir+0x30>
    1a56:	18 f0       	brcs	.+6      	; 0x1a5e <set_pin_dir+0x12>
    1a58:	62 30       	cpi	r22, 0x02	; 2
    1a5a:	f1 f0       	breq	.+60     	; 0x1a98 <set_pin_dir+0x4c>
    1a5c:	08 95       	ret
		case PORT_DIR_IN:
		*tmp_port &= ~(1 << GPIOx->pin);
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	02 80       	ldd	r0, Z+2	; 0x02
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <set_pin_dir+0x1e>
    1a66:	88 0f       	add	r24, r24
    1a68:	99 1f       	adc	r25, r25
    1a6a:	0a 94       	dec	r0
    1a6c:	e2 f7       	brpl	.-8      	; 0x1a66 <set_pin_dir+0x1a>
    1a6e:	e3 2f       	mov	r30, r19
    1a70:	f2 2f       	mov	r31, r18
    1a72:	80 95       	com	r24
    1a74:	92 91       	ld	r25, -Z
    1a76:	89 23       	and	r24, r25
    1a78:	80 83       	st	Z, r24
		break;
    1a7a:	08 95       	ret
		case PORT_DIR_OUT:
		*tmp_port |= 1 << GPIOx->pin;
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	02 80       	ldd	r0, Z+2	; 0x02
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <set_pin_dir+0x3c>
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	0a 94       	dec	r0
    1a8a:	e2 f7       	brpl	.-8      	; 0x1a84 <set_pin_dir+0x38>
    1a8c:	e3 2f       	mov	r30, r19
    1a8e:	f2 2f       	mov	r31, r18
    1a90:	92 91       	ld	r25, -Z
    1a92:	89 2b       	or	r24, r25
    1a94:	80 83       	st	Z, r24
		break;
    1a96:	08 95       	ret
		case PORT_DIR_OFF:
		*tmp_port &= ~(1 << GPIOx->pin);
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	ac 01       	movw	r20, r24
    1a9e:	02 80       	ldd	r0, Z+2	; 0x02
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <set_pin_dir+0x5a>
    1aa2:	44 0f       	add	r20, r20
    1aa4:	55 1f       	adc	r21, r21
    1aa6:	0a 94       	dec	r0
    1aa8:	e2 f7       	brpl	.-8      	; 0x1aa2 <set_pin_dir+0x56>
    1aaa:	a3 2f       	mov	r26, r19
    1aac:	b2 2f       	mov	r27, r18
    1aae:	40 95       	com	r20
    1ab0:	2e 91       	ld	r18, -X
    1ab2:	42 23       	and	r20, r18
    1ab4:	4c 93       	st	X, r20
		*GPIOx->port &= ~(1 << GPIOx->pin);
    1ab6:	a0 81       	ld	r26, Z
    1ab8:	b1 81       	ldd	r27, Z+1	; 0x01
    1aba:	02 80       	ldd	r0, Z+2	; 0x02
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <set_pin_dir+0x76>
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	0a 94       	dec	r0
    1ac4:	e2 f7       	brpl	.-8      	; 0x1abe <set_pin_dir+0x72>
    1ac6:	80 95       	com	r24
    1ac8:	9c 91       	ld	r25, X
    1aca:	89 23       	and	r24, r25
    1acc:	8c 93       	st	X, r24
    1ace:	08 95       	ret

00001ad0 <__vector_40>:

#include "twi_hal.h"

volatile uint8_t status = 0xF8;

ISR(TWI1_vect){
    1ad0:	1f 92       	push	r1
    1ad2:	0f 92       	push	r0
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	0f 92       	push	r0
    1ad8:	11 24       	eor	r1, r1
    1ada:	8f 93       	push	r24
	status = (TWSR1 & 0xF8);
    1adc:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
    1ae0:	88 7f       	andi	r24, 0xF8	; 248
    1ae2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <status>
}
    1ae6:	8f 91       	pop	r24
    1ae8:	0f 90       	pop	r0
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	0f 90       	pop	r0
    1aee:	1f 90       	pop	r1
    1af0:	18 95       	reti

00001af2 <serial_complete>:
	uint8_t data = 0;
	data = rx_buffer[rx_read_pos];
	rx_read_pos++;
	rx_count--;
	return data;
}
    1af2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <read_complete>
    1af6:	08 95       	ret

00001af8 <serial_read_data>:
    1af8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <read_complete>
    1afc:	10 92 fb 05 	sts	0x05FB, r1	; 0x8005fb <rx_count+0x1>
    1b00:	10 92 fa 05 	sts	0x05FA, r1	; 0x8005fa <rx_count>
    1b04:	8a e7       	ldi	r24, 0x7A	; 122
    1b06:	95 e0       	ldi	r25, 0x05	; 5
    1b08:	08 95       	ret

00001b0a <__vector_18>:
    1b0a:	1f 92       	push	r1
    1b0c:	0f 92       	push	r0
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	0f 92       	push	r0
    1b12:	11 24       	eor	r1, r1
    1b14:	8f 93       	push	r24
    1b16:	9f 93       	push	r25
    1b18:	ef 93       	push	r30
    1b1a:	ff 93       	push	r31
    1b1c:	e0 91 fa 05 	lds	r30, 0x05FA	; 0x8005fa <rx_count>
    1b20:	f0 91 fb 05 	lds	r31, 0x05FB	; 0x8005fb <rx_count+0x1>
    1b24:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1b28:	e6 58       	subi	r30, 0x86	; 134
    1b2a:	fa 4f       	sbci	r31, 0xFA	; 250
    1b2c:	80 83       	st	Z, r24
    1b2e:	e0 91 fa 05 	lds	r30, 0x05FA	; 0x8005fa <rx_count>
    1b32:	f0 91 fb 05 	lds	r31, 0x05FB	; 0x8005fb <rx_count+0x1>
    1b36:	e6 58       	subi	r30, 0x86	; 134
    1b38:	fa 4f       	sbci	r31, 0xFA	; 250
    1b3a:	80 81       	ld	r24, Z
    1b3c:	8a 30       	cpi	r24, 0x0A	; 10
    1b3e:	51 f4       	brne	.+20     	; 0x1b54 <__vector_18+0x4a>
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <read_complete>
    1b46:	e0 91 fa 05 	lds	r30, 0x05FA	; 0x8005fa <rx_count>
    1b4a:	f0 91 fb 05 	lds	r31, 0x05FB	; 0x8005fb <rx_count+0x1>
    1b4e:	e5 58       	subi	r30, 0x85	; 133
    1b50:	fa 4f       	sbci	r31, 0xFA	; 250
    1b52:	10 82       	st	Z, r1
    1b54:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <rx_count>
    1b58:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <rx_count+0x1>
    1b5c:	01 96       	adiw	r24, 0x01	; 1
    1b5e:	90 93 fb 05 	sts	0x05FB, r25	; 0x8005fb <rx_count+0x1>
    1b62:	80 93 fa 05 	sts	0x05FA, r24	; 0x8005fa <rx_count>
    1b66:	ff 91       	pop	r31
    1b68:	ef 91       	pop	r30
    1b6a:	9f 91       	pop	r25
    1b6c:	8f 91       	pop	r24
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	0f 90       	pop	r0
    1b74:	1f 90       	pop	r1
    1b76:	18 95       	reti

00001b78 <__vector_20>:
    1b78:	1f 92       	push	r1
    1b7a:	0f 92       	push	r0
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	0f 92       	push	r0
    1b80:	11 24       	eor	r1, r1
    1b82:	8f 93       	push	r24
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <uart_tx_busy>
    1b8a:	8f 91       	pop	r24
    1b8c:	0f 90       	pop	r0
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	0f 90       	pop	r0
    1b92:	1f 90       	pop	r1
    1b94:	18 95       	reti

00001b96 <uart_init>:
    1b96:	44 23       	and	r20, r20
    1b98:	39 f0       	breq	.+14     	; 0x1ba8 <uart_init+0x12>
    1b9a:	e0 ec       	ldi	r30, 0xC0	; 192
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	20 81       	ld	r18, Z
    1ba0:	22 60       	ori	r18, 0x02	; 2
    1ba2:	20 83       	st	Z, r18
    1ba4:	a8 e0       	ldi	r26, 0x08	; 8
    1ba6:	01 c0       	rjmp	.+2      	; 0x1baa <uart_init+0x14>
    1ba8:	a0 e1       	ldi	r26, 0x10	; 16
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	9b 01       	movw	r18, r22
    1bae:	ac 01       	movw	r20, r24
    1bb0:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__muluhisi3>
    1bb4:	9b 01       	movw	r18, r22
    1bb6:	ac 01       	movw	r20, r24
    1bb8:	60 e0       	ldi	r22, 0x00	; 0
    1bba:	72 e1       	ldi	r23, 0x12	; 18
    1bbc:	8a e7       	ldi	r24, 0x7A	; 122
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__udivmodsi4>
    1bc4:	ba 01       	movw	r22, r20
    1bc6:	a9 01       	movw	r20, r18
    1bc8:	41 50       	subi	r20, 0x01	; 1
    1bca:	51 09       	sbc	r21, r1
    1bcc:	61 09       	sbc	r22, r1
    1bce:	71 09       	sbc	r23, r1
    1bd0:	db 01       	movw	r26, r22
    1bd2:	ca 01       	movw	r24, r20
    1bd4:	88 27       	eor	r24, r24
    1bd6:	9f 70       	andi	r25, 0x0F	; 15
    1bd8:	aa 27       	eor	r26, r26
    1bda:	bb 27       	eor	r27, r27
    1bdc:	89 2f       	mov	r24, r25
    1bde:	9a 2f       	mov	r25, r26
    1be0:	ab 2f       	mov	r26, r27
    1be2:	bb 27       	eor	r27, r27
    1be4:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1be8:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    1bec:	e1 ec       	ldi	r30, 0xC1	; 193
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	88 6d       	ori	r24, 0xD8	; 216
    1bf4:	80 83       	st	Z, r24
    1bf6:	86 e8       	ldi	r24, 0x86	; 134
    1bf8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1bfc:	08 95       	ret

00001bfe <uart_send_byte>:
    1bfe:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <uart_tx_busy>
    1c02:	99 23       	and	r25, r25
    1c04:	e1 f3       	breq	.-8      	; 0x1bfe <uart_send_byte>
    1c06:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <uart_tx_busy>
    1c0a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1c0e:	08 95       	ret

00001c10 <parseString>:
uint8_t parseString(char* input){
	char* token = strtok(input, " ");
    1c10:	66 e7       	ldi	r22, 0x76	; 118
    1c12:	71 e0       	ldi	r23, 0x01	; 1
    1c14:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <strtok>
	return atoi(token + 5);
    1c18:	05 96       	adiw	r24, 0x05	; 5
    1c1a:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <atoi>
}
    1c1e:	08 95       	ret

00001c20 <main>:

uint8_t att = 0;

int main(void)
{
	sei();
    1c20:	78 94       	sei
	stdout = &mystdout;
    1c22:	84 e0       	ldi	r24, 0x04	; 4
    1c24:	91 e0       	ldi	r25, 0x01	; 1
    1c26:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <__iob+0x3>
    1c2a:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <__iob+0x2>
	u8g2_Setup_st7565_zolen_128x64_f( &u8g2, U8G2_MIRROR_VERTICAL, u8x8_byte_4wire_sw_spi, u8x8_avr_gpio_and_delay );
    1c2e:	2a ea       	ldi	r18, 0xAA	; 170
    1c30:	3c e0       	ldi	r19, 0x0C	; 12
    1c32:	42 e9       	ldi	r20, 0x92	; 146
    1c34:	59 e0       	ldi	r21, 0x09	; 9
    1c36:	65 e1       	ldi	r22, 0x15	; 21
    1c38:	71 e0       	ldi	r23, 0x01	; 1
    1c3a:	8d e7       	ldi	r24, 0x7D	; 125
    1c3c:	96 e0       	ldi	r25, 0x06	; 6
    1c3e:	0e 94 95 02 	call	0x52a	; 0x52a <u8g2_Setup_st7565_zolen_128x64_f>
	uart_init(38400,0);
    1c42:	40 e0       	ldi	r20, 0x00	; 0
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	76 e9       	ldi	r23, 0x96	; 150
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <uart_init>


	
	//rtc_set(&sys_rtc);
	
	u8g2_InitDisplay(&u8g2);
    1c50:	8d e7       	ldi	r24, 0x7D	; 125
    1c52:	96 e0       	ldi	r25, 0x06	; 6
    1c54:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
    1c58:	60 e0       	ldi	r22, 0x00	; 0
    1c5a:	8d e7       	ldi	r24, 0x7D	; 125
    1c5c:	96 e0       	ldi	r25, 0x06	; 6
    1c5e:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <u8x8_SetPowerSave>
	u8g2_SetFlipMode(&u8g2, 1);
    1c62:	61 e0       	ldi	r22, 0x01	; 1
    1c64:	8d e7       	ldi	r24, 0x7D	; 125
    1c66:	96 e0       	ldi	r25, 0x06	; 6
    1c68:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <u8x8_SetFlipMode>
	u8g2_SetContrast(&u8g2, 120);
    1c6c:	68 e7       	ldi	r22, 0x78	; 120
    1c6e:	8d e7       	ldi	r24, 0x7D	; 125
    1c70:	96 e0       	ldi	r25, 0x06	; 6
    1c72:	0e 94 84 0b 	call	0x1708	; 0x1708 <u8x8_SetContrast>
	
	set_pin_dir(&lcd_blk , PORT_DIR_OUT); set_pin_level(&lcd_blk, true);
    1c76:	61 e0       	ldi	r22, 0x01	; 1
    1c78:	82 e1       	ldi	r24, 0x12	; 18
    1c7a:	91 e0       	ldi	r25, 0x01	; 1
    1c7c:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <set_pin_dir>
    1c80:	61 e0       	ldi	r22, 0x01	; 1
    1c82:	82 e1       	ldi	r24, 0x12	; 18
    1c84:	91 e0       	ldi	r25, 0x01	; 1
    1c86:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <set_pin_level>
	u8g2_ClearBuffer(&u8g2);
    1c8a:	8d e7       	ldi	r24, 0x7D	; 125
    1c8c:	96 e0       	ldi	r25, 0x06	; 6
    1c8e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <u8g2_ClearBuffer>
	u8g2_SetFont(&u8g2, u8g2_font_freedoomr10_mu);
    1c92:	64 eb       	ldi	r22, 0xB4	; 180
    1c94:	70 e0       	ldi	r23, 0x00	; 0
    1c96:	8d e7       	ldi	r24, 0x7D	; 125
    1c98:	96 e0       	ldi	r25, 0x06	; 6
    1c9a:	0e 94 b9 06 	call	0xd72	; 0xd72 <u8g2_SetFont>
	u8g2_SendBuffer(&u8g2);
    1c9e:	8d e7       	ldi	r24, 0x7D	; 125
    1ca0:	96 e0       	ldi	r25, 0x06	; 6
    1ca2:	0e 94 84 02 	call	0x508	; 0x508 <u8g2_SendBuffer>
    while (1) 
    {
		if (serial_complete()){
    1ca6:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <serial_complete>
    1caa:	88 23       	and	r24, r24
    1cac:	e1 f3       	breq	.-8      	; 0x1ca6 <main+0x86>
			uint8_t const *data_p = (void *)serial_read_data();
    1cae:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <serial_read_data>
    1cb2:	ec 01       	movw	r28, r24
			
			uint8_t val = parseString((void *)data_p);
    1cb4:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <parseString>
			if (val < 32){
    1cb8:	80 32       	cpi	r24, 0x20	; 32
    1cba:	18 f4       	brcc	.+6      	; 0x1cc2 <main+0xa2>
				att = val;
    1cbc:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <att>
    1cc0:	03 c0       	rjmp	.+6      	; 0x1cc8 <main+0xa8>
			}else{
				att = 31;
    1cc2:	8f e1       	ldi	r24, 0x1F	; 31
    1cc4:	80 93 fc 05 	sts	0x05FC, r24	; 0x8005fc <att>
			}
			printf("val %d ", att);
    1cc8:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <att>
    1ccc:	1f 92       	push	r1
    1cce:	8f 93       	push	r24
    1cd0:	80 e7       	ldi	r24, 0x70	; 112
    1cd2:	91 e0       	ldi	r25, 0x01	; 1
    1cd4:	9f 93       	push	r25
    1cd6:	8f 93       	push	r24
    1cd8:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <printf>
			u8g2_DrawStr(&u8g2, 1, 14, (void*)data_p);
    1cdc:	9e 01       	movw	r18, r28
    1cde:	4e e0       	ldi	r20, 0x0E	; 14
    1ce0:	50 e0       	ldi	r21, 0x00	; 0
    1ce2:	61 e0       	ldi	r22, 0x01	; 1
    1ce4:	70 e0       	ldi	r23, 0x00	; 0
    1ce6:	8d e7       	ldi	r24, 0x7D	; 125
    1ce8:	96 e0       	ldi	r25, 0x06	; 6
    1cea:	0e 94 63 06 	call	0xcc6	; 0xcc6 <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
    1cee:	8d e7       	ldi	r24, 0x7D	; 125
    1cf0:	96 e0       	ldi	r25, 0x06	; 6
    1cf2:	0e 94 84 02 	call	0x508	; 0x508 <u8g2_SendBuffer>
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	d3 cf       	rjmp	.-90     	; 0x1ca6 <main+0x86>

00001d00 <__udivmodsi4>:
    1d00:	a1 e2       	ldi	r26, 0x21	; 33
    1d02:	1a 2e       	mov	r1, r26
    1d04:	aa 1b       	sub	r26, r26
    1d06:	bb 1b       	sub	r27, r27
    1d08:	fd 01       	movw	r30, r26
    1d0a:	0d c0       	rjmp	.+26     	; 0x1d26 <__udivmodsi4_ep>

00001d0c <__udivmodsi4_loop>:
    1d0c:	aa 1f       	adc	r26, r26
    1d0e:	bb 1f       	adc	r27, r27
    1d10:	ee 1f       	adc	r30, r30
    1d12:	ff 1f       	adc	r31, r31
    1d14:	a2 17       	cp	r26, r18
    1d16:	b3 07       	cpc	r27, r19
    1d18:	e4 07       	cpc	r30, r20
    1d1a:	f5 07       	cpc	r31, r21
    1d1c:	20 f0       	brcs	.+8      	; 0x1d26 <__udivmodsi4_ep>
    1d1e:	a2 1b       	sub	r26, r18
    1d20:	b3 0b       	sbc	r27, r19
    1d22:	e4 0b       	sbc	r30, r20
    1d24:	f5 0b       	sbc	r31, r21

00001d26 <__udivmodsi4_ep>:
    1d26:	66 1f       	adc	r22, r22
    1d28:	77 1f       	adc	r23, r23
    1d2a:	88 1f       	adc	r24, r24
    1d2c:	99 1f       	adc	r25, r25
    1d2e:	1a 94       	dec	r1
    1d30:	69 f7       	brne	.-38     	; 0x1d0c <__udivmodsi4_loop>
    1d32:	60 95       	com	r22
    1d34:	70 95       	com	r23
    1d36:	80 95       	com	r24
    1d38:	90 95       	com	r25
    1d3a:	9b 01       	movw	r18, r22
    1d3c:	ac 01       	movw	r20, r24
    1d3e:	bd 01       	movw	r22, r26
    1d40:	cf 01       	movw	r24, r30
    1d42:	08 95       	ret

00001d44 <__umulhisi3>:
    1d44:	a2 9f       	mul	r26, r18
    1d46:	b0 01       	movw	r22, r0
    1d48:	b3 9f       	mul	r27, r19
    1d4a:	c0 01       	movw	r24, r0
    1d4c:	a3 9f       	mul	r26, r19
    1d4e:	70 0d       	add	r23, r0
    1d50:	81 1d       	adc	r24, r1
    1d52:	11 24       	eor	r1, r1
    1d54:	91 1d       	adc	r25, r1
    1d56:	b2 9f       	mul	r27, r18
    1d58:	70 0d       	add	r23, r0
    1d5a:	81 1d       	adc	r24, r1
    1d5c:	11 24       	eor	r1, r1
    1d5e:	91 1d       	adc	r25, r1
    1d60:	08 95       	ret

00001d62 <__muluhisi3>:
    1d62:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__umulhisi3>
    1d66:	a5 9f       	mul	r26, r21
    1d68:	90 0d       	add	r25, r0
    1d6a:	b4 9f       	mul	r27, r20
    1d6c:	90 0d       	add	r25, r0
    1d6e:	a4 9f       	mul	r26, r20
    1d70:	80 0d       	add	r24, r0
    1d72:	91 1d       	adc	r25, r1
    1d74:	11 24       	eor	r1, r1
    1d76:	08 95       	ret

00001d78 <atoi>:
    1d78:	fc 01       	movw	r30, r24
    1d7a:	88 27       	eor	r24, r24
    1d7c:	99 27       	eor	r25, r25
    1d7e:	e8 94       	clt
    1d80:	21 91       	ld	r18, Z+
    1d82:	20 32       	cpi	r18, 0x20	; 32
    1d84:	e9 f3       	breq	.-6      	; 0x1d80 <atoi+0x8>
    1d86:	29 30       	cpi	r18, 0x09	; 9
    1d88:	10 f0       	brcs	.+4      	; 0x1d8e <atoi+0x16>
    1d8a:	2e 30       	cpi	r18, 0x0E	; 14
    1d8c:	c8 f3       	brcs	.-14     	; 0x1d80 <atoi+0x8>
    1d8e:	2b 32       	cpi	r18, 0x2B	; 43
    1d90:	41 f0       	breq	.+16     	; 0x1da2 <atoi+0x2a>
    1d92:	2d 32       	cpi	r18, 0x2D	; 45
    1d94:	39 f4       	brne	.+14     	; 0x1da4 <atoi+0x2c>
    1d96:	68 94       	set
    1d98:	04 c0       	rjmp	.+8      	; 0x1da2 <atoi+0x2a>
    1d9a:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__mulhi_const_10>
    1d9e:	82 0f       	add	r24, r18
    1da0:	91 1d       	adc	r25, r1
    1da2:	21 91       	ld	r18, Z+
    1da4:	20 53       	subi	r18, 0x30	; 48
    1da6:	2a 30       	cpi	r18, 0x0A	; 10
    1da8:	c0 f3       	brcs	.-16     	; 0x1d9a <atoi+0x22>
    1daa:	1e f4       	brtc	.+6      	; 0x1db2 <atoi+0x3a>
    1dac:	90 95       	com	r25
    1dae:	81 95       	neg	r24
    1db0:	9f 4f       	sbci	r25, 0xFF	; 255
    1db2:	08 95       	ret

00001db4 <strtok>:
    1db4:	48 e7       	ldi	r20, 0x78	; 120
    1db6:	51 e0       	ldi	r21, 0x01	; 1
    1db8:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <strtok_r>
    1dbc:	08 95       	ret

00001dbe <memset>:
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	01 c0       	rjmp	.+2      	; 0x1dc4 <memset+0x6>
    1dc2:	6d 93       	st	X+, r22
    1dc4:	41 50       	subi	r20, 0x01	; 1
    1dc6:	50 40       	sbci	r21, 0x00	; 0
    1dc8:	e0 f7       	brcc	.-8      	; 0x1dc2 <memset+0x4>
    1dca:	08 95       	ret

00001dcc <strtok_r>:
    1dcc:	fa 01       	movw	r30, r20
    1dce:	a1 91       	ld	r26, Z+
    1dd0:	b0 81       	ld	r27, Z
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	19 f4       	brne	.+6      	; 0x1ddc <strtok_r+0x10>
    1dd6:	10 97       	sbiw	r26, 0x00	; 0
    1dd8:	e1 f0       	breq	.+56     	; 0x1e12 <strtok_r+0x46>
    1dda:	cd 01       	movw	r24, r26
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cd 01       	movw	r24, r26
    1de0:	0d 90       	ld	r0, X+
    1de2:	00 20       	and	r0, r0
    1de4:	11 f4       	brne	.+4      	; 0x1dea <strtok_r+0x1e>
    1de6:	c0 01       	movw	r24, r0
    1de8:	13 c0       	rjmp	.+38     	; 0x1e10 <strtok_r+0x44>
    1dea:	fb 01       	movw	r30, r22
    1dec:	21 91       	ld	r18, Z+
    1dee:	22 23       	and	r18, r18
    1df0:	19 f0       	breq	.+6      	; 0x1df8 <strtok_r+0x2c>
    1df2:	20 15       	cp	r18, r0
    1df4:	d9 f7       	brne	.-10     	; 0x1dec <strtok_r+0x20>
    1df6:	f3 cf       	rjmp	.-26     	; 0x1dde <strtok_r+0x12>
    1df8:	fb 01       	movw	r30, r22
    1dfa:	21 91       	ld	r18, Z+
    1dfc:	20 15       	cp	r18, r0
    1dfe:	19 f4       	brne	.+6      	; 0x1e06 <strtok_r+0x3a>
    1e00:	1e 92       	st	-X, r1
    1e02:	11 96       	adiw	r26, 0x01	; 1
    1e04:	06 c0       	rjmp	.+12     	; 0x1e12 <strtok_r+0x46>
    1e06:	22 23       	and	r18, r18
    1e08:	c1 f7       	brne	.-16     	; 0x1dfa <strtok_r+0x2e>
    1e0a:	0d 90       	ld	r0, X+
    1e0c:	00 20       	and	r0, r0
    1e0e:	a1 f7       	brne	.-24     	; 0x1df8 <strtok_r+0x2c>
    1e10:	d0 01       	movw	r26, r0
    1e12:	fa 01       	movw	r30, r20
    1e14:	a1 93       	st	Z+, r26
    1e16:	b0 83       	st	Z, r27
    1e18:	08 95       	ret

00001e1a <__mulhi_const_10>:
    1e1a:	7a e0       	ldi	r23, 0x0A	; 10
    1e1c:	97 9f       	mul	r25, r23
    1e1e:	90 2d       	mov	r25, r0
    1e20:	87 9f       	mul	r24, r23
    1e22:	80 2d       	mov	r24, r0
    1e24:	91 0d       	add	r25, r1
    1e26:	11 24       	eor	r1, r1
    1e28:	08 95       	ret

00001e2a <printf>:
    1e2a:	a0 e0       	ldi	r26, 0x00	; 0
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	eb e1       	ldi	r30, 0x1B	; 27
    1e30:	ff e0       	ldi	r31, 0x0F	; 15
    1e32:	0c 94 cc 11 	jmp	0x2398	; 0x2398 <__prologue_saves__+0x20>
    1e36:	ae 01       	movw	r20, r28
    1e38:	4b 5f       	subi	r20, 0xFB	; 251
    1e3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e3c:	fa 01       	movw	r30, r20
    1e3e:	61 91       	ld	r22, Z+
    1e40:	71 91       	ld	r23, Z+
    1e42:	af 01       	movw	r20, r30
    1e44:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <__iob+0x2>
    1e48:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <__iob+0x3>
    1e4c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <vfprintf>
    1e50:	e2 e0       	ldi	r30, 0x02	; 2
    1e52:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <__epilogue_restores__+0x20>

00001e56 <vfprintf>:
    1e56:	ab e0       	ldi	r26, 0x0B	; 11
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e1 e3       	ldi	r30, 0x31	; 49
    1e5c:	ff e0       	ldi	r31, 0x0F	; 15
    1e5e:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__prologue_saves__>
    1e62:	6c 01       	movw	r12, r24
    1e64:	7b 01       	movw	r14, r22
    1e66:	8a 01       	movw	r16, r20
    1e68:	fc 01       	movw	r30, r24
    1e6a:	17 82       	std	Z+7, r1	; 0x07
    1e6c:	16 82       	std	Z+6, r1	; 0x06
    1e6e:	83 81       	ldd	r24, Z+3	; 0x03
    1e70:	81 ff       	sbrs	r24, 1
    1e72:	cc c1       	rjmp	.+920    	; 0x220c <vfprintf+0x3b6>
    1e74:	ce 01       	movw	r24, r28
    1e76:	01 96       	adiw	r24, 0x01	; 1
    1e78:	3c 01       	movw	r6, r24
    1e7a:	f6 01       	movw	r30, r12
    1e7c:	93 81       	ldd	r25, Z+3	; 0x03
    1e7e:	f7 01       	movw	r30, r14
    1e80:	93 fd       	sbrc	r25, 3
    1e82:	85 91       	lpm	r24, Z+
    1e84:	93 ff       	sbrs	r25, 3
    1e86:	81 91       	ld	r24, Z+
    1e88:	7f 01       	movw	r14, r30
    1e8a:	88 23       	and	r24, r24
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <vfprintf+0x3a>
    1e8e:	ba c1       	rjmp	.+884    	; 0x2204 <vfprintf+0x3ae>
    1e90:	85 32       	cpi	r24, 0x25	; 37
    1e92:	39 f4       	brne	.+14     	; 0x1ea2 <vfprintf+0x4c>
    1e94:	93 fd       	sbrc	r25, 3
    1e96:	85 91       	lpm	r24, Z+
    1e98:	93 ff       	sbrs	r25, 3
    1e9a:	81 91       	ld	r24, Z+
    1e9c:	7f 01       	movw	r14, r30
    1e9e:	85 32       	cpi	r24, 0x25	; 37
    1ea0:	29 f4       	brne	.+10     	; 0x1eac <vfprintf+0x56>
    1ea2:	b6 01       	movw	r22, r12
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    1eaa:	e7 cf       	rjmp	.-50     	; 0x1e7a <vfprintf+0x24>
    1eac:	91 2c       	mov	r9, r1
    1eae:	21 2c       	mov	r2, r1
    1eb0:	31 2c       	mov	r3, r1
    1eb2:	ff e1       	ldi	r31, 0x1F	; 31
    1eb4:	f3 15       	cp	r31, r3
    1eb6:	d8 f0       	brcs	.+54     	; 0x1eee <vfprintf+0x98>
    1eb8:	8b 32       	cpi	r24, 0x2B	; 43
    1eba:	79 f0       	breq	.+30     	; 0x1eda <vfprintf+0x84>
    1ebc:	38 f4       	brcc	.+14     	; 0x1ecc <vfprintf+0x76>
    1ebe:	80 32       	cpi	r24, 0x20	; 32
    1ec0:	79 f0       	breq	.+30     	; 0x1ee0 <vfprintf+0x8a>
    1ec2:	83 32       	cpi	r24, 0x23	; 35
    1ec4:	a1 f4       	brne	.+40     	; 0x1eee <vfprintf+0x98>
    1ec6:	23 2d       	mov	r18, r3
    1ec8:	20 61       	ori	r18, 0x10	; 16
    1eca:	1d c0       	rjmp	.+58     	; 0x1f06 <vfprintf+0xb0>
    1ecc:	8d 32       	cpi	r24, 0x2D	; 45
    1ece:	61 f0       	breq	.+24     	; 0x1ee8 <vfprintf+0x92>
    1ed0:	80 33       	cpi	r24, 0x30	; 48
    1ed2:	69 f4       	brne	.+26     	; 0x1eee <vfprintf+0x98>
    1ed4:	23 2d       	mov	r18, r3
    1ed6:	21 60       	ori	r18, 0x01	; 1
    1ed8:	16 c0       	rjmp	.+44     	; 0x1f06 <vfprintf+0xb0>
    1eda:	83 2d       	mov	r24, r3
    1edc:	82 60       	ori	r24, 0x02	; 2
    1ede:	38 2e       	mov	r3, r24
    1ee0:	e3 2d       	mov	r30, r3
    1ee2:	e4 60       	ori	r30, 0x04	; 4
    1ee4:	3e 2e       	mov	r3, r30
    1ee6:	2a c0       	rjmp	.+84     	; 0x1f3c <vfprintf+0xe6>
    1ee8:	f3 2d       	mov	r31, r3
    1eea:	f8 60       	ori	r31, 0x08	; 8
    1eec:	1d c0       	rjmp	.+58     	; 0x1f28 <vfprintf+0xd2>
    1eee:	37 fc       	sbrc	r3, 7
    1ef0:	2d c0       	rjmp	.+90     	; 0x1f4c <vfprintf+0xf6>
    1ef2:	20 ed       	ldi	r18, 0xD0	; 208
    1ef4:	28 0f       	add	r18, r24
    1ef6:	2a 30       	cpi	r18, 0x0A	; 10
    1ef8:	40 f0       	brcs	.+16     	; 0x1f0a <vfprintf+0xb4>
    1efa:	8e 32       	cpi	r24, 0x2E	; 46
    1efc:	b9 f4       	brne	.+46     	; 0x1f2c <vfprintf+0xd6>
    1efe:	36 fc       	sbrc	r3, 6
    1f00:	81 c1       	rjmp	.+770    	; 0x2204 <vfprintf+0x3ae>
    1f02:	23 2d       	mov	r18, r3
    1f04:	20 64       	ori	r18, 0x40	; 64
    1f06:	32 2e       	mov	r3, r18
    1f08:	19 c0       	rjmp	.+50     	; 0x1f3c <vfprintf+0xe6>
    1f0a:	36 fe       	sbrs	r3, 6
    1f0c:	06 c0       	rjmp	.+12     	; 0x1f1a <vfprintf+0xc4>
    1f0e:	8a e0       	ldi	r24, 0x0A	; 10
    1f10:	98 9e       	mul	r9, r24
    1f12:	20 0d       	add	r18, r0
    1f14:	11 24       	eor	r1, r1
    1f16:	92 2e       	mov	r9, r18
    1f18:	11 c0       	rjmp	.+34     	; 0x1f3c <vfprintf+0xe6>
    1f1a:	ea e0       	ldi	r30, 0x0A	; 10
    1f1c:	2e 9e       	mul	r2, r30
    1f1e:	20 0d       	add	r18, r0
    1f20:	11 24       	eor	r1, r1
    1f22:	22 2e       	mov	r2, r18
    1f24:	f3 2d       	mov	r31, r3
    1f26:	f0 62       	ori	r31, 0x20	; 32
    1f28:	3f 2e       	mov	r3, r31
    1f2a:	08 c0       	rjmp	.+16     	; 0x1f3c <vfprintf+0xe6>
    1f2c:	8c 36       	cpi	r24, 0x6C	; 108
    1f2e:	21 f4       	brne	.+8      	; 0x1f38 <vfprintf+0xe2>
    1f30:	83 2d       	mov	r24, r3
    1f32:	80 68       	ori	r24, 0x80	; 128
    1f34:	38 2e       	mov	r3, r24
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <vfprintf+0xe6>
    1f38:	88 36       	cpi	r24, 0x68	; 104
    1f3a:	41 f4       	brne	.+16     	; 0x1f4c <vfprintf+0xf6>
    1f3c:	f7 01       	movw	r30, r14
    1f3e:	93 fd       	sbrc	r25, 3
    1f40:	85 91       	lpm	r24, Z+
    1f42:	93 ff       	sbrs	r25, 3
    1f44:	81 91       	ld	r24, Z+
    1f46:	7f 01       	movw	r14, r30
    1f48:	81 11       	cpse	r24, r1
    1f4a:	b3 cf       	rjmp	.-154    	; 0x1eb2 <vfprintf+0x5c>
    1f4c:	98 2f       	mov	r25, r24
    1f4e:	9f 7d       	andi	r25, 0xDF	; 223
    1f50:	95 54       	subi	r25, 0x45	; 69
    1f52:	93 30       	cpi	r25, 0x03	; 3
    1f54:	28 f4       	brcc	.+10     	; 0x1f60 <vfprintf+0x10a>
    1f56:	0c 5f       	subi	r16, 0xFC	; 252
    1f58:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5a:	9f e3       	ldi	r25, 0x3F	; 63
    1f5c:	99 83       	std	Y+1, r25	; 0x01
    1f5e:	0d c0       	rjmp	.+26     	; 0x1f7a <vfprintf+0x124>
    1f60:	83 36       	cpi	r24, 0x63	; 99
    1f62:	31 f0       	breq	.+12     	; 0x1f70 <vfprintf+0x11a>
    1f64:	83 37       	cpi	r24, 0x73	; 115
    1f66:	71 f0       	breq	.+28     	; 0x1f84 <vfprintf+0x12e>
    1f68:	83 35       	cpi	r24, 0x53	; 83
    1f6a:	09 f0       	breq	.+2      	; 0x1f6e <vfprintf+0x118>
    1f6c:	59 c0       	rjmp	.+178    	; 0x2020 <vfprintf+0x1ca>
    1f6e:	21 c0       	rjmp	.+66     	; 0x1fb2 <vfprintf+0x15c>
    1f70:	f8 01       	movw	r30, r16
    1f72:	80 81       	ld	r24, Z
    1f74:	89 83       	std	Y+1, r24	; 0x01
    1f76:	0e 5f       	subi	r16, 0xFE	; 254
    1f78:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7a:	88 24       	eor	r8, r8
    1f7c:	83 94       	inc	r8
    1f7e:	91 2c       	mov	r9, r1
    1f80:	53 01       	movw	r10, r6
    1f82:	13 c0       	rjmp	.+38     	; 0x1faa <vfprintf+0x154>
    1f84:	28 01       	movw	r4, r16
    1f86:	f2 e0       	ldi	r31, 0x02	; 2
    1f88:	4f 0e       	add	r4, r31
    1f8a:	51 1c       	adc	r5, r1
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	a0 80       	ld	r10, Z
    1f90:	b1 80       	ldd	r11, Z+1	; 0x01
    1f92:	36 fe       	sbrs	r3, 6
    1f94:	03 c0       	rjmp	.+6      	; 0x1f9c <vfprintf+0x146>
    1f96:	69 2d       	mov	r22, r9
    1f98:	70 e0       	ldi	r23, 0x00	; 0
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <vfprintf+0x14a>
    1f9c:	6f ef       	ldi	r22, 0xFF	; 255
    1f9e:	7f ef       	ldi	r23, 0xFF	; 255
    1fa0:	c5 01       	movw	r24, r10
    1fa2:	0e 94 17 11 	call	0x222e	; 0x222e <strnlen>
    1fa6:	4c 01       	movw	r8, r24
    1fa8:	82 01       	movw	r16, r4
    1faa:	f3 2d       	mov	r31, r3
    1fac:	ff 77       	andi	r31, 0x7F	; 127
    1fae:	3f 2e       	mov	r3, r31
    1fb0:	16 c0       	rjmp	.+44     	; 0x1fde <vfprintf+0x188>
    1fb2:	28 01       	movw	r4, r16
    1fb4:	22 e0       	ldi	r18, 0x02	; 2
    1fb6:	42 0e       	add	r4, r18
    1fb8:	51 1c       	adc	r5, r1
    1fba:	f8 01       	movw	r30, r16
    1fbc:	a0 80       	ld	r10, Z
    1fbe:	b1 80       	ldd	r11, Z+1	; 0x01
    1fc0:	36 fe       	sbrs	r3, 6
    1fc2:	03 c0       	rjmp	.+6      	; 0x1fca <vfprintf+0x174>
    1fc4:	69 2d       	mov	r22, r9
    1fc6:	70 e0       	ldi	r23, 0x00	; 0
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <vfprintf+0x178>
    1fca:	6f ef       	ldi	r22, 0xFF	; 255
    1fcc:	7f ef       	ldi	r23, 0xFF	; 255
    1fce:	c5 01       	movw	r24, r10
    1fd0:	0e 94 0c 11 	call	0x2218	; 0x2218 <strnlen_P>
    1fd4:	4c 01       	movw	r8, r24
    1fd6:	f3 2d       	mov	r31, r3
    1fd8:	f0 68       	ori	r31, 0x80	; 128
    1fda:	3f 2e       	mov	r3, r31
    1fdc:	82 01       	movw	r16, r4
    1fde:	33 fc       	sbrc	r3, 3
    1fe0:	1b c0       	rjmp	.+54     	; 0x2018 <vfprintf+0x1c2>
    1fe2:	82 2d       	mov	r24, r2
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	88 16       	cp	r8, r24
    1fe8:	99 06       	cpc	r9, r25
    1fea:	b0 f4       	brcc	.+44     	; 0x2018 <vfprintf+0x1c2>
    1fec:	b6 01       	movw	r22, r12
    1fee:	80 e2       	ldi	r24, 0x20	; 32
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    1ff6:	2a 94       	dec	r2
    1ff8:	f4 cf       	rjmp	.-24     	; 0x1fe2 <vfprintf+0x18c>
    1ffa:	f5 01       	movw	r30, r10
    1ffc:	37 fc       	sbrc	r3, 7
    1ffe:	85 91       	lpm	r24, Z+
    2000:	37 fe       	sbrs	r3, 7
    2002:	81 91       	ld	r24, Z+
    2004:	5f 01       	movw	r10, r30
    2006:	b6 01       	movw	r22, r12
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    200e:	21 10       	cpse	r2, r1
    2010:	2a 94       	dec	r2
    2012:	21 e0       	ldi	r18, 0x01	; 1
    2014:	82 1a       	sub	r8, r18
    2016:	91 08       	sbc	r9, r1
    2018:	81 14       	cp	r8, r1
    201a:	91 04       	cpc	r9, r1
    201c:	71 f7       	brne	.-36     	; 0x1ffa <vfprintf+0x1a4>
    201e:	e8 c0       	rjmp	.+464    	; 0x21f0 <vfprintf+0x39a>
    2020:	84 36       	cpi	r24, 0x64	; 100
    2022:	11 f0       	breq	.+4      	; 0x2028 <vfprintf+0x1d2>
    2024:	89 36       	cpi	r24, 0x69	; 105
    2026:	41 f5       	brne	.+80     	; 0x2078 <vfprintf+0x222>
    2028:	f8 01       	movw	r30, r16
    202a:	37 fe       	sbrs	r3, 7
    202c:	07 c0       	rjmp	.+14     	; 0x203c <vfprintf+0x1e6>
    202e:	60 81       	ld	r22, Z
    2030:	71 81       	ldd	r23, Z+1	; 0x01
    2032:	82 81       	ldd	r24, Z+2	; 0x02
    2034:	93 81       	ldd	r25, Z+3	; 0x03
    2036:	0c 5f       	subi	r16, 0xFC	; 252
    2038:	1f 4f       	sbci	r17, 0xFF	; 255
    203a:	08 c0       	rjmp	.+16     	; 0x204c <vfprintf+0x1f6>
    203c:	60 81       	ld	r22, Z
    203e:	71 81       	ldd	r23, Z+1	; 0x01
    2040:	07 2e       	mov	r0, r23
    2042:	00 0c       	add	r0, r0
    2044:	88 0b       	sbc	r24, r24
    2046:	99 0b       	sbc	r25, r25
    2048:	0e 5f       	subi	r16, 0xFE	; 254
    204a:	1f 4f       	sbci	r17, 0xFF	; 255
    204c:	f3 2d       	mov	r31, r3
    204e:	ff 76       	andi	r31, 0x6F	; 111
    2050:	3f 2e       	mov	r3, r31
    2052:	97 ff       	sbrs	r25, 7
    2054:	09 c0       	rjmp	.+18     	; 0x2068 <vfprintf+0x212>
    2056:	90 95       	com	r25
    2058:	80 95       	com	r24
    205a:	70 95       	com	r23
    205c:	61 95       	neg	r22
    205e:	7f 4f       	sbci	r23, 0xFF	; 255
    2060:	8f 4f       	sbci	r24, 0xFF	; 255
    2062:	9f 4f       	sbci	r25, 0xFF	; 255
    2064:	f0 68       	ori	r31, 0x80	; 128
    2066:	3f 2e       	mov	r3, r31
    2068:	2a e0       	ldi	r18, 0x0A	; 10
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	a3 01       	movw	r20, r6
    206e:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__ultoa_invert>
    2072:	88 2e       	mov	r8, r24
    2074:	86 18       	sub	r8, r6
    2076:	45 c0       	rjmp	.+138    	; 0x2102 <vfprintf+0x2ac>
    2078:	85 37       	cpi	r24, 0x75	; 117
    207a:	31 f4       	brne	.+12     	; 0x2088 <vfprintf+0x232>
    207c:	23 2d       	mov	r18, r3
    207e:	2f 7e       	andi	r18, 0xEF	; 239
    2080:	b2 2e       	mov	r11, r18
    2082:	2a e0       	ldi	r18, 0x0A	; 10
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	25 c0       	rjmp	.+74     	; 0x20d2 <vfprintf+0x27c>
    2088:	93 2d       	mov	r25, r3
    208a:	99 7f       	andi	r25, 0xF9	; 249
    208c:	b9 2e       	mov	r11, r25
    208e:	8f 36       	cpi	r24, 0x6F	; 111
    2090:	c1 f0       	breq	.+48     	; 0x20c2 <vfprintf+0x26c>
    2092:	18 f4       	brcc	.+6      	; 0x209a <vfprintf+0x244>
    2094:	88 35       	cpi	r24, 0x58	; 88
    2096:	79 f0       	breq	.+30     	; 0x20b6 <vfprintf+0x260>
    2098:	b5 c0       	rjmp	.+362    	; 0x2204 <vfprintf+0x3ae>
    209a:	80 37       	cpi	r24, 0x70	; 112
    209c:	19 f0       	breq	.+6      	; 0x20a4 <vfprintf+0x24e>
    209e:	88 37       	cpi	r24, 0x78	; 120
    20a0:	21 f0       	breq	.+8      	; 0x20aa <vfprintf+0x254>
    20a2:	b0 c0       	rjmp	.+352    	; 0x2204 <vfprintf+0x3ae>
    20a4:	e9 2f       	mov	r30, r25
    20a6:	e0 61       	ori	r30, 0x10	; 16
    20a8:	be 2e       	mov	r11, r30
    20aa:	b4 fe       	sbrs	r11, 4
    20ac:	0d c0       	rjmp	.+26     	; 0x20c8 <vfprintf+0x272>
    20ae:	fb 2d       	mov	r31, r11
    20b0:	f4 60       	ori	r31, 0x04	; 4
    20b2:	bf 2e       	mov	r11, r31
    20b4:	09 c0       	rjmp	.+18     	; 0x20c8 <vfprintf+0x272>
    20b6:	34 fe       	sbrs	r3, 4
    20b8:	0a c0       	rjmp	.+20     	; 0x20ce <vfprintf+0x278>
    20ba:	29 2f       	mov	r18, r25
    20bc:	26 60       	ori	r18, 0x06	; 6
    20be:	b2 2e       	mov	r11, r18
    20c0:	06 c0       	rjmp	.+12     	; 0x20ce <vfprintf+0x278>
    20c2:	28 e0       	ldi	r18, 0x08	; 8
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	05 c0       	rjmp	.+10     	; 0x20d2 <vfprintf+0x27c>
    20c8:	20 e1       	ldi	r18, 0x10	; 16
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <vfprintf+0x27c>
    20ce:	20 e1       	ldi	r18, 0x10	; 16
    20d0:	32 e0       	ldi	r19, 0x02	; 2
    20d2:	f8 01       	movw	r30, r16
    20d4:	b7 fe       	sbrs	r11, 7
    20d6:	07 c0       	rjmp	.+14     	; 0x20e6 <vfprintf+0x290>
    20d8:	60 81       	ld	r22, Z
    20da:	71 81       	ldd	r23, Z+1	; 0x01
    20dc:	82 81       	ldd	r24, Z+2	; 0x02
    20de:	93 81       	ldd	r25, Z+3	; 0x03
    20e0:	0c 5f       	subi	r16, 0xFC	; 252
    20e2:	1f 4f       	sbci	r17, 0xFF	; 255
    20e4:	06 c0       	rjmp	.+12     	; 0x20f2 <vfprintf+0x29c>
    20e6:	60 81       	ld	r22, Z
    20e8:	71 81       	ldd	r23, Z+1	; 0x01
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	0e 5f       	subi	r16, 0xFE	; 254
    20f0:	1f 4f       	sbci	r17, 0xFF	; 255
    20f2:	a3 01       	movw	r20, r6
    20f4:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__ultoa_invert>
    20f8:	88 2e       	mov	r8, r24
    20fa:	86 18       	sub	r8, r6
    20fc:	fb 2d       	mov	r31, r11
    20fe:	ff 77       	andi	r31, 0x7F	; 127
    2100:	3f 2e       	mov	r3, r31
    2102:	36 fe       	sbrs	r3, 6
    2104:	0d c0       	rjmp	.+26     	; 0x2120 <vfprintf+0x2ca>
    2106:	23 2d       	mov	r18, r3
    2108:	2e 7f       	andi	r18, 0xFE	; 254
    210a:	a2 2e       	mov	r10, r18
    210c:	89 14       	cp	r8, r9
    210e:	58 f4       	brcc	.+22     	; 0x2126 <vfprintf+0x2d0>
    2110:	34 fe       	sbrs	r3, 4
    2112:	0b c0       	rjmp	.+22     	; 0x212a <vfprintf+0x2d4>
    2114:	32 fc       	sbrc	r3, 2
    2116:	09 c0       	rjmp	.+18     	; 0x212a <vfprintf+0x2d4>
    2118:	83 2d       	mov	r24, r3
    211a:	8e 7e       	andi	r24, 0xEE	; 238
    211c:	a8 2e       	mov	r10, r24
    211e:	05 c0       	rjmp	.+10     	; 0x212a <vfprintf+0x2d4>
    2120:	b8 2c       	mov	r11, r8
    2122:	a3 2c       	mov	r10, r3
    2124:	03 c0       	rjmp	.+6      	; 0x212c <vfprintf+0x2d6>
    2126:	b8 2c       	mov	r11, r8
    2128:	01 c0       	rjmp	.+2      	; 0x212c <vfprintf+0x2d6>
    212a:	b9 2c       	mov	r11, r9
    212c:	a4 fe       	sbrs	r10, 4
    212e:	0f c0       	rjmp	.+30     	; 0x214e <vfprintf+0x2f8>
    2130:	fe 01       	movw	r30, r28
    2132:	e8 0d       	add	r30, r8
    2134:	f1 1d       	adc	r31, r1
    2136:	80 81       	ld	r24, Z
    2138:	80 33       	cpi	r24, 0x30	; 48
    213a:	21 f4       	brne	.+8      	; 0x2144 <vfprintf+0x2ee>
    213c:	9a 2d       	mov	r25, r10
    213e:	99 7e       	andi	r25, 0xE9	; 233
    2140:	a9 2e       	mov	r10, r25
    2142:	09 c0       	rjmp	.+18     	; 0x2156 <vfprintf+0x300>
    2144:	a2 fe       	sbrs	r10, 2
    2146:	06 c0       	rjmp	.+12     	; 0x2154 <vfprintf+0x2fe>
    2148:	b3 94       	inc	r11
    214a:	b3 94       	inc	r11
    214c:	04 c0       	rjmp	.+8      	; 0x2156 <vfprintf+0x300>
    214e:	8a 2d       	mov	r24, r10
    2150:	86 78       	andi	r24, 0x86	; 134
    2152:	09 f0       	breq	.+2      	; 0x2156 <vfprintf+0x300>
    2154:	b3 94       	inc	r11
    2156:	a3 fc       	sbrc	r10, 3
    2158:	11 c0       	rjmp	.+34     	; 0x217c <vfprintf+0x326>
    215a:	a0 fe       	sbrs	r10, 0
    215c:	06 c0       	rjmp	.+12     	; 0x216a <vfprintf+0x314>
    215e:	b2 14       	cp	r11, r2
    2160:	88 f4       	brcc	.+34     	; 0x2184 <vfprintf+0x32e>
    2162:	28 0c       	add	r2, r8
    2164:	92 2c       	mov	r9, r2
    2166:	9b 18       	sub	r9, r11
    2168:	0e c0       	rjmp	.+28     	; 0x2186 <vfprintf+0x330>
    216a:	b2 14       	cp	r11, r2
    216c:	60 f4       	brcc	.+24     	; 0x2186 <vfprintf+0x330>
    216e:	b6 01       	movw	r22, r12
    2170:	80 e2       	ldi	r24, 0x20	; 32
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    2178:	b3 94       	inc	r11
    217a:	f7 cf       	rjmp	.-18     	; 0x216a <vfprintf+0x314>
    217c:	b2 14       	cp	r11, r2
    217e:	18 f4       	brcc	.+6      	; 0x2186 <vfprintf+0x330>
    2180:	2b 18       	sub	r2, r11
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <vfprintf+0x332>
    2184:	98 2c       	mov	r9, r8
    2186:	21 2c       	mov	r2, r1
    2188:	a4 fe       	sbrs	r10, 4
    218a:	10 c0       	rjmp	.+32     	; 0x21ac <vfprintf+0x356>
    218c:	b6 01       	movw	r22, r12
    218e:	80 e3       	ldi	r24, 0x30	; 48
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    2196:	a2 fe       	sbrs	r10, 2
    2198:	17 c0       	rjmp	.+46     	; 0x21c8 <vfprintf+0x372>
    219a:	a1 fc       	sbrc	r10, 1
    219c:	03 c0       	rjmp	.+6      	; 0x21a4 <vfprintf+0x34e>
    219e:	88 e7       	ldi	r24, 0x78	; 120
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	02 c0       	rjmp	.+4      	; 0x21a8 <vfprintf+0x352>
    21a4:	88 e5       	ldi	r24, 0x58	; 88
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	b6 01       	movw	r22, r12
    21aa:	0c c0       	rjmp	.+24     	; 0x21c4 <vfprintf+0x36e>
    21ac:	8a 2d       	mov	r24, r10
    21ae:	86 78       	andi	r24, 0x86	; 134
    21b0:	59 f0       	breq	.+22     	; 0x21c8 <vfprintf+0x372>
    21b2:	a1 fe       	sbrs	r10, 1
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <vfprintf+0x364>
    21b6:	8b e2       	ldi	r24, 0x2B	; 43
    21b8:	01 c0       	rjmp	.+2      	; 0x21bc <vfprintf+0x366>
    21ba:	80 e2       	ldi	r24, 0x20	; 32
    21bc:	a7 fc       	sbrc	r10, 7
    21be:	8d e2       	ldi	r24, 0x2D	; 45
    21c0:	b6 01       	movw	r22, r12
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    21c8:	89 14       	cp	r8, r9
    21ca:	38 f4       	brcc	.+14     	; 0x21da <vfprintf+0x384>
    21cc:	b6 01       	movw	r22, r12
    21ce:	80 e3       	ldi	r24, 0x30	; 48
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    21d6:	9a 94       	dec	r9
    21d8:	f7 cf       	rjmp	.-18     	; 0x21c8 <vfprintf+0x372>
    21da:	8a 94       	dec	r8
    21dc:	f3 01       	movw	r30, r6
    21de:	e8 0d       	add	r30, r8
    21e0:	f1 1d       	adc	r31, r1
    21e2:	80 81       	ld	r24, Z
    21e4:	b6 01       	movw	r22, r12
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    21ec:	81 10       	cpse	r8, r1
    21ee:	f5 cf       	rjmp	.-22     	; 0x21da <vfprintf+0x384>
    21f0:	22 20       	and	r2, r2
    21f2:	09 f4       	brne	.+2      	; 0x21f6 <vfprintf+0x3a0>
    21f4:	42 ce       	rjmp	.-892    	; 0x1e7a <vfprintf+0x24>
    21f6:	b6 01       	movw	r22, r12
    21f8:	80 e2       	ldi	r24, 0x20	; 32
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	0e 94 22 11 	call	0x2244	; 0x2244 <fputc>
    2200:	2a 94       	dec	r2
    2202:	f6 cf       	rjmp	.-20     	; 0x21f0 <vfprintf+0x39a>
    2204:	f6 01       	movw	r30, r12
    2206:	86 81       	ldd	r24, Z+6	; 0x06
    2208:	97 81       	ldd	r25, Z+7	; 0x07
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <vfprintf+0x3ba>
    220c:	8f ef       	ldi	r24, 0xFF	; 255
    220e:	9f ef       	ldi	r25, 0xFF	; 255
    2210:	2b 96       	adiw	r28, 0x0b	; 11
    2212:	e2 e1       	ldi	r30, 0x12	; 18
    2214:	0c 94 d8 11 	jmp	0x23b0	; 0x23b0 <__epilogue_restores__>

00002218 <strnlen_P>:
    2218:	fc 01       	movw	r30, r24
    221a:	05 90       	lpm	r0, Z+
    221c:	61 50       	subi	r22, 0x01	; 1
    221e:	70 40       	sbci	r23, 0x00	; 0
    2220:	01 10       	cpse	r0, r1
    2222:	d8 f7       	brcc	.-10     	; 0x221a <strnlen_P+0x2>
    2224:	80 95       	com	r24
    2226:	90 95       	com	r25
    2228:	8e 0f       	add	r24, r30
    222a:	9f 1f       	adc	r25, r31
    222c:	08 95       	ret

0000222e <strnlen>:
    222e:	fc 01       	movw	r30, r24
    2230:	61 50       	subi	r22, 0x01	; 1
    2232:	70 40       	sbci	r23, 0x00	; 0
    2234:	01 90       	ld	r0, Z+
    2236:	01 10       	cpse	r0, r1
    2238:	d8 f7       	brcc	.-10     	; 0x2230 <strnlen+0x2>
    223a:	80 95       	com	r24
    223c:	90 95       	com	r25
    223e:	8e 0f       	add	r24, r30
    2240:	9f 1f       	adc	r25, r31
    2242:	08 95       	ret

00002244 <fputc>:
    2244:	0f 93       	push	r16
    2246:	1f 93       	push	r17
    2248:	cf 93       	push	r28
    224a:	df 93       	push	r29
    224c:	fb 01       	movw	r30, r22
    224e:	23 81       	ldd	r18, Z+3	; 0x03
    2250:	21 fd       	sbrc	r18, 1
    2252:	03 c0       	rjmp	.+6      	; 0x225a <fputc+0x16>
    2254:	8f ef       	ldi	r24, 0xFF	; 255
    2256:	9f ef       	ldi	r25, 0xFF	; 255
    2258:	2c c0       	rjmp	.+88     	; 0x22b2 <fputc+0x6e>
    225a:	22 ff       	sbrs	r18, 2
    225c:	16 c0       	rjmp	.+44     	; 0x228a <fputc+0x46>
    225e:	46 81       	ldd	r20, Z+6	; 0x06
    2260:	57 81       	ldd	r21, Z+7	; 0x07
    2262:	24 81       	ldd	r18, Z+4	; 0x04
    2264:	35 81       	ldd	r19, Z+5	; 0x05
    2266:	42 17       	cp	r20, r18
    2268:	53 07       	cpc	r21, r19
    226a:	44 f4       	brge	.+16     	; 0x227c <fputc+0x38>
    226c:	a0 81       	ld	r26, Z
    226e:	b1 81       	ldd	r27, Z+1	; 0x01
    2270:	9d 01       	movw	r18, r26
    2272:	2f 5f       	subi	r18, 0xFF	; 255
    2274:	3f 4f       	sbci	r19, 0xFF	; 255
    2276:	31 83       	std	Z+1, r19	; 0x01
    2278:	20 83       	st	Z, r18
    227a:	8c 93       	st	X, r24
    227c:	26 81       	ldd	r18, Z+6	; 0x06
    227e:	37 81       	ldd	r19, Z+7	; 0x07
    2280:	2f 5f       	subi	r18, 0xFF	; 255
    2282:	3f 4f       	sbci	r19, 0xFF	; 255
    2284:	37 83       	std	Z+7, r19	; 0x07
    2286:	26 83       	std	Z+6, r18	; 0x06
    2288:	14 c0       	rjmp	.+40     	; 0x22b2 <fputc+0x6e>
    228a:	8b 01       	movw	r16, r22
    228c:	ec 01       	movw	r28, r24
    228e:	fb 01       	movw	r30, r22
    2290:	00 84       	ldd	r0, Z+8	; 0x08
    2292:	f1 85       	ldd	r31, Z+9	; 0x09
    2294:	e0 2d       	mov	r30, r0
    2296:	09 95       	icall
    2298:	89 2b       	or	r24, r25
    229a:	e1 f6       	brne	.-72     	; 0x2254 <fputc+0x10>
    229c:	d8 01       	movw	r26, r16
    229e:	16 96       	adiw	r26, 0x06	; 6
    22a0:	8d 91       	ld	r24, X+
    22a2:	9c 91       	ld	r25, X
    22a4:	17 97       	sbiw	r26, 0x07	; 7
    22a6:	01 96       	adiw	r24, 0x01	; 1
    22a8:	17 96       	adiw	r26, 0x07	; 7
    22aa:	9c 93       	st	X, r25
    22ac:	8e 93       	st	-X, r24
    22ae:	16 97       	sbiw	r26, 0x06	; 6
    22b0:	ce 01       	movw	r24, r28
    22b2:	df 91       	pop	r29
    22b4:	cf 91       	pop	r28
    22b6:	1f 91       	pop	r17
    22b8:	0f 91       	pop	r16
    22ba:	08 95       	ret

000022bc <__ultoa_invert>:
    22bc:	fa 01       	movw	r30, r20
    22be:	aa 27       	eor	r26, r26
    22c0:	28 30       	cpi	r18, 0x08	; 8
    22c2:	51 f1       	breq	.+84     	; 0x2318 <__ultoa_invert+0x5c>
    22c4:	20 31       	cpi	r18, 0x10	; 16
    22c6:	81 f1       	breq	.+96     	; 0x2328 <__ultoa_invert+0x6c>
    22c8:	e8 94       	clt
    22ca:	6f 93       	push	r22
    22cc:	6e 7f       	andi	r22, 0xFE	; 254
    22ce:	6e 5f       	subi	r22, 0xFE	; 254
    22d0:	7f 4f       	sbci	r23, 0xFF	; 255
    22d2:	8f 4f       	sbci	r24, 0xFF	; 255
    22d4:	9f 4f       	sbci	r25, 0xFF	; 255
    22d6:	af 4f       	sbci	r26, 0xFF	; 255
    22d8:	b1 e0       	ldi	r27, 0x01	; 1
    22da:	3e d0       	rcall	.+124    	; 0x2358 <__ultoa_invert+0x9c>
    22dc:	b4 e0       	ldi	r27, 0x04	; 4
    22de:	3c d0       	rcall	.+120    	; 0x2358 <__ultoa_invert+0x9c>
    22e0:	67 0f       	add	r22, r23
    22e2:	78 1f       	adc	r23, r24
    22e4:	89 1f       	adc	r24, r25
    22e6:	9a 1f       	adc	r25, r26
    22e8:	a1 1d       	adc	r26, r1
    22ea:	68 0f       	add	r22, r24
    22ec:	79 1f       	adc	r23, r25
    22ee:	8a 1f       	adc	r24, r26
    22f0:	91 1d       	adc	r25, r1
    22f2:	a1 1d       	adc	r26, r1
    22f4:	6a 0f       	add	r22, r26
    22f6:	71 1d       	adc	r23, r1
    22f8:	81 1d       	adc	r24, r1
    22fa:	91 1d       	adc	r25, r1
    22fc:	a1 1d       	adc	r26, r1
    22fe:	20 d0       	rcall	.+64     	; 0x2340 <__ultoa_invert+0x84>
    2300:	09 f4       	brne	.+2      	; 0x2304 <__ultoa_invert+0x48>
    2302:	68 94       	set
    2304:	3f 91       	pop	r19
    2306:	2a e0       	ldi	r18, 0x0A	; 10
    2308:	26 9f       	mul	r18, r22
    230a:	11 24       	eor	r1, r1
    230c:	30 19       	sub	r19, r0
    230e:	30 5d       	subi	r19, 0xD0	; 208
    2310:	31 93       	st	Z+, r19
    2312:	de f6       	brtc	.-74     	; 0x22ca <__ultoa_invert+0xe>
    2314:	cf 01       	movw	r24, r30
    2316:	08 95       	ret
    2318:	46 2f       	mov	r20, r22
    231a:	47 70       	andi	r20, 0x07	; 7
    231c:	40 5d       	subi	r20, 0xD0	; 208
    231e:	41 93       	st	Z+, r20
    2320:	b3 e0       	ldi	r27, 0x03	; 3
    2322:	0f d0       	rcall	.+30     	; 0x2342 <__ultoa_invert+0x86>
    2324:	c9 f7       	brne	.-14     	; 0x2318 <__ultoa_invert+0x5c>
    2326:	f6 cf       	rjmp	.-20     	; 0x2314 <__ultoa_invert+0x58>
    2328:	46 2f       	mov	r20, r22
    232a:	4f 70       	andi	r20, 0x0F	; 15
    232c:	40 5d       	subi	r20, 0xD0	; 208
    232e:	4a 33       	cpi	r20, 0x3A	; 58
    2330:	18 f0       	brcs	.+6      	; 0x2338 <__ultoa_invert+0x7c>
    2332:	49 5d       	subi	r20, 0xD9	; 217
    2334:	31 fd       	sbrc	r19, 1
    2336:	40 52       	subi	r20, 0x20	; 32
    2338:	41 93       	st	Z+, r20
    233a:	02 d0       	rcall	.+4      	; 0x2340 <__ultoa_invert+0x84>
    233c:	a9 f7       	brne	.-22     	; 0x2328 <__ultoa_invert+0x6c>
    233e:	ea cf       	rjmp	.-44     	; 0x2314 <__ultoa_invert+0x58>
    2340:	b4 e0       	ldi	r27, 0x04	; 4
    2342:	a6 95       	lsr	r26
    2344:	97 95       	ror	r25
    2346:	87 95       	ror	r24
    2348:	77 95       	ror	r23
    234a:	67 95       	ror	r22
    234c:	ba 95       	dec	r27
    234e:	c9 f7       	brne	.-14     	; 0x2342 <__ultoa_invert+0x86>
    2350:	00 97       	sbiw	r24, 0x00	; 0
    2352:	61 05       	cpc	r22, r1
    2354:	71 05       	cpc	r23, r1
    2356:	08 95       	ret
    2358:	9b 01       	movw	r18, r22
    235a:	ac 01       	movw	r20, r24
    235c:	0a 2e       	mov	r0, r26
    235e:	06 94       	lsr	r0
    2360:	57 95       	ror	r21
    2362:	47 95       	ror	r20
    2364:	37 95       	ror	r19
    2366:	27 95       	ror	r18
    2368:	ba 95       	dec	r27
    236a:	c9 f7       	brne	.-14     	; 0x235e <__ultoa_invert+0xa2>
    236c:	62 0f       	add	r22, r18
    236e:	73 1f       	adc	r23, r19
    2370:	84 1f       	adc	r24, r20
    2372:	95 1f       	adc	r25, r21
    2374:	a0 1d       	adc	r26, r0
    2376:	08 95       	ret

00002378 <__prologue_saves__>:
    2378:	2f 92       	push	r2
    237a:	3f 92       	push	r3
    237c:	4f 92       	push	r4
    237e:	5f 92       	push	r5
    2380:	6f 92       	push	r6
    2382:	7f 92       	push	r7
    2384:	8f 92       	push	r8
    2386:	9f 92       	push	r9
    2388:	af 92       	push	r10
    238a:	bf 92       	push	r11
    238c:	cf 92       	push	r12
    238e:	df 92       	push	r13
    2390:	ef 92       	push	r14
    2392:	ff 92       	push	r15
    2394:	0f 93       	push	r16
    2396:	1f 93       	push	r17
    2398:	cf 93       	push	r28
    239a:	df 93       	push	r29
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	ca 1b       	sub	r28, r26
    23a2:	db 0b       	sbc	r29, r27
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	de bf       	out	0x3e, r29	; 62
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	cd bf       	out	0x3d, r28	; 61
    23ae:	09 94       	ijmp

000023b0 <__epilogue_restores__>:
    23b0:	2a 88       	ldd	r2, Y+18	; 0x12
    23b2:	39 88       	ldd	r3, Y+17	; 0x11
    23b4:	48 88       	ldd	r4, Y+16	; 0x10
    23b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    23b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    23ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    23bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    23be:	9b 84       	ldd	r9, Y+11	; 0x0b
    23c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    23c2:	b9 84       	ldd	r11, Y+9	; 0x09
    23c4:	c8 84       	ldd	r12, Y+8	; 0x08
    23c6:	df 80       	ldd	r13, Y+7	; 0x07
    23c8:	ee 80       	ldd	r14, Y+6	; 0x06
    23ca:	fd 80       	ldd	r15, Y+5	; 0x05
    23cc:	0c 81       	ldd	r16, Y+4	; 0x04
    23ce:	1b 81       	ldd	r17, Y+3	; 0x03
    23d0:	aa 81       	ldd	r26, Y+2	; 0x02
    23d2:	b9 81       	ldd	r27, Y+1	; 0x01
    23d4:	ce 0f       	add	r28, r30
    23d6:	d1 1d       	adc	r29, r1
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	ed 01       	movw	r28, r26
    23e4:	08 95       	ret

000023e6 <_exit>:
    23e6:	f8 94       	cli

000023e8 <__stop_program>:
    23e8:	ff cf       	rjmp	.-2      	; 0x23e8 <__stop_program>
